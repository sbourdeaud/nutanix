# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class LicenseCategory(object):

    """Indicates the different categories of license with possible values of Starter, Pro, Ultimate, and others.


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - STARTER: License category for Starter Tier.
        - PRO: License category for Pro Tier.
        - ULTIMATE: License category for Ultimate Tier.
        - CALM: License category for CALM.
        - STANDARD: License category for Standard Tier.
        - AOS_MINE: License category for AOS_MINE.
        - SOFTWARE_ENCRYPTION: License category for Software Encryption Addon.
        - ADV_REPLICATION: License category for Advanced Replication Addon.
        - OBJECT: License category for Object.
        - ULTIMATE_TRIAL: License category for Ultimate Trial tier.
        - PRISM_STARTER: License category for Prism Starter tier.
        - PRO_SPECIAL: License category for Pro Special tier.
        - ADR: License category for Advanced Replication Addon.
        - SECURITY: License category for Security Addon.
        - NKS: License category for NKS.
        - APPAUTOMATION: License category for app automation.
        - NDA: License category for NDA.
        - UST: License category for Unified Storage.
        - ANALYTICS: License category for analytics.
        - STANDALONE: License category for standalone tier.
        - DRASS: License category for DRASS.
        - CLOUD_NATIVE: License category for Cloud Native tier.
        - DATA_ENCRYPTION: License category for Data Encryption Addon.
        - NDS: License category for  Nutanix Database Service.
        - NDB: License category for  Nutanix Database.
        - NO_LICENSE: License category for No License Tier.
        - NUS_ENCRYPTION: License category for NUS Encryption Addon.
        - NUS_REPLICATION: License category for NUS Advanced Replication Addon.
        - CLOUD_PRO: License category for Cloud Pro.
        - CLOUD_ULTIMATE: License category for Cloud Ultimate.
        - CLOUD: License category for Cloud.
        - PUBLIC_CLOUD: License category for Public Cloud.
        - ADVANCED_REPLICATION: License category for Advanced Replication Addon.
        - NDK: License category for Nutanix Data Services for Kubernetes Addon.
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    STARTER = "STARTER"
    PRO = "PRO"
    ULTIMATE = "ULTIMATE"
    CALM = "CALM"
    STANDARD = "STANDARD"
    AOS_MINE = "AOS_MINE"
    SOFTWARE_ENCRYPTION = "SOFTWARE_ENCRYPTION"
    ADV_REPLICATION = "ADV_REPLICATION"
    OBJECT = "OBJECT"
    ULTIMATE_TRIAL = "ULTIMATE_TRIAL"
    PRISM_STARTER = "PRISM_STARTER"
    PRO_SPECIAL = "PRO_SPECIAL"
    ADR = "ADR"
    SECURITY = "SECURITY"
    NKS = "NKS"
    APPAUTOMATION = "APPAUTOMATION"
    NDA = "NDA"
    UST = "UST"
    ANALYTICS = "ANALYTICS"
    STANDALONE = "STANDALONE"
    DRASS = "DRASS"
    CLOUD_NATIVE = "CLOUD_NATIVE"
    DATA_ENCRYPTION = "DATA_ENCRYPTION"
    NDS = "NDS"
    NDB = "NDB"
    NO_LICENSE = "NO_LICENSE"
    NUS_ENCRYPTION = "NUS_ENCRYPTION"
    NUS_REPLICATION = "NUS_REPLICATION"
    CLOUD_PRO = "CLOUD_PRO"
    CLOUD_ULTIMATE = "CLOUD_ULTIMATE"
    CLOUD = "CLOUD"
    PUBLIC_CLOUD = "PUBLIC_CLOUD"
    ADVANCED_REPLICATION = "ADVANCED_REPLICATION"
    NDK = "NDK"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'licensing.v4.config.LicenseCategory'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr in vars(self):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LicenseCategory, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


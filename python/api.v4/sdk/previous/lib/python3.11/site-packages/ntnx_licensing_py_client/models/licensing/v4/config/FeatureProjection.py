# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_licensing_py_client.models
from ntnx_licensing_py_client.models.OneOflicensing.v4.config.FeatureProjectionvalue import FeatureProjectionvalue  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.Feature import Feature  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseCategory import LicenseCategory  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseType import LicenseType  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.Scope import Scope  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.SubCategory import SubCategory  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.ValueType import ValueType  # noqa: F401,E501

class FeatureProjection(Feature):

    """

    :param name: (:attr:`name`) Name of feature like dp_recovery, dp_backup_tiering.
    :type name: 
     max=100 chars
    
    :param value_type: (:attr:`value_type`) 
    :type value_type: 
    
    
    :param value: (:attr:`value`) Value of feature, it could be true, false or integer.
    :type value: 
    
    
    :param license_type: (:attr:`license_type`) 
    :type license_type: 
    
    
    :param license_category: (:attr:`license_category`) 
    :type license_category: 
    
    
    :param license_sub_category: (:attr:`license_sub_category`) 
    :type license_sub_category: 
    
    
    :param scope: (:attr:`scope`) 
    :type scope: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'value_type': 'licensing.v4.config.ValueType',
        'value': 'OneOflicensing.v4.config.Featurevalue',
        'license_type': 'licensing.v4.config.LicenseType',
        'license_category': 'licensing.v4.config.LicenseCategory',
        'license_sub_category': 'licensing.v4.config.SubCategory',
        'scope': 'licensing.v4.config.Scope',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'value_type': 'valueType',
        'value': 'value',
        'license_type': 'licenseType',
        'license_category': 'licenseCategory',
        'license_sub_category': 'licenseSubCategory',
        'scope': 'scope',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, value_type=None, value=None, license_type=None, license_category=None, license_sub_category=None, scope=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        Feature.__init__(self, name, value_type, value, license_type, license_category, license_sub_category, scope, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'licensing.v4.config.FeatureProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_licensing_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(FeatureProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


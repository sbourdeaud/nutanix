# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.licensing.v4.config.FeatureDetail import FeatureDetail  # noqa: F401,E501

class FeatureViolation(FeatureDetail):

    """Model capturing feature info and associated clusters.

    :param affected_entity: (:attr:`affected_entity`) Description of entity for which feature violation is thrown.  Examples: 1) Vm with uuid 000604af-3aa4-9cfe-1c6a-ac1f6b357fb7.            2) Storage Container bucket-data-prod            3) Protection Domain pd_prod with Application consistency group prod. 
    :type affected_entity: 
     max=100 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'affected_entity': 'str',
        'feature_id': 'str',
        'name': 'str',
        'description': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'affected_entity': 'affectedEntity',
        'feature_id': 'featureId',
        'name': 'name',
        'description': 'description',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, affected_entity=None, feature_id=None, name=None, description=None, *args, **kwargs):  # noqa: E501
        FeatureDetail.__init__(self, feature_id, name, description, *args, **kwargs)
        self.__affected_entity = None
        self.discriminator = None
        if affected_entity is not None:
            self.__affected_entity = affected_entity

    def _initialize_object_type(self):
        return 'licensing.v4.config.FeatureViolation'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def affected_entity(self):
        """
        Description of entity for which feature violation is thrown.  Examples: 1) Vm with uuid 000604af-3aa4-9cfe-1c6a-ac1f6b357fb7.            2) Storage Container bucket-data-prod            3) Protection Domain pd_prod with Application consistency group prod. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__affected_entity

    @affected_entity.setter
    def affected_entity(self, affected_entity):
        if affected_entity is not None and len(affected_entity) > 100:
            raise ValueError("Invalid value for `affected_entity`, length must be less than or equal to `100`")  # noqa: E501

        self.__affected_entity = affected_entity

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(FeatureViolation, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureViolation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


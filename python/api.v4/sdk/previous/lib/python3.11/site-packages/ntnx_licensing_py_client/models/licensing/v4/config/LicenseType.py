# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class LicenseType(object):

    """Indicates the different license types with possible values of Prism, AOS, Calm, and others.


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - PRISM: License type for Prism Product.
        - CALM: License type for Calm Product.
        - FLOW: License type for Flow Product.
        - OBJECT: License type for Object Product.
        - AOS: License type for AOS Product.
        - FILE: License type for File Product.
        - VDI: License type for Virtual Desktop Infrastructure Product.
        - ROBO: License type for Robo Product.
        - MINE: License type for Mine Product.
        - NCI: License type for Nutanix Cloud Infrastructure Product.
        - NCM: License type for Nutanix Cloud Managed Product.
        - NCI_D: License type for NCI Data Product.
        - NDA_PLATFORM: License type for Nutanix Database Platform Product.
        - UNIFIED_STORAGE: License type for storage products including Object, Files, and Volume.
        - EUC: License type for End User Computing Product.
        - OBJECTS: License type for Object Product.
        - ERA: License type for Enterprise Cloud Recovery and Automation Product.
        - DRS: License type for Nutanix Dynamic Resource Schedule Product.
        - NDS: License type for Nutanix Database Service Product.
        - NDA: License type for Nutanix Database Product.
        - NDS_PLATFORM: License type for Nutanix Database Service Platform Product.
        - NDB_PLATFORM: License type for Nutanix Database Platform Product.
        - NUS: License type for Unified Storage Product.
        - NDB: License type for Nutanix Database Product.
        - NCM_CLOUD: License type for NCM Cloud Product.
        - EDGE: License type for EDGE Product.
        - NO_LICENSE: License type representing no license applied to cluster.
        - NCM_EDGE: License type for NCM EDGE Product.
        - NCM_EUC: License type for NCM EUC Product.
        - NCI_C: License type for Nutanix Cloud Infrastructure Computing Product.
        - NKP: License type for Nutanix Kubernetes Platform Product.
        - NKPFS: License type for Nutanix Kubernetes Platform (NKP) Full Stack.
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    PRISM = "PRISM"
    CALM = "CALM"
    FLOW = "FLOW"
    OBJECT = "OBJECT"
    AOS = "AOS"
    FILE = "FILE"
    VDI = "VDI"
    ROBO = "ROBO"
    MINE = "MINE"
    NCI = "NCI"
    NCM = "NCM"
    NCI_D = "NCI_D"
    NDA_PLATFORM = "NDA_PLATFORM"
    UNIFIED_STORAGE = "UNIFIED_STORAGE"
    EUC = "EUC"
    OBJECTS = "OBJECTS"
    ERA = "ERA"
    DRS = "DRS"
    NDS = "NDS"
    NDA = "NDA"
    NDS_PLATFORM = "NDS_PLATFORM"
    NDB_PLATFORM = "NDB_PLATFORM"
    NUS = "NUS"
    NDB = "NDB"
    NCM_CLOUD = "NCM_CLOUD"
    EDGE = "EDGE"
    NO_LICENSE = "NO_LICENSE"
    NCM_EDGE = "NCM_EDGE"
    NCM_EUC = "NCM_EUC"
    NCI_C = "NCI_C"
    NKP = "NKP"
    NKPFS = "NKPFS"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'licensing.v4.config.LicenseType'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr in vars(self):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LicenseType, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


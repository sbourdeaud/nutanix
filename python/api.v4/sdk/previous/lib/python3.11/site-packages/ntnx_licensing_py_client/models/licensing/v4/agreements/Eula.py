# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_licensing_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.agreements.Acceptance import Acceptance  # noqa: F401,E501

class Eula(ExternalizableAbstractModel):

    """Model containing the EULA info attributes.

    :param content: (:attr:`content`) Textual contents of the end user license agreement.
    :type content: required
    
    
    :param updated_time: (:attr:`updated_time`) EULA update time since epoch in ISO date time.
    :type updated_time: 
    
    
    :param version: (:attr:`version`) Version of the EULA.
    :type version: required
    
    
    :param is_enabled: (:attr:`is_enabled`) Indicates whether this is the current EULA of the cluster or not.
    :type is_enabled: 
    
    
    :param acceptances: (:attr:`acceptances`) List of users accepting the EULA along with acceptance time for each.
    :type acceptances: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'content': 'str',
        'updated_time': 'datetime',
        'version': 'str',
        'is_enabled': 'bool',
        'acceptances': 'list[licensing.v4.agreements.Acceptance]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'content': 'content',
        'updated_time': 'updatedTime',
        'version': 'version',
        'is_enabled': 'isEnabled',
        'acceptances': 'acceptances',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, content=None, updated_time=None, version=None, is_enabled=None, acceptances=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__content = None
        self.__updated_time = None
        self.__version = None
        self.__is_enabled = None
        self.__acceptances = None
        self.discriminator = None
        self.__content = content
        if updated_time is not None:
            self.__updated_time = updated_time
        self.__version = version
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        if acceptances is not None:
            self.__acceptances = acceptances

    def _initialize_object_type(self):
        return 'licensing.v4.agreements.Eula'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def content(self):
        """
        Textual contents of the end user license agreement.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__content

    @content.setter
    def content(self, content):
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self.__content = content

    @property
    def updated_time(self):
        """
        EULA update time since epoch in ISO date time.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__updated_time

    @updated_time.setter
    def updated_time(self, updated_time):

        self.__updated_time = updated_time

    @property
    def version(self):
        """
        Version of the EULA.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self.__version = version

    @property
    def is_enabled(self):
        """
        Indicates whether this is the current EULA of the cluster or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def acceptances(self):
        """
        List of users accepting the EULA along with acceptance time for each.

        :type:
             list[ :class:`~ntnx_licensing_py_client.models.licensing.v4.agreements.Acceptance` ]
        """  # noqa: E501
        return self.__acceptances

    @acceptances.setter
    def acceptances(self, acceptances):

        self.__acceptances = acceptances

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Eula, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Eula):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


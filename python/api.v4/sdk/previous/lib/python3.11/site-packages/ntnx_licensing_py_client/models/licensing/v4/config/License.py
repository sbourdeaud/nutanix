# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.licensing.v4.config.BaseLicenseInfo import BaseLicenseInfo  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.Consumption import Consumption  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseCategory import LicenseCategory  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseType import LicenseType  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.Meter import Meter  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.Scope import Scope  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.SubCategory import SubCategory  # noqa: F401,E501

class License(BaseLicenseInfo):

    """Model containing license details like id, type, category, sub-category, scope and others.

    :param salesforce_license_id: (:attr:`salesforce_license_id`) Attribute for capturing salesforce generated license identifier e.g. LIC-XXX.
    :type salesforce_license_id: 
    
    
    :param meter: (:attr:`meter`) 
    :type meter: 
    
    
    :param scope: (:attr:`scope`) 
    :type scope: 
    
    
    :param quantity: (:attr:`quantity`) Total quantity of license consumed.
    :type quantity: 
    
    
    :param consumption_details: (:attr:`consumption_details`) Array containing information about the clusters where these licenses are used.
    :type consumption_details: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'salesforce_license_id': 'str',
        'meter': 'licensing.v4.config.Meter',
        'scope': 'licensing.v4.config.Scope',
        'quantity': 'float',
        'consumption_details': 'list[licensing.v4.config.Consumption]',
        'name': 'str',
        'type': 'licensing.v4.config.LicenseType',
        'category': 'licensing.v4.config.LicenseCategory',
        'sub_category': 'licensing.v4.config.SubCategory',
        'expiry_date': 'date',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'salesforce_license_id': 'salesforceLicenseId',
        'meter': 'meter',
        'scope': 'scope',
        'quantity': 'quantity',
        'consumption_details': 'consumptionDetails',
        'name': 'name',
        'type': 'type',
        'category': 'category',
        'sub_category': 'subCategory',
        'expiry_date': 'expiryDate',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, salesforce_license_id=None, meter=None, scope=None, quantity=None, consumption_details=None, name=None, type=None, category=None, sub_category=None, expiry_date=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        BaseLicenseInfo.__init__(self, name, type, category, sub_category, expiry_date, ext_id, links, tenant_id, *args, **kwargs)
        self.__salesforce_license_id = None
        self.__meter = None
        self.__scope = None
        self.__quantity = None
        self.__consumption_details = None
        self.discriminator = None
        if salesforce_license_id is not None:
            self.__salesforce_license_id = salesforce_license_id
        if meter is not None:
            self.__meter = meter
        if scope is not None:
            self.__scope = scope
        if quantity is not None:
            self.__quantity = quantity
        if consumption_details is not None:
            self.__consumption_details = consumption_details

    def _initialize_object_type(self):
        return 'licensing.v4.config.License'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def salesforce_license_id(self):
        """
        Attribute for capturing salesforce generated license identifier e.g. LIC-XXX.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__salesforce_license_id

    @salesforce_license_id.setter
    def salesforce_license_id(self, salesforce_license_id):
        if salesforce_license_id is not None and not re.search('^[A-Za-z0-9-]+$', salesforce_license_id):  # noqa: E501
            raise ValueError(r"Invalid value for `salesforce_license_id`, must be a follow pattern or equal to `/^[A-Za-z0-9-]+$/`")  # noqa: E501

        self.__salesforce_license_id = salesforce_license_id

    @property
    def meter(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.Meter`
        """  # noqa: E501
        return self.__meter

    @meter.setter
    def meter(self, meter):

        self.__meter = meter

    @property
    def scope(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.Scope`
        """  # noqa: E501
        return self.__scope

    @scope.setter
    def scope(self, scope):

        self.__scope = scope

    @property
    def quantity(self):
        """
        Total quantity of license consumed.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__quantity

    @quantity.setter
    def quantity(self, quantity):

        self.__quantity = quantity

    @property
    def consumption_details(self):
        """
        Array containing information about the clusters where these licenses are used.

        :type:
             list[ :class:`~ntnx_licensing_py_client.models.licensing.v4.config.Consumption` ]
        """  # noqa: E501
        return self.__consumption_details

    @consumption_details.setter
    def consumption_details(self, consumption_details):

        self.__consumption_details = consumption_details

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(License, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


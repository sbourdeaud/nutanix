# coding: utf-8


"""
IGNORE:
    Nutanix Licensing APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.licensing.v4.config.OperationType import OperationType  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.RecommendationScope import RecommendationScope  # noqa: F401,E501

class RecommendationDetail(object):

    """Model for capturing recommendation details for the cluster and its corresponding licenses.

    :param scope: (:attr:`scope`) 
    :type scope: 
    
    
    :param operation: (:attr:`operation`) 
    :type operation: 
    
    
    :param license_id: (:attr:`license_id`) Attribute for capturing the license ID.
    :type license_id: 
    
    
    :param license_expiry_date: (:attr:`license_expiry_date`) Attribute for capturing the license expiration date.
    :type license_expiry_date: 
    
    
    :param comment: (:attr:`comment`) Attribute for capturing comments regarding the recommendation like cluster over licensed and others.
    :type comment: 
     max=100 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'scope': 'licensing.v4.config.RecommendationScope',
        'operation': 'licensing.v4.config.OperationType',
        'license_id': 'str',
        'license_expiry_date': 'date',
        'comment': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'scope': 'scope',
        'operation': 'operation',
        'license_id': 'licenseId',
        'license_expiry_date': 'licenseExpiryDate',
        'comment': 'comment',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, scope=None, operation=None, license_id=None, license_expiry_date=None, comment=None, *args, **kwargs):  # noqa: E501
        self.__scope = None
        self.__operation = None
        self.__license_id = None
        self.__license_expiry_date = None
        self.__comment = None
        self.discriminator = None
        if scope is not None:
            self.__scope = scope
        if operation is not None:
            self.__operation = operation
        if license_id is not None:
            self.__license_id = license_id
        if license_expiry_date is not None:
            self.__license_expiry_date = license_expiry_date
        if comment is not None:
            self.__comment = comment
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'licensing.v4.config.RecommendationDetail'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def scope(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.RecommendationScope`
        """  # noqa: E501
        return self.__scope

    @scope.setter
    def scope(self, scope):

        self.__scope = scope

    @property
    def operation(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.OperationType`
        """  # noqa: E501
        return self.__operation

    @operation.setter
    def operation(self, operation):

        self.__operation = operation

    @property
    def license_id(self):
        """
        Attribute for capturing the license ID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__license_id

    @license_id.setter
    def license_id(self, license_id):
        if license_id is not None and not re.search('^[A-Za-z0-9-]+$', license_id):  # noqa: E501
            raise ValueError(r"Invalid value for `license_id`, must be a follow pattern or equal to `/^[A-Za-z0-9-]+$/`")  # noqa: E501

        self.__license_id = license_id

    @property
    def license_expiry_date(self):
        """
        Attribute for capturing the license expiration date.

        :type:
                :class:`~date`
        """  # noqa: E501
        return self.__license_expiry_date

    @license_expiry_date.setter
    def license_expiry_date(self, license_expiry_date):

        self.__license_expiry_date = license_expiry_date

    @property
    def comment(self):
        """
        Attribute for capturing comments regarding the recommendation like cluster over licensed and others.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__comment

    @comment.setter
    def comment(self, comment):
        if comment is not None and len(comment) > 100:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `100`")  # noqa: E501

        self.__comment = comment

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RecommendationDetail, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair import TimeIntValuePair  # noqa: F401,E501

class DiskStats(ExternalizableAbstractModel):

    """

    :param disk_usage_ppm: (:attr:`disk_usage_ppm`) Disk space used on a storage device, expressed in parts per million (ppm).
    :type disk_usage_ppm: 
    
    
    :param disk_capacity_bytes: (:attr:`disk_capacity_bytes`) Total storage capacity of a device in bytes.
    :type disk_capacity_bytes: 
    
    
    :param disk_num_iops: (:attr:`disk_num_iops`) Number of I/O operations that a Disk performs per second.
    :type disk_num_iops: 
    
    
    :param disk_peak_num_iops: (:attr:`disk_peak_num_iops`) Upper limit of I/O operations that a Disk performs per second.
    :type disk_peak_num_iops: 
    
    
    :param disk_base_num_iops: (:attr:`disk_base_num_iops`) Lower limit of I/O operations that a Disk can perform per second.
    :type disk_base_num_iops: 
    
    
    :param disk_io_bandwidthkbps: (:attr:`disk_io_bandwidthkbps`) I/O bandwidth in KB per second.
    :type disk_io_bandwidthkbps: 
    
    
    :param disk_peak_io_bandwidthkbps: (:attr:`disk_peak_io_bandwidthkbps`) Upper limit of data transfer that a Disk can handle per second.
    :type disk_peak_io_bandwidthkbps: 
    
    
    :param disk_base_io_bandwidthkbps: (:attr:`disk_base_io_bandwidthkbps`) Lower limit of data transfer that a Disk can handle per second.
    :type disk_base_io_bandwidthkbps: 
    
    
    :param disk_avg_io_latency_microsec: (:attr:`disk_avg_io_latency_microsec`) Average I/O latency.
    :type disk_avg_io_latency_microsec: 
    
    
    :param disk_peak_io_latency_microsec: (:attr:`disk_peak_io_latency_microsec`) Upper limit of the latency of I/O operations that the Disk can handle without exceeding its standard latency level.
    :type disk_peak_io_latency_microsec: 
    
    
    :param disk_base_io_latency_microsec: (:attr:`disk_base_io_latency_microsec`) Lower limit of the latency of I/O operations that the Disk can handle without exceeding its standard latency level.
    :type disk_base_io_latency_microsec: 
    
    
    :param disk_free_bytes: (:attr:`disk_free_bytes`) Free storage space available on the Disk, measured in bytes.
    :type disk_free_bytes: 
    
    
    :param disk_usage_bytes: (:attr:`disk_usage_bytes`) Amount of storage currently being used, measured in bytes.
    :type disk_usage_bytes: 
    
    
    :param disk_read_iops: (:attr:`disk_read_iops`) Number of read I/O per second.
    :type disk_read_iops: 
    
    
    :param disk_base_read_iops: (:attr:`disk_base_read_iops`) Lower buffer capacity for the number of read IOPS that a Disk can handle.
    :type disk_base_read_iops: 
    
    
    :param disk_peak_read_iops: (:attr:`disk_peak_read_iops`) Upper buffer capacity for the number of read IOPS that a Disk can handle.
    :type disk_peak_read_iops: 
    
    
    :param disk_write_iops: (:attr:`disk_write_iops`) Number of write I/O per second.
    :type disk_write_iops: 
    
    
    :param disk_peak_write_iops: (:attr:`disk_peak_write_iops`) Upper buffer capacity of a number of write I/O per second.
    :type disk_peak_write_iops: 
    
    
    :param disk_base_write_iops: (:attr:`disk_base_write_iops`) Lower buffer capacity of a number of write I/O per second.
    :type disk_base_write_iops: 
    
    
    :param disk_read_io_bandwidthkbps: (:attr:`disk_read_io_bandwidthkbps`) Number of Disk read I/O per second as reported by Stargate.
    :type disk_read_io_bandwidthkbps: 
    
    
    :param disk_peak_read_io_bandwidthkbps: (:attr:`disk_peak_read_io_bandwidthkbps`) Upper buffer capacity for the amount of I/O bandwidth that a Disk can handle read operations.
    :type disk_peak_read_io_bandwidthkbps: 
    
    
    :param disk_base_read_io_bandwidthkbps: (:attr:`disk_base_read_io_bandwidthkbps`) Lower buffer capacity for the amount of I/O bandwidth that a Disk can handle read operations.
    :type disk_base_read_io_bandwidthkbps: 
    
    
    :param disk_write_io_bandwidthkbps: (:attr:`disk_write_io_bandwidthkbps`) Number of Disk write I/O per second reported by Stargate.
    :type disk_write_io_bandwidthkbps: 
    
    
    :param disk_peak_write_io_bandwidthkbps: (:attr:`disk_peak_write_io_bandwidthkbps`) Upper buffer capacity for the amount of I/O bandwidth that a Disk can handle write operations.
    :type disk_peak_write_io_bandwidthkbps: 
    
    
    :param disk_base_write_io_bandwidthkbps: (:attr:`disk_base_write_io_bandwidthkbps`) Lower buffer capacity for the amount of I/O bandwidth that a Disk can handle write operations.
    :type disk_base_write_io_bandwidthkbps: 
    
    
    :param disk_read_io_avg_latency_microsec: (:attr:`disk_read_io_avg_latency_microsec`) Average read I/O latency, measured in microseconds (μs).
    :type disk_read_io_avg_latency_microsec: 
    
    
    :param disk_peak_read_io_avg_latency_microsec: (:attr:`disk_peak_read_io_avg_latency_microsec`) Upper buffer capacity average read I/O latency, measured in microseconds (μs).
    :type disk_peak_read_io_avg_latency_microsec: 
    
    
    :param disk_base_read_io_avg_latency_microsec: (:attr:`disk_base_read_io_avg_latency_microsec`) Lower buffer capacity average read I/O latency, measured in microseconds (μs).
    :type disk_base_read_io_avg_latency_microsec: 
    
    
    :param disk_write_io_avg_latency_microsec: (:attr:`disk_write_io_avg_latency_microsec`) Average write I/O latency, measured in microseconds (μs).
    :type disk_write_io_avg_latency_microsec: 
    
    
    :param disk_peak_write_io_avg_latency_microsec: (:attr:`disk_peak_write_io_avg_latency_microsec`) Upper buffer capacity average write I/O latency, measured in microseconds (μs).
    :type disk_peak_write_io_avg_latency_microsec: 
    
    
    :param disk_base_write_io_avg_latency_microsec: (:attr:`disk_base_write_io_avg_latency_microsec`) Lower buffer capacity average write I/O latency, measured in microseconds (μs).
    :type disk_base_write_io_avg_latency_microsec: 
    
    
    :param disk_read_io_ppm: (:attr:`disk_read_io_ppm`) Disk read I/O, expressed in parts per million.
    :type disk_read_io_ppm: 
    
    
    :param disk_write_io_ppm: (:attr:`disk_write_io_ppm`) Disk write I/O, expressed in parts per million.
    :type disk_write_io_ppm: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'disk_usage_ppm': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_capacity_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_num_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_num_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_num_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_avg_io_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_io_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_io_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_free_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_usage_bytes': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_read_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_read_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_read_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_write_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_write_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_write_iops': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_read_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_read_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_read_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_write_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_write_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_write_io_bandwidthkbps': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_read_io_avg_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_read_io_avg_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_read_io_avg_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_write_io_avg_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_peak_write_io_avg_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_base_write_io_avg_latency_microsec': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_read_io_ppm': 'list[common.v1.stats.TimeIntValuePair]',
        'disk_write_io_ppm': 'list[common.v1.stats.TimeIntValuePair]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'disk_usage_ppm': 'diskUsagePpm',
        'disk_capacity_bytes': 'diskCapacityBytes',
        'disk_num_iops': 'diskNumIops',
        'disk_peak_num_iops': 'diskPeakNumIops',
        'disk_base_num_iops': 'diskBaseNumIops',
        'disk_io_bandwidthkbps': 'diskIoBandwidthkbps',
        'disk_peak_io_bandwidthkbps': 'diskPeakIoBandwidthkbps',
        'disk_base_io_bandwidthkbps': 'diskBaseIoBandwidthkbps',
        'disk_avg_io_latency_microsec': 'diskAvgIoLatencyMicrosec',
        'disk_peak_io_latency_microsec': 'diskPeakIoLatencyMicrosec',
        'disk_base_io_latency_microsec': 'diskBaseIoLatencyMicrosec',
        'disk_free_bytes': 'diskFreeBytes',
        'disk_usage_bytes': 'diskUsageBytes',
        'disk_read_iops': 'diskReadIops',
        'disk_base_read_iops': 'diskBaseReadIops',
        'disk_peak_read_iops': 'diskPeakReadIops',
        'disk_write_iops': 'diskWriteIops',
        'disk_peak_write_iops': 'diskPeakWriteIops',
        'disk_base_write_iops': 'diskBaseWriteIops',
        'disk_read_io_bandwidthkbps': 'diskReadIoBandwidthkbps',
        'disk_peak_read_io_bandwidthkbps': 'diskPeakReadIoBandwidthkbps',
        'disk_base_read_io_bandwidthkbps': 'diskBaseReadIoBandwidthkbps',
        'disk_write_io_bandwidthkbps': 'diskWriteIoBandwidthkbps',
        'disk_peak_write_io_bandwidthkbps': 'diskPeakWriteIoBandwidthkbps',
        'disk_base_write_io_bandwidthkbps': 'diskBaseWriteIoBandwidthkbps',
        'disk_read_io_avg_latency_microsec': 'diskReadIoAvgLatencyMicrosec',
        'disk_peak_read_io_avg_latency_microsec': 'diskPeakReadIoAvgLatencyMicrosec',
        'disk_base_read_io_avg_latency_microsec': 'diskBaseReadIoAvgLatencyMicrosec',
        'disk_write_io_avg_latency_microsec': 'diskWriteIoAvgLatencyMicrosec',
        'disk_peak_write_io_avg_latency_microsec': 'diskPeakWriteIoAvgLatencyMicrosec',
        'disk_base_write_io_avg_latency_microsec': 'diskBaseWriteIoAvgLatencyMicrosec',
        'disk_read_io_ppm': 'diskReadIoPpm',
        'disk_write_io_ppm': 'diskWriteIoPpm',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, disk_usage_ppm=None, disk_capacity_bytes=None, disk_num_iops=None, disk_peak_num_iops=None, disk_base_num_iops=None, disk_io_bandwidthkbps=None, disk_peak_io_bandwidthkbps=None, disk_base_io_bandwidthkbps=None, disk_avg_io_latency_microsec=None, disk_peak_io_latency_microsec=None, disk_base_io_latency_microsec=None, disk_free_bytes=None, disk_usage_bytes=None, disk_read_iops=None, disk_base_read_iops=None, disk_peak_read_iops=None, disk_write_iops=None, disk_peak_write_iops=None, disk_base_write_iops=None, disk_read_io_bandwidthkbps=None, disk_peak_read_io_bandwidthkbps=None, disk_base_read_io_bandwidthkbps=None, disk_write_io_bandwidthkbps=None, disk_peak_write_io_bandwidthkbps=None, disk_base_write_io_bandwidthkbps=None, disk_read_io_avg_latency_microsec=None, disk_peak_read_io_avg_latency_microsec=None, disk_base_read_io_avg_latency_microsec=None, disk_write_io_avg_latency_microsec=None, disk_peak_write_io_avg_latency_microsec=None, disk_base_write_io_avg_latency_microsec=None, disk_read_io_ppm=None, disk_write_io_ppm=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__disk_usage_ppm = None
        self.__disk_capacity_bytes = None
        self.__disk_num_iops = None
        self.__disk_peak_num_iops = None
        self.__disk_base_num_iops = None
        self.__disk_io_bandwidthkbps = None
        self.__disk_peak_io_bandwidthkbps = None
        self.__disk_base_io_bandwidthkbps = None
        self.__disk_avg_io_latency_microsec = None
        self.__disk_peak_io_latency_microsec = None
        self.__disk_base_io_latency_microsec = None
        self.__disk_free_bytes = None
        self.__disk_usage_bytes = None
        self.__disk_read_iops = None
        self.__disk_base_read_iops = None
        self.__disk_peak_read_iops = None
        self.__disk_write_iops = None
        self.__disk_peak_write_iops = None
        self.__disk_base_write_iops = None
        self.__disk_read_io_bandwidthkbps = None
        self.__disk_peak_read_io_bandwidthkbps = None
        self.__disk_base_read_io_bandwidthkbps = None
        self.__disk_write_io_bandwidthkbps = None
        self.__disk_peak_write_io_bandwidthkbps = None
        self.__disk_base_write_io_bandwidthkbps = None
        self.__disk_read_io_avg_latency_microsec = None
        self.__disk_peak_read_io_avg_latency_microsec = None
        self.__disk_base_read_io_avg_latency_microsec = None
        self.__disk_write_io_avg_latency_microsec = None
        self.__disk_peak_write_io_avg_latency_microsec = None
        self.__disk_base_write_io_avg_latency_microsec = None
        self.__disk_read_io_ppm = None
        self.__disk_write_io_ppm = None
        self.discriminator = None
        if disk_usage_ppm is not None:
            self.__disk_usage_ppm = disk_usage_ppm
        if disk_capacity_bytes is not None:
            self.__disk_capacity_bytes = disk_capacity_bytes
        if disk_num_iops is not None:
            self.__disk_num_iops = disk_num_iops
        if disk_peak_num_iops is not None:
            self.__disk_peak_num_iops = disk_peak_num_iops
        if disk_base_num_iops is not None:
            self.__disk_base_num_iops = disk_base_num_iops
        if disk_io_bandwidthkbps is not None:
            self.__disk_io_bandwidthkbps = disk_io_bandwidthkbps
        if disk_peak_io_bandwidthkbps is not None:
            self.__disk_peak_io_bandwidthkbps = disk_peak_io_bandwidthkbps
        if disk_base_io_bandwidthkbps is not None:
            self.__disk_base_io_bandwidthkbps = disk_base_io_bandwidthkbps
        if disk_avg_io_latency_microsec is not None:
            self.__disk_avg_io_latency_microsec = disk_avg_io_latency_microsec
        if disk_peak_io_latency_microsec is not None:
            self.__disk_peak_io_latency_microsec = disk_peak_io_latency_microsec
        if disk_base_io_latency_microsec is not None:
            self.__disk_base_io_latency_microsec = disk_base_io_latency_microsec
        if disk_free_bytes is not None:
            self.__disk_free_bytes = disk_free_bytes
        if disk_usage_bytes is not None:
            self.__disk_usage_bytes = disk_usage_bytes
        if disk_read_iops is not None:
            self.__disk_read_iops = disk_read_iops
        if disk_base_read_iops is not None:
            self.__disk_base_read_iops = disk_base_read_iops
        if disk_peak_read_iops is not None:
            self.__disk_peak_read_iops = disk_peak_read_iops
        if disk_write_iops is not None:
            self.__disk_write_iops = disk_write_iops
        if disk_peak_write_iops is not None:
            self.__disk_peak_write_iops = disk_peak_write_iops
        if disk_base_write_iops is not None:
            self.__disk_base_write_iops = disk_base_write_iops
        if disk_read_io_bandwidthkbps is not None:
            self.__disk_read_io_bandwidthkbps = disk_read_io_bandwidthkbps
        if disk_peak_read_io_bandwidthkbps is not None:
            self.__disk_peak_read_io_bandwidthkbps = disk_peak_read_io_bandwidthkbps
        if disk_base_read_io_bandwidthkbps is not None:
            self.__disk_base_read_io_bandwidthkbps = disk_base_read_io_bandwidthkbps
        if disk_write_io_bandwidthkbps is not None:
            self.__disk_write_io_bandwidthkbps = disk_write_io_bandwidthkbps
        if disk_peak_write_io_bandwidthkbps is not None:
            self.__disk_peak_write_io_bandwidthkbps = disk_peak_write_io_bandwidthkbps
        if disk_base_write_io_bandwidthkbps is not None:
            self.__disk_base_write_io_bandwidthkbps = disk_base_write_io_bandwidthkbps
        if disk_read_io_avg_latency_microsec is not None:
            self.__disk_read_io_avg_latency_microsec = disk_read_io_avg_latency_microsec
        if disk_peak_read_io_avg_latency_microsec is not None:
            self.__disk_peak_read_io_avg_latency_microsec = disk_peak_read_io_avg_latency_microsec
        if disk_base_read_io_avg_latency_microsec is not None:
            self.__disk_base_read_io_avg_latency_microsec = disk_base_read_io_avg_latency_microsec
        if disk_write_io_avg_latency_microsec is not None:
            self.__disk_write_io_avg_latency_microsec = disk_write_io_avg_latency_microsec
        if disk_peak_write_io_avg_latency_microsec is not None:
            self.__disk_peak_write_io_avg_latency_microsec = disk_peak_write_io_avg_latency_microsec
        if disk_base_write_io_avg_latency_microsec is not None:
            self.__disk_base_write_io_avg_latency_microsec = disk_base_write_io_avg_latency_microsec
        if disk_read_io_ppm is not None:
            self.__disk_read_io_ppm = disk_read_io_ppm
        if disk_write_io_ppm is not None:
            self.__disk_write_io_ppm = disk_write_io_ppm

    def _initialize_object_type(self):
        return 'clustermgmt.v4.stats.DiskStats'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def disk_usage_ppm(self):
        """
        Disk space used on a storage device, expressed in parts per million (ppm).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_usage_ppm

    @disk_usage_ppm.setter
    def disk_usage_ppm(self, disk_usage_ppm):

        self.__disk_usage_ppm = disk_usage_ppm

    @property
    def disk_capacity_bytes(self):
        """
        Total storage capacity of a device in bytes.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_capacity_bytes

    @disk_capacity_bytes.setter
    def disk_capacity_bytes(self, disk_capacity_bytes):

        self.__disk_capacity_bytes = disk_capacity_bytes

    @property
    def disk_num_iops(self):
        """
        Number of I/O operations that a Disk performs per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_num_iops

    @disk_num_iops.setter
    def disk_num_iops(self, disk_num_iops):

        self.__disk_num_iops = disk_num_iops

    @property
    def disk_peak_num_iops(self):
        """
        Upper limit of I/O operations that a Disk performs per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_num_iops

    @disk_peak_num_iops.setter
    def disk_peak_num_iops(self, disk_peak_num_iops):

        self.__disk_peak_num_iops = disk_peak_num_iops

    @property
    def disk_base_num_iops(self):
        """
        Lower limit of I/O operations that a Disk can perform per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_num_iops

    @disk_base_num_iops.setter
    def disk_base_num_iops(self, disk_base_num_iops):

        self.__disk_base_num_iops = disk_base_num_iops

    @property
    def disk_io_bandwidthkbps(self):
        """
        I/O bandwidth in KB per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_io_bandwidthkbps

    @disk_io_bandwidthkbps.setter
    def disk_io_bandwidthkbps(self, disk_io_bandwidthkbps):

        self.__disk_io_bandwidthkbps = disk_io_bandwidthkbps

    @property
    def disk_peak_io_bandwidthkbps(self):
        """
        Upper limit of data transfer that a Disk can handle per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_io_bandwidthkbps

    @disk_peak_io_bandwidthkbps.setter
    def disk_peak_io_bandwidthkbps(self, disk_peak_io_bandwidthkbps):

        self.__disk_peak_io_bandwidthkbps = disk_peak_io_bandwidthkbps

    @property
    def disk_base_io_bandwidthkbps(self):
        """
        Lower limit of data transfer that a Disk can handle per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_io_bandwidthkbps

    @disk_base_io_bandwidthkbps.setter
    def disk_base_io_bandwidthkbps(self, disk_base_io_bandwidthkbps):

        self.__disk_base_io_bandwidthkbps = disk_base_io_bandwidthkbps

    @property
    def disk_avg_io_latency_microsec(self):
        """
        Average I/O latency.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_avg_io_latency_microsec

    @disk_avg_io_latency_microsec.setter
    def disk_avg_io_latency_microsec(self, disk_avg_io_latency_microsec):

        self.__disk_avg_io_latency_microsec = disk_avg_io_latency_microsec

    @property
    def disk_peak_io_latency_microsec(self):
        """
        Upper limit of the latency of I/O operations that the Disk can handle without exceeding its standard latency level.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_io_latency_microsec

    @disk_peak_io_latency_microsec.setter
    def disk_peak_io_latency_microsec(self, disk_peak_io_latency_microsec):

        self.__disk_peak_io_latency_microsec = disk_peak_io_latency_microsec

    @property
    def disk_base_io_latency_microsec(self):
        """
        Lower limit of the latency of I/O operations that the Disk can handle without exceeding its standard latency level.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_io_latency_microsec

    @disk_base_io_latency_microsec.setter
    def disk_base_io_latency_microsec(self, disk_base_io_latency_microsec):

        self.__disk_base_io_latency_microsec = disk_base_io_latency_microsec

    @property
    def disk_free_bytes(self):
        """
        Free storage space available on the Disk, measured in bytes.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_free_bytes

    @disk_free_bytes.setter
    def disk_free_bytes(self, disk_free_bytes):

        self.__disk_free_bytes = disk_free_bytes

    @property
    def disk_usage_bytes(self):
        """
        Amount of storage currently being used, measured in bytes.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_usage_bytes

    @disk_usage_bytes.setter
    def disk_usage_bytes(self, disk_usage_bytes):

        self.__disk_usage_bytes = disk_usage_bytes

    @property
    def disk_read_iops(self):
        """
        Number of read I/O per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_read_iops

    @disk_read_iops.setter
    def disk_read_iops(self, disk_read_iops):

        self.__disk_read_iops = disk_read_iops

    @property
    def disk_base_read_iops(self):
        """
        Lower buffer capacity for the number of read IOPS that a Disk can handle.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_read_iops

    @disk_base_read_iops.setter
    def disk_base_read_iops(self, disk_base_read_iops):

        self.__disk_base_read_iops = disk_base_read_iops

    @property
    def disk_peak_read_iops(self):
        """
        Upper buffer capacity for the number of read IOPS that a Disk can handle.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_read_iops

    @disk_peak_read_iops.setter
    def disk_peak_read_iops(self, disk_peak_read_iops):

        self.__disk_peak_read_iops = disk_peak_read_iops

    @property
    def disk_write_iops(self):
        """
        Number of write I/O per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_write_iops

    @disk_write_iops.setter
    def disk_write_iops(self, disk_write_iops):

        self.__disk_write_iops = disk_write_iops

    @property
    def disk_peak_write_iops(self):
        """
        Upper buffer capacity of a number of write I/O per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_write_iops

    @disk_peak_write_iops.setter
    def disk_peak_write_iops(self, disk_peak_write_iops):

        self.__disk_peak_write_iops = disk_peak_write_iops

    @property
    def disk_base_write_iops(self):
        """
        Lower buffer capacity of a number of write I/O per second.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_write_iops

    @disk_base_write_iops.setter
    def disk_base_write_iops(self, disk_base_write_iops):

        self.__disk_base_write_iops = disk_base_write_iops

    @property
    def disk_read_io_bandwidthkbps(self):
        """
        Number of Disk read I/O per second as reported by Stargate.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_read_io_bandwidthkbps

    @disk_read_io_bandwidthkbps.setter
    def disk_read_io_bandwidthkbps(self, disk_read_io_bandwidthkbps):

        self.__disk_read_io_bandwidthkbps = disk_read_io_bandwidthkbps

    @property
    def disk_peak_read_io_bandwidthkbps(self):
        """
        Upper buffer capacity for the amount of I/O bandwidth that a Disk can handle read operations.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_read_io_bandwidthkbps

    @disk_peak_read_io_bandwidthkbps.setter
    def disk_peak_read_io_bandwidthkbps(self, disk_peak_read_io_bandwidthkbps):

        self.__disk_peak_read_io_bandwidthkbps = disk_peak_read_io_bandwidthkbps

    @property
    def disk_base_read_io_bandwidthkbps(self):
        """
        Lower buffer capacity for the amount of I/O bandwidth that a Disk can handle read operations.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_read_io_bandwidthkbps

    @disk_base_read_io_bandwidthkbps.setter
    def disk_base_read_io_bandwidthkbps(self, disk_base_read_io_bandwidthkbps):

        self.__disk_base_read_io_bandwidthkbps = disk_base_read_io_bandwidthkbps

    @property
    def disk_write_io_bandwidthkbps(self):
        """
        Number of Disk write I/O per second reported by Stargate.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_write_io_bandwidthkbps

    @disk_write_io_bandwidthkbps.setter
    def disk_write_io_bandwidthkbps(self, disk_write_io_bandwidthkbps):

        self.__disk_write_io_bandwidthkbps = disk_write_io_bandwidthkbps

    @property
    def disk_peak_write_io_bandwidthkbps(self):
        """
        Upper buffer capacity for the amount of I/O bandwidth that a Disk can handle write operations.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_write_io_bandwidthkbps

    @disk_peak_write_io_bandwidthkbps.setter
    def disk_peak_write_io_bandwidthkbps(self, disk_peak_write_io_bandwidthkbps):

        self.__disk_peak_write_io_bandwidthkbps = disk_peak_write_io_bandwidthkbps

    @property
    def disk_base_write_io_bandwidthkbps(self):
        """
        Lower buffer capacity for the amount of I/O bandwidth that a Disk can handle write operations.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_write_io_bandwidthkbps

    @disk_base_write_io_bandwidthkbps.setter
    def disk_base_write_io_bandwidthkbps(self, disk_base_write_io_bandwidthkbps):

        self.__disk_base_write_io_bandwidthkbps = disk_base_write_io_bandwidthkbps

    @property
    def disk_read_io_avg_latency_microsec(self):
        """
        Average read I/O latency, measured in microseconds (μs).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_read_io_avg_latency_microsec

    @disk_read_io_avg_latency_microsec.setter
    def disk_read_io_avg_latency_microsec(self, disk_read_io_avg_latency_microsec):

        self.__disk_read_io_avg_latency_microsec = disk_read_io_avg_latency_microsec

    @property
    def disk_peak_read_io_avg_latency_microsec(self):
        """
        Upper buffer capacity average read I/O latency, measured in microseconds (μs).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_read_io_avg_latency_microsec

    @disk_peak_read_io_avg_latency_microsec.setter
    def disk_peak_read_io_avg_latency_microsec(self, disk_peak_read_io_avg_latency_microsec):

        self.__disk_peak_read_io_avg_latency_microsec = disk_peak_read_io_avg_latency_microsec

    @property
    def disk_base_read_io_avg_latency_microsec(self):
        """
        Lower buffer capacity average read I/O latency, measured in microseconds (μs).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_read_io_avg_latency_microsec

    @disk_base_read_io_avg_latency_microsec.setter
    def disk_base_read_io_avg_latency_microsec(self, disk_base_read_io_avg_latency_microsec):

        self.__disk_base_read_io_avg_latency_microsec = disk_base_read_io_avg_latency_microsec

    @property
    def disk_write_io_avg_latency_microsec(self):
        """
        Average write I/O latency, measured in microseconds (μs).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_write_io_avg_latency_microsec

    @disk_write_io_avg_latency_microsec.setter
    def disk_write_io_avg_latency_microsec(self, disk_write_io_avg_latency_microsec):

        self.__disk_write_io_avg_latency_microsec = disk_write_io_avg_latency_microsec

    @property
    def disk_peak_write_io_avg_latency_microsec(self):
        """
        Upper buffer capacity average write I/O latency, measured in microseconds (μs).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_peak_write_io_avg_latency_microsec

    @disk_peak_write_io_avg_latency_microsec.setter
    def disk_peak_write_io_avg_latency_microsec(self, disk_peak_write_io_avg_latency_microsec):

        self.__disk_peak_write_io_avg_latency_microsec = disk_peak_write_io_avg_latency_microsec

    @property
    def disk_base_write_io_avg_latency_microsec(self):
        """
        Lower buffer capacity average write I/O latency, measured in microseconds (μs).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_base_write_io_avg_latency_microsec

    @disk_base_write_io_avg_latency_microsec.setter
    def disk_base_write_io_avg_latency_microsec(self, disk_base_write_io_avg_latency_microsec):

        self.__disk_base_write_io_avg_latency_microsec = disk_base_write_io_avg_latency_microsec

    @property
    def disk_read_io_ppm(self):
        """
        Disk read I/O, expressed in parts per million.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_read_io_ppm

    @disk_read_io_ppm.setter
    def disk_read_io_ppm(self, disk_read_io_ppm):

        self.__disk_read_io_ppm = disk_read_io_ppm

    @property
    def disk_write_io_ppm(self):
        """
        Disk write I/O, expressed in parts per million.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.stats.TimeIntValuePair` ]
        """  # noqa: E501
        return self.__disk_write_io_ppm

    @disk_write_io_ppm.setter
    def disk_write_io_ppm(self, disk_write_io_ppm):

        self.__disk_write_io_ppm = disk_write_io_ppm

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DiskStats, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


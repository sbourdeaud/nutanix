# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ControllerVmReference import ControllerVmReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DiskReference import DiskReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HostTypeEnum import HostTypeEnum  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervisorReference import HypervisorReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.IpmiReference import IpmiReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.KeyManagementDeviceToCertStatusInfo import KeyManagementDeviceToCertStatusInfo  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeStatus import NodeStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class Host(ExternalizableAbstractModel):

    """Host entity with its attributes.

    :param host_name: (:attr:`host_name`) Name of the host.
    :type host_name: 
     max=63 chars
    
    :param host_type: (:attr:`host_type`) 
    :type host_type: 
    
    
    :param hypervisor: (:attr:`hypervisor`) 
    :type hypervisor: 
    
    
    :param cluster: (:attr:`cluster`) 
    :type cluster: 
    
    
    :param controller_vm: (:attr:`controller_vm`) 
    :type controller_vm: 
    
    
    :param disk: (:attr:`disk`) Disks attached to host.
    :type disk: 
    
    
    :param is_degraded: (:attr:`is_degraded`) Node degraded status.
    :type is_degraded: 
    
    
    :param is_secure_booted: (:attr:`is_secure_booted`) Secure boot status.
    :type is_secure_booted: 
    
    
    :param is_hardware_virtualized: (:attr:`is_hardware_virtualized`) Indicates whether the hardware is virtualized or not.
    :type is_hardware_virtualized: 
    
    
    :param has_csr: (:attr:`has_csr`) Certificate signing request status.
    :type has_csr: 
    
    
    :param key_management_device_to_cert_status: (:attr:`key_management_device_to_cert_status`) Mapping of key management device to certificate status list.
    :type key_management_device_to_cert_status: 
    
    
    :param number_of_cpu_cores: (:attr:`number_of_cpu_cores`) Number of CPU cores.
    :type number_of_cpu_cores: 
    
    
    :param number_of_cpu_threads: (:attr:`number_of_cpu_threads`) Number of CPU threads.
    :type number_of_cpu_threads: 
    
    
    :param number_of_cpu_sockets: (:attr:`number_of_cpu_sockets`) Number of CPU sockets.
    :type number_of_cpu_sockets: 
    
    
    :param cpu_capacity_hz: (:attr:`cpu_capacity_hz`) CPU capacity in Hz.
    :type cpu_capacity_hz: 
    
    
    :param cpu_frequency_hz: (:attr:`cpu_frequency_hz`) CPU frequency in Hz.
    :type cpu_frequency_hz: 
    
    
    :param cpu_model: (:attr:`cpu_model`) CPU model name.
    :type cpu_model: 
    
    
    :param gpu_driver_version: (:attr:`gpu_driver_version`) GPU driver version.
    :type gpu_driver_version: 
    
    
    :param gpu_list: (:attr:`gpu_list`) GPU attached list.
    :type gpu_list: 
    
    
    :param default_vhd_location: (:attr:`default_vhd_location`) Default VHD location.
    :type default_vhd_location: 
    
    
    :param default_vhd_container_uuid: (:attr:`default_vhd_container_uuid`) Default VHD container UUID.
    :type default_vhd_container_uuid: 
    
    
    :param default_vm_location: (:attr:`default_vm_location`) Default VM location.
    :type default_vm_location: 
    
    
    :param default_vm_container_uuid: (:attr:`default_vm_container_uuid`) Default VM container UUID.
    :type default_vm_container_uuid: 
    
    
    :param is_reboot_pending: (:attr:`is_reboot_pending`) Reboot pending status.
    :type is_reboot_pending: 
    
    
    :param failover_cluster_fqdn: (:attr:`failover_cluster_fqdn`) Failover cluster FQDN.
    :type failover_cluster_fqdn: 
    
    
    :param failover_cluster_node_status: (:attr:`failover_cluster_node_status`) Failover cluster node status.
    :type failover_cluster_node_status: 
    
    
    :param boot_time_usecs: (:attr:`boot_time_usecs`) Boot time in secs.
    :type boot_time_usecs: 
    
    
    :param memory_size_bytes: (:attr:`memory_size_bytes`) Memory size in bytes.
    :type memory_size_bytes: 
    
    
    :param block_serial: (:attr:`block_serial`) Rackable unit serial name.
    :type block_serial: 
    
    
    :param block_model: (:attr:`block_model`) Rackable unit model name.
    :type block_model: 
    
    
    :param maintenance_state: (:attr:`maintenance_state`) Host Maintenance State.
    :type maintenance_state: 
    
    
    :param node_status: (:attr:`node_status`) 
    :type node_status: 
    
    
    :param ipmi: (:attr:`ipmi`) 
    :type ipmi: 
    
    
    :param rackable_unit_uuid: (:attr:`rackable_unit_uuid`) Rackable unit UUID.
    :type rackable_unit_uuid: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'host_name': 'str',
        'host_type': 'clustermgmt.v4.config.HostTypeEnum',
        'hypervisor': 'clustermgmt.v4.config.HypervisorReference',
        'cluster': 'clustermgmt.v4.config.ClusterReference',
        'controller_vm': 'clustermgmt.v4.config.ControllerVmReference',
        'disk': 'list[clustermgmt.v4.config.DiskReference]',
        'is_degraded': 'bool',
        'is_secure_booted': 'bool',
        'is_hardware_virtualized': 'bool',
        'has_csr': 'bool',
        'key_management_device_to_cert_status': 'list[clustermgmt.v4.config.KeyManagementDeviceToCertStatusInfo]',
        'number_of_cpu_cores': 'int',
        'number_of_cpu_threads': 'int',
        'number_of_cpu_sockets': 'int',
        'cpu_capacity_hz': 'int',
        'cpu_frequency_hz': 'int',
        'cpu_model': 'str',
        'gpu_driver_version': 'str',
        'gpu_list': 'list[str]',
        'default_vhd_location': 'str',
        'default_vhd_container_uuid': 'str',
        'default_vm_location': 'str',
        'default_vm_container_uuid': 'str',
        'is_reboot_pending': 'bool',
        'failover_cluster_fqdn': 'str',
        'failover_cluster_node_status': 'str',
        'boot_time_usecs': 'int',
        'memory_size_bytes': 'int',
        'block_serial': 'str',
        'block_model': 'str',
        'maintenance_state': 'str',
        'node_status': 'clustermgmt.v4.config.NodeStatus',
        'ipmi': 'clustermgmt.v4.config.IpmiReference',
        'rackable_unit_uuid': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'host_name': 'hostName',
        'host_type': 'hostType',
        'hypervisor': 'hypervisor',
        'cluster': 'cluster',
        'controller_vm': 'controllerVm',
        'disk': 'disk',
        'is_degraded': 'isDegraded',
        'is_secure_booted': 'isSecureBooted',
        'is_hardware_virtualized': 'isHardwareVirtualized',
        'has_csr': 'hasCsr',
        'key_management_device_to_cert_status': 'keyManagementDeviceToCertStatus',
        'number_of_cpu_cores': 'numberOfCpuCores',
        'number_of_cpu_threads': 'numberOfCpuThreads',
        'number_of_cpu_sockets': 'numberOfCpuSockets',
        'cpu_capacity_hz': 'cpuCapacityHz',
        'cpu_frequency_hz': 'cpuFrequencyHz',
        'cpu_model': 'cpuModel',
        'gpu_driver_version': 'gpuDriverVersion',
        'gpu_list': 'gpuList',
        'default_vhd_location': 'defaultVhdLocation',
        'default_vhd_container_uuid': 'defaultVhdContainerUuid',
        'default_vm_location': 'defaultVmLocation',
        'default_vm_container_uuid': 'defaultVmContainerUuid',
        'is_reboot_pending': 'isRebootPending',
        'failover_cluster_fqdn': 'failoverClusterFqdn',
        'failover_cluster_node_status': 'failoverClusterNodeStatus',
        'boot_time_usecs': 'bootTimeUsecs',
        'memory_size_bytes': 'memorySizeBytes',
        'block_serial': 'blockSerial',
        'block_model': 'blockModel',
        'maintenance_state': 'maintenanceState',
        'node_status': 'nodeStatus',
        'ipmi': 'ipmi',
        'rackable_unit_uuid': 'rackableUnitUuid',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, host_name=None, host_type=None, hypervisor=None, cluster=None, controller_vm=None, disk=None, is_degraded=None, is_secure_booted=None, is_hardware_virtualized=None, has_csr=None, key_management_device_to_cert_status=None, number_of_cpu_cores=None, number_of_cpu_threads=None, number_of_cpu_sockets=None, cpu_capacity_hz=None, cpu_frequency_hz=None, cpu_model=None, gpu_driver_version=None, gpu_list=None, default_vhd_location=None, default_vhd_container_uuid=None, default_vm_location=None, default_vm_container_uuid=None, is_reboot_pending=None, failover_cluster_fqdn=None, failover_cluster_node_status=None, boot_time_usecs=None, memory_size_bytes=None, block_serial=None, block_model=None, maintenance_state=None, node_status=None, ipmi=None, rackable_unit_uuid=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__host_name = None
        self.__host_type = None
        self.__hypervisor = None
        self.__cluster = None
        self.__controller_vm = None
        self.__disk = None
        self.__is_degraded = None
        self.__is_secure_booted = None
        self.__is_hardware_virtualized = None
        self.__has_csr = None
        self.__key_management_device_to_cert_status = None
        self.__number_of_cpu_cores = None
        self.__number_of_cpu_threads = None
        self.__number_of_cpu_sockets = None
        self.__cpu_capacity_hz = None
        self.__cpu_frequency_hz = None
        self.__cpu_model = None
        self.__gpu_driver_version = None
        self.__gpu_list = None
        self.__default_vhd_location = None
        self.__default_vhd_container_uuid = None
        self.__default_vm_location = None
        self.__default_vm_container_uuid = None
        self.__is_reboot_pending = None
        self.__failover_cluster_fqdn = None
        self.__failover_cluster_node_status = None
        self.__boot_time_usecs = None
        self.__memory_size_bytes = None
        self.__block_serial = None
        self.__block_model = None
        self.__maintenance_state = None
        self.__node_status = None
        self.__ipmi = None
        self.__rackable_unit_uuid = None
        self.discriminator = None
        if host_name is not None:
            self.__host_name = host_name
        if host_type is not None:
            self.__host_type = host_type
        if hypervisor is not None:
            self.__hypervisor = hypervisor
        if cluster is not None:
            self.__cluster = cluster
        if controller_vm is not None:
            self.__controller_vm = controller_vm
        if disk is not None:
            self.__disk = disk
        if is_degraded is not None:
            self.__is_degraded = is_degraded
        if is_secure_booted is not None:
            self.__is_secure_booted = is_secure_booted
        if is_hardware_virtualized is not None:
            self.__is_hardware_virtualized = is_hardware_virtualized
        if has_csr is not None:
            self.__has_csr = has_csr
        if key_management_device_to_cert_status is not None:
            self.__key_management_device_to_cert_status = key_management_device_to_cert_status
        if number_of_cpu_cores is not None:
            self.__number_of_cpu_cores = number_of_cpu_cores
        if number_of_cpu_threads is not None:
            self.__number_of_cpu_threads = number_of_cpu_threads
        if number_of_cpu_sockets is not None:
            self.__number_of_cpu_sockets = number_of_cpu_sockets
        if cpu_capacity_hz is not None:
            self.__cpu_capacity_hz = cpu_capacity_hz
        if cpu_frequency_hz is not None:
            self.__cpu_frequency_hz = cpu_frequency_hz
        if cpu_model is not None:
            self.__cpu_model = cpu_model
        if gpu_driver_version is not None:
            self.__gpu_driver_version = gpu_driver_version
        if gpu_list is not None:
            self.__gpu_list = gpu_list
        if default_vhd_location is not None:
            self.__default_vhd_location = default_vhd_location
        if default_vhd_container_uuid is not None:
            self.__default_vhd_container_uuid = default_vhd_container_uuid
        if default_vm_location is not None:
            self.__default_vm_location = default_vm_location
        if default_vm_container_uuid is not None:
            self.__default_vm_container_uuid = default_vm_container_uuid
        if is_reboot_pending is not None:
            self.__is_reboot_pending = is_reboot_pending
        if failover_cluster_fqdn is not None:
            self.__failover_cluster_fqdn = failover_cluster_fqdn
        if failover_cluster_node_status is not None:
            self.__failover_cluster_node_status = failover_cluster_node_status
        if boot_time_usecs is not None:
            self.__boot_time_usecs = boot_time_usecs
        if memory_size_bytes is not None:
            self.__memory_size_bytes = memory_size_bytes
        if block_serial is not None:
            self.__block_serial = block_serial
        if block_model is not None:
            self.__block_model = block_model
        if maintenance_state is not None:
            self.__maintenance_state = maintenance_state
        if node_status is not None:
            self.__node_status = node_status
        if ipmi is not None:
            self.__ipmi = ipmi
        if rackable_unit_uuid is not None:
            self.__rackable_unit_uuid = rackable_unit_uuid

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.Host'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def host_name(self):
        """
        Name of the host.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__host_name

    @host_name.setter
    def host_name(self, host_name):
        if host_name is not None and len(host_name) > 63:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `63`")  # noqa: E501

        self.__host_name = host_name

    @property
    def host_type(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HostTypeEnum`
        """  # noqa: E501
        return self.__host_type

    @host_type.setter
    def host_type(self, host_type):

        self.__host_type = host_type

    @property
    def hypervisor(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervisorReference`
        """  # noqa: E501
        return self.__hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):

        self.__hypervisor = hypervisor

    @property
    def cluster(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterReference`
        """  # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def controller_vm(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ControllerVmReference`
        """  # noqa: E501
        return self.__controller_vm

    @controller_vm.setter
    def controller_vm(self, controller_vm):

        self.__controller_vm = controller_vm

    @property
    def disk(self):
        """
        Disks attached to host.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DiskReference` ]
        """  # noqa: E501
        return self.__disk

    @disk.setter
    def disk(self, disk):

        self.__disk = disk

    @property
    def is_degraded(self):
        """
        Node degraded status.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_degraded

    @is_degraded.setter
    def is_degraded(self, is_degraded):

        self.__is_degraded = is_degraded

    @property
    def is_secure_booted(self):
        """
        Secure boot status.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_secure_booted

    @is_secure_booted.setter
    def is_secure_booted(self, is_secure_booted):

        self.__is_secure_booted = is_secure_booted

    @property
    def is_hardware_virtualized(self):
        """
        Indicates whether the hardware is virtualized or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_hardware_virtualized

    @is_hardware_virtualized.setter
    def is_hardware_virtualized(self, is_hardware_virtualized):

        self.__is_hardware_virtualized = is_hardware_virtualized

    @property
    def has_csr(self):
        """
        Certificate signing request status.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_csr

    @has_csr.setter
    def has_csr(self, has_csr):

        self.__has_csr = has_csr

    @property
    def key_management_device_to_cert_status(self):
        """
        Mapping of key management device to certificate status list.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.KeyManagementDeviceToCertStatusInfo` ]
        """  # noqa: E501
        return self.__key_management_device_to_cert_status

    @key_management_device_to_cert_status.setter
    def key_management_device_to_cert_status(self, key_management_device_to_cert_status):

        self.__key_management_device_to_cert_status = key_management_device_to_cert_status

    @property
    def number_of_cpu_cores(self):
        """
        Number of CPU cores.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_cpu_cores

    @number_of_cpu_cores.setter
    def number_of_cpu_cores(self, number_of_cpu_cores):

        self.__number_of_cpu_cores = number_of_cpu_cores

    @property
    def number_of_cpu_threads(self):
        """
        Number of CPU threads.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_cpu_threads

    @number_of_cpu_threads.setter
    def number_of_cpu_threads(self, number_of_cpu_threads):

        self.__number_of_cpu_threads = number_of_cpu_threads

    @property
    def number_of_cpu_sockets(self):
        """
        Number of CPU sockets.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_cpu_sockets

    @number_of_cpu_sockets.setter
    def number_of_cpu_sockets(self, number_of_cpu_sockets):

        self.__number_of_cpu_sockets = number_of_cpu_sockets

    @property
    def cpu_capacity_hz(self):
        """
        CPU capacity in Hz.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__cpu_capacity_hz

    @cpu_capacity_hz.setter
    def cpu_capacity_hz(self, cpu_capacity_hz):

        self.__cpu_capacity_hz = cpu_capacity_hz

    @property
    def cpu_frequency_hz(self):
        """
        CPU frequency in Hz.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__cpu_frequency_hz

    @cpu_frequency_hz.setter
    def cpu_frequency_hz(self, cpu_frequency_hz):

        self.__cpu_frequency_hz = cpu_frequency_hz

    @property
    def cpu_model(self):
        """
        CPU model name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):

        self.__cpu_model = cpu_model

    @property
    def gpu_driver_version(self):
        """
        GPU driver version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__gpu_driver_version

    @gpu_driver_version.setter
    def gpu_driver_version(self, gpu_driver_version):

        self.__gpu_driver_version = gpu_driver_version

    @property
    def gpu_list(self):
        """
        GPU attached list.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__gpu_list

    @gpu_list.setter
    def gpu_list(self, gpu_list):

        self.__gpu_list = gpu_list

    @property
    def default_vhd_location(self):
        """
        Default VHD location.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__default_vhd_location

    @default_vhd_location.setter
    def default_vhd_location(self, default_vhd_location):

        self.__default_vhd_location = default_vhd_location

    @property
    def default_vhd_container_uuid(self):
        """
        Default VHD container UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__default_vhd_container_uuid

    @default_vhd_container_uuid.setter
    def default_vhd_container_uuid(self, default_vhd_container_uuid):
        if default_vhd_container_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', default_vhd_container_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `default_vhd_container_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__default_vhd_container_uuid = default_vhd_container_uuid

    @property
    def default_vm_location(self):
        """
        Default VM location.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__default_vm_location

    @default_vm_location.setter
    def default_vm_location(self, default_vm_location):

        self.__default_vm_location = default_vm_location

    @property
    def default_vm_container_uuid(self):
        """
        Default VM container UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__default_vm_container_uuid

    @default_vm_container_uuid.setter
    def default_vm_container_uuid(self, default_vm_container_uuid):
        if default_vm_container_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', default_vm_container_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `default_vm_container_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__default_vm_container_uuid = default_vm_container_uuid

    @property
    def is_reboot_pending(self):
        """
        Reboot pending status.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_reboot_pending

    @is_reboot_pending.setter
    def is_reboot_pending(self, is_reboot_pending):

        self.__is_reboot_pending = is_reboot_pending

    @property
    def failover_cluster_fqdn(self):
        """
        Failover cluster FQDN.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__failover_cluster_fqdn

    @failover_cluster_fqdn.setter
    def failover_cluster_fqdn(self, failover_cluster_fqdn):
        if failover_cluster_fqdn is not None and not re.search('^([a-z0-9]+(-[a-z0-9]+)*\\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$', failover_cluster_fqdn):  # noqa: E501
            raise ValueError(r"Invalid value for `failover_cluster_fqdn`, must be a follow pattern or equal to `/^([a-z0-9]+(-[a-z0-9]+)*\\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$/`")  # noqa: E501

        self.__failover_cluster_fqdn = failover_cluster_fqdn

    @property
    def failover_cluster_node_status(self):
        """
        Failover cluster node status.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__failover_cluster_node_status

    @failover_cluster_node_status.setter
    def failover_cluster_node_status(self, failover_cluster_node_status):

        self.__failover_cluster_node_status = failover_cluster_node_status

    @property
    def boot_time_usecs(self):
        """
        Boot time in secs.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__boot_time_usecs

    @boot_time_usecs.setter
    def boot_time_usecs(self, boot_time_usecs):

        self.__boot_time_usecs = boot_time_usecs

    @property
    def memory_size_bytes(self):
        """
        Memory size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_size_bytes

    @memory_size_bytes.setter
    def memory_size_bytes(self, memory_size_bytes):

        self.__memory_size_bytes = memory_size_bytes

    @property
    def block_serial(self):
        """
        Rackable unit serial name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__block_serial

    @block_serial.setter
    def block_serial(self, block_serial):

        self.__block_serial = block_serial

    @property
    def block_model(self):
        """
        Rackable unit model name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__block_model

    @block_model.setter
    def block_model(self, block_model):

        self.__block_model = block_model

    @property
    def maintenance_state(self):
        """
        Host Maintenance State.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__maintenance_state

    @maintenance_state.setter
    def maintenance_state(self, maintenance_state):

        self.__maintenance_state = maintenance_state

    @property
    def node_status(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeStatus`
        """  # noqa: E501
        return self.__node_status

    @node_status.setter
    def node_status(self, node_status):

        self.__node_status = node_status

    @property
    def ipmi(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.IpmiReference`
        """  # noqa: E501
        return self.__ipmi

    @ipmi.setter
    def ipmi(self, ipmi):

        self.__ipmi = ipmi

    @property
    def rackable_unit_uuid(self):
        """
        Rackable unit UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__rackable_unit_uuid

    @rackable_unit_uuid.setter
    def rackable_unit_uuid(self, rackable_unit_uuid):
        if rackable_unit_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', rackable_unit_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `rackable_unit_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__rackable_unit_uuid = rackable_unit_uuid

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Host, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


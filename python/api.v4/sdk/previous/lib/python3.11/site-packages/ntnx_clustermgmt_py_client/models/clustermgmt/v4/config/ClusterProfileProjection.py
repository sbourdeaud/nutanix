# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterProfile import ClusterProfile  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ConfigType import ConfigType  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ManagedCluster import ManagedCluster  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PulseStatus import PulseStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.RsyslogServer import RsyslogServer  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SmtpServerRef import SmtpServerRef  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SnmpConfig import SnmpConfig  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN import IPAddressOrFQDN  # noqa: F401,E501

class ClusterProfileProjection(ClusterProfile):

    """

    :param name: (:attr:`name`) Name of the cluster profile
    :type name: required
     max=64 chars
    
    :param description: (:attr:`description`) Detailed description of a cluster profile
    :type description: 
     max=1000 chars
    
    :param create_time: (:attr:`create_time`) Creation time of cluster profile
    :type create_time: 
    
    
    :param last_update_time: (:attr:`last_update_time`) Last updated time of a cluster profile
    :type last_update_time: 
    
    
    :param created_by: (:attr:`created_by`) Details of the user who created this cluster profile
    :type created_by: 
    
    
    :param last_updated_by: (:attr:`last_updated_by`) Details of the user who has recently updated this cluster profile
    :type last_updated_by: 
    
    
    :param cluster_count: (:attr:`cluster_count`) Count of clusters associated to a cluster profile
    :type cluster_count: 
    
    
    :param drifted_cluster_count: (:attr:`drifted_cluster_count`) The count indicates the number of clusters associated with a cluster profile that have experienced drift. Drifted clusters are those in which the configuration differs from the defined profile. For example, the NTP server has different values on a cluster as compared to the profile it is attached.
    :type drifted_cluster_count: 
    
    
    :param clusters: (:attr:`clusters`) Managed cluster information
    :type clusters: 
    
    
    :param allowed_overrides: (:attr:`allowed_overrides`) Indicates if a configuration of attached clusters can be skipped from monitoring.
    :type allowed_overrides: 
    
    
    :param name_server_ip_list: (:attr:`name_server_ip_list`) List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    :type name_server_ip_list: 
    
    
    :param ntp_server_ip_list: (:attr:`ntp_server_ip_list`) List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    :type ntp_server_ip_list: 
    
    
    :param smtp_server: (:attr:`smtp_server`) 
    :type smtp_server: 
    
    
    :param nfs_subnet_whitelist: (:attr:`nfs_subnet_whitelist`) NFS subnet whitelist addresses. This is part of payload for cluster update operation only.
    :type nfs_subnet_whitelist: 
    
    
    :param snmp_config: (:attr:`snmp_config`) 
    :type snmp_config: 
    
    
    :param rsyslog_server_list: (:attr:`rsyslog_server_list`) RSYSLOG Server.
    :type rsyslog_server_list: 
    
    
    :param pulse_status: (:attr:`pulse_status`) 
    :type pulse_status: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'create_time': 'datetime',
        'last_update_time': 'datetime',
        'created_by': 'str',
        'last_updated_by': 'str',
        'cluster_count': 'int',
        'drifted_cluster_count': 'int',
        'clusters': 'list[clustermgmt.v4.config.ManagedCluster]',
        'allowed_overrides': 'list[clustermgmt.v4.config.ConfigType]',
        'name_server_ip_list': 'list[common.v1.config.IPAddress]',
        'ntp_server_ip_list': 'list[common.v1.config.IPAddressOrFQDN]',
        'smtp_server': 'clustermgmt.v4.config.SmtpServerRef',
        'nfs_subnet_whitelist': 'list[str]',
        'snmp_config': 'clustermgmt.v4.config.SnmpConfig',
        'rsyslog_server_list': 'list[clustermgmt.v4.config.RsyslogServer]',
        'pulse_status': 'clustermgmt.v4.config.PulseStatus',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'create_time': 'createTime',
        'last_update_time': 'lastUpdateTime',
        'created_by': 'createdBy',
        'last_updated_by': 'lastUpdatedBy',
        'cluster_count': 'clusterCount',
        'drifted_cluster_count': 'driftedClusterCount',
        'clusters': 'clusters',
        'allowed_overrides': 'allowedOverrides',
        'name_server_ip_list': 'nameServerIpList',
        'ntp_server_ip_list': 'ntpServerIpList',
        'smtp_server': 'smtpServer',
        'nfs_subnet_whitelist': 'nfsSubnetWhitelist',
        'snmp_config': 'snmpConfig',
        'rsyslog_server_list': 'rsyslogServerList',
        'pulse_status': 'pulseStatus',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, create_time=None, last_update_time=None, created_by=None, last_updated_by=None, cluster_count=None, drifted_cluster_count=None, clusters=None, allowed_overrides=None, name_server_ip_list=None, ntp_server_ip_list=None, smtp_server=None, nfs_subnet_whitelist=None, snmp_config=None, rsyslog_server_list=None, pulse_status=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ClusterProfile.__init__(self, name, description, create_time, last_update_time, created_by, last_updated_by, cluster_count, drifted_cluster_count, clusters, allowed_overrides, name_server_ip_list, ntp_server_ip_list, smtp_server, nfs_subnet_whitelist, snmp_config, rsyslog_server_list, pulse_status, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ClusterProfileProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterProfileProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterProfileProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


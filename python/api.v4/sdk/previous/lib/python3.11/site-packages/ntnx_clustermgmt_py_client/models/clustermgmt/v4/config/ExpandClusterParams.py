# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ConfigParams import ConfigParams  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeParam import NodeParam  # noqa: F401,E501

class ExpandClusterParams(object):

    """Property of the node to be added.

    :param node_params: (:attr:`node_params`) 
    :type node_params: required
    
    
    :param config_params: (:attr:`config_params`) 
    :type config_params: 
    
    
    :param should_skip_add_node: (:attr:`should_skip_add_node`) Indicates if node addition can be skipped.
    :type should_skip_add_node: 
    
    
    :param should_skip_pre_expand_checks: (:attr:`should_skip_pre_expand_checks`) Indicates if pre-expand checks can be skipped for node addition.
    :type should_skip_pre_expand_checks: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'node_params': 'clustermgmt.v4.config.NodeParam',
        'config_params': 'clustermgmt.v4.config.ConfigParams',
        'should_skip_add_node': 'bool',
        'should_skip_pre_expand_checks': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'node_params': 'nodeParams',
        'config_params': 'configParams',
        'should_skip_add_node': 'shouldSkipAddNode',
        'should_skip_pre_expand_checks': 'shouldSkipPreExpandChecks',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, node_params=None, config_params=None, should_skip_add_node=None, should_skip_pre_expand_checks=None, *args, **kwargs):  # noqa: E501
        self.__node_params = None
        self.__config_params = None
        self.__should_skip_add_node = None
        self.__should_skip_pre_expand_checks = None
        self.discriminator = None
        self.__node_params = node_params
        if config_params is not None:
            self.__config_params = config_params
        if should_skip_add_node is not None:
            self.__should_skip_add_node = should_skip_add_node
        if should_skip_pre_expand_checks is not None:
            self.__should_skip_pre_expand_checks = should_skip_pre_expand_checks
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ExpandClusterParams'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def node_params(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeParam`
        """  # noqa: E501
        return self.__node_params

    @node_params.setter
    def node_params(self, node_params):
        if node_params is None:
            raise ValueError("Invalid value for `node_params`, must not be `None`")  # noqa: E501

        self.__node_params = node_params

    @property
    def config_params(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ConfigParams`
        """  # noqa: E501
        return self.__config_params

    @config_params.setter
    def config_params(self, config_params):

        self.__config_params = config_params

    @property
    def should_skip_add_node(self):
        """
        Indicates if node addition can be skipped.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_skip_add_node

    @should_skip_add_node.setter
    def should_skip_add_node(self, should_skip_add_node):

        self.__should_skip_add_node = should_skip_add_node

    @property
    def should_skip_pre_expand_checks(self):
        """
        Indicates if pre-expand checks can be skipped for node addition.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_skip_pre_expand_checks

    @should_skip_pre_expand_checks.setter
    def should_skip_pre_expand_checks(self, should_skip_pre_expand_checks):

        self.__should_skip_pre_expand_checks = should_skip_pre_expand_checks

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ExpandClusterParams, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpandClusterParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.Cluster import Cluster  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterConfigReference import ClusterConfigReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterNetworkReference import ClusterNetworkReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterProfileProjection import ClusterProfileProjection  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeReference import NodeReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.StorageSummaryProjection import StorageSummaryProjection  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.UpgradeStatus import UpgradeStatus  # noqa: F401,E501

class ClusterProjection(Cluster):

    """

    :param cluster_profile_projection: (:attr:`cluster_profile_projection`) 
    :type cluster_profile_projection: 
    
    
    :param storage_summary_projection: (:attr:`storage_summary_projection`) 
    :type storage_summary_projection: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_profile_projection': 'clustermgmt.v4.config.ClusterProfileProjection',
        'storage_summary_projection': 'clustermgmt.v4.config.StorageSummaryProjection',
        'name': 'str',
        'nodes': 'clustermgmt.v4.config.NodeReference',
        'config': 'clustermgmt.v4.config.ClusterConfigReference',
        'network': 'clustermgmt.v4.config.ClusterNetworkReference',
        'upgrade_status': 'clustermgmt.v4.config.UpgradeStatus',
        'vm_count': 'int',
        'inefficient_vm_count': 'int',
        'container_name': 'str',
        'categories': 'list[str]',
        'cluster_profile_ext_id': 'str',
        'backup_eligibility_score': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_profile_projection': 'clusterProfileProjection',
        'storage_summary_projection': 'storageSummaryProjection',
        'name': 'name',
        'nodes': 'nodes',
        'config': 'config',
        'network': 'network',
        'upgrade_status': 'upgradeStatus',
        'vm_count': 'vmCount',
        'inefficient_vm_count': 'inefficientVmCount',
        'container_name': 'containerName',
        'categories': 'categories',
        'cluster_profile_ext_id': 'clusterProfileExtId',
        'backup_eligibility_score': 'backupEligibilityScore',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_profile_projection=None, storage_summary_projection=None, name=None, nodes=None, config=None, network=None, upgrade_status=None, vm_count=None, inefficient_vm_count=None, container_name=None, categories=None, cluster_profile_ext_id=None, backup_eligibility_score=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        Cluster.__init__(self, name, nodes, config, network, upgrade_status, vm_count, inefficient_vm_count, container_name, categories, cluster_profile_ext_id, backup_eligibility_score, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_profile_projection = None
        self.__storage_summary_projection = None
        self.discriminator = None
        if cluster_profile_projection is not None:
            self.__cluster_profile_projection = cluster_profile_projection
        if storage_summary_projection is not None:
            self.__storage_summary_projection = storage_summary_projection

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ClusterProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_profile_projection(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterProfileProjection`
        """  # noqa: E501
        return self.__cluster_profile_projection

    @cluster_profile_projection.setter
    def cluster_profile_projection(self, cluster_profile_projection):

        self.__cluster_profile_projection = cluster_profile_projection

    @property
    def storage_summary_projection(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.StorageSummaryProjection`
        """  # noqa: E501
        return self.__storage_summary_projection

    @storage_summary_projection.setter
    def storage_summary_projection(self, storage_summary_projection):

        self.__storage_summary_projection = storage_summary_projection

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


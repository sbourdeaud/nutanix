# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class VirtualNic(ExternalizableAbstractModel):

    """Virtual NIC details.

    :param name: (:attr:`name`) Virtual NIC name.
    :type name: 
     max=64 chars
    
    :param host_description: (:attr:`host_description`) Host description.
    :type host_description: 
    
    
    :param mac_address: (:attr:`mac_address`) Host Mac address.
    :type mac_address: 
    
    
    :param ipv4_addresses: (:attr:`ipv4_addresses`) List of IPv4 addresses associated with the NIC entity for the network connection.
    :type ipv4_addresses: 
    
    
    :param ipv6_addresses: (:attr:`ipv6_addresses`) List of IPv6 addresses associated with the NIC entity for the network connection.
    :type ipv6_addresses: 
    
    
    :param interface_status: (:attr:`interface_status`) Operational status of the interface to the port associated with the NIC entity.
    :type interface_status: 
    
    
    :param is_dhcp_enabled: (:attr:`is_dhcp_enabled`) Status of DHCP protocol.
    :type is_dhcp_enabled: 
    
    
    :param link_speed_in_kbps: (:attr:`link_speed_in_kbps`) Link speed in Kbps.
    :type link_speed_in_kbps: 
    
    
    :param mtu_in_bytes: (:attr:`mtu_in_bytes`) Maximum transmission unit in bytes.
    :type mtu_in_bytes: 
    
    
    :param node_uuid: (:attr:`node_uuid`) UUID of the host.
    :type node_uuid: 
    
    
    :param vlan_id: (:attr:`vlan_id`) VLAN Id.
    :type vlan_id: 
    
    
    :param host_nics_uuids: (:attr:`host_nics_uuids`) List of host NIC UUID associated with the host virtual NIC.
    :type host_nics_uuids: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'host_description': 'str',
        'mac_address': 'str',
        'ipv4_addresses': 'list[common.v1.config.IPAddress]',
        'ipv6_addresses': 'list[common.v1.config.IPAddress]',
        'interface_status': 'str',
        'is_dhcp_enabled': 'bool',
        'link_speed_in_kbps': 'int',
        'mtu_in_bytes': 'int',
        'node_uuid': 'str',
        'vlan_id': 'int',
        'host_nics_uuids': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'host_description': 'hostDescription',
        'mac_address': 'macAddress',
        'ipv4_addresses': 'ipv4Addresses',
        'ipv6_addresses': 'ipv6Addresses',
        'interface_status': 'interfaceStatus',
        'is_dhcp_enabled': 'isDhcpEnabled',
        'link_speed_in_kbps': 'linkSpeedInKbps',
        'mtu_in_bytes': 'mtuInBytes',
        'node_uuid': 'nodeUuid',
        'vlan_id': 'vlanId',
        'host_nics_uuids': 'hostNicsUuids',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, host_description=None, mac_address=None, ipv4_addresses=None, ipv6_addresses=None, interface_status=None, is_dhcp_enabled=None, link_speed_in_kbps=None, mtu_in_bytes=None, node_uuid=None, vlan_id=None, host_nics_uuids=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__host_description = None
        self.__mac_address = None
        self.__ipv4_addresses = None
        self.__ipv6_addresses = None
        self.__interface_status = None
        self.__is_dhcp_enabled = None
        self.__link_speed_in_kbps = None
        self.__mtu_in_bytes = None
        self.__node_uuid = None
        self.__vlan_id = None
        self.__host_nics_uuids = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if host_description is not None:
            self.__host_description = host_description
        if mac_address is not None:
            self.__mac_address = mac_address
        if ipv4_addresses is not None:
            self.__ipv4_addresses = ipv4_addresses
        if ipv6_addresses is not None:
            self.__ipv6_addresses = ipv6_addresses
        if interface_status is not None:
            self.__interface_status = interface_status
        if is_dhcp_enabled is not None:
            self.__is_dhcp_enabled = is_dhcp_enabled
        if link_speed_in_kbps is not None:
            self.__link_speed_in_kbps = link_speed_in_kbps
        if mtu_in_bytes is not None:
            self.__mtu_in_bytes = mtu_in_bytes
        if node_uuid is not None:
            self.__node_uuid = node_uuid
        if vlan_id is not None:
            self.__vlan_id = vlan_id
        if host_nics_uuids is not None:
            self.__host_nics_uuids = host_nics_uuids

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.VirtualNic'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Virtual NIC name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self.__name = name

    @property
    def host_description(self):
        """
        Host description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__host_description

    @host_description.setter
    def host_description(self, host_description):

        self.__host_description = host_description

    @property
    def mac_address(self):
        """
        Host Mac address.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        if mac_address is not None and not re.search('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', mac_address):  # noqa: E501
            raise ValueError(r"Invalid value for `mac_address`, must be a follow pattern or equal to `/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/`")  # noqa: E501

        self.__mac_address = mac_address

    @property
    def ipv4_addresses(self):
        """
        List of IPv4 addresses associated with the NIC entity for the network connection.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__ipv4_addresses

    @ipv4_addresses.setter
    def ipv4_addresses(self, ipv4_addresses):

        self.__ipv4_addresses = ipv4_addresses

    @property
    def ipv6_addresses(self):
        """
        List of IPv6 addresses associated with the NIC entity for the network connection.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):

        self.__ipv6_addresses = ipv6_addresses

    @property
    def interface_status(self):
        """
        Operational status of the interface to the port associated with the NIC entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__interface_status

    @interface_status.setter
    def interface_status(self, interface_status):

        self.__interface_status = interface_status

    @property
    def is_dhcp_enabled(self):
        """
        Status of DHCP protocol.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_dhcp_enabled

    @is_dhcp_enabled.setter
    def is_dhcp_enabled(self, is_dhcp_enabled):

        self.__is_dhcp_enabled = is_dhcp_enabled

    @property
    def link_speed_in_kbps(self):
        """
        Link speed in Kbps.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__link_speed_in_kbps

    @link_speed_in_kbps.setter
    def link_speed_in_kbps(self, link_speed_in_kbps):

        self.__link_speed_in_kbps = link_speed_in_kbps

    @property
    def mtu_in_bytes(self):
        """
        Maximum transmission unit in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__mtu_in_bytes

    @mtu_in_bytes.setter
    def mtu_in_bytes(self, mtu_in_bytes):

        self.__mtu_in_bytes = mtu_in_bytes

    @property
    def node_uuid(self):
        """
        UUID of the host.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        if node_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', node_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `node_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__node_uuid = node_uuid

    @property
    def vlan_id(self):
        """
        VLAN Id.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):

        self.__vlan_id = vlan_id

    @property
    def host_nics_uuids(self):
        """
        List of host NIC UUID associated with the host virtual NIC.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__host_nics_uuids

    @host_nics_uuids.setter
    def host_nics_uuids(self, host_nics_uuids):

        self.__host_nics_uuids = host_nics_uuids

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VirtualNic, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualNic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


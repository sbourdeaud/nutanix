# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class DataStoreMount(ExternalizableAbstractModel):

    """

    :param datastore_name: (:attr:`datastore_name`) Name of the datastore.
    :type datastore_name: 
     max=255 chars
    
    :param container_name: (:attr:`container_name`) Name of the Storage Container. Note that the name of Storage Container should be unique in every cluster.
    :type container_name: required
     max=75 chars
    
    :param node_ext_ids: (:attr:`node_ext_ids`) The UUIDs of the nodes where the NFS datastore has to be created.
    :type node_ext_ids: 
    
    
    :param is_read_only: (:attr:`is_read_only`) Indicates weather the host system has read-only access to the NFS share.
    :type is_read_only: 
    
    
    :param target_path: (:attr:`target_path`) The target path on which to mount the NFS datastore.
    :type target_path: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'datastore_name': 'str',
        'container_name': 'str',
        'node_ext_ids': 'list[str]',
        'is_read_only': 'bool',
        'target_path': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'datastore_name': 'datastoreName',
        'container_name': 'containerName',
        'node_ext_ids': 'nodeExtIds',
        'is_read_only': 'isReadOnly',
        'target_path': 'targetPath',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, datastore_name=None, container_name=None, node_ext_ids=None, is_read_only=None, target_path=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__datastore_name = None
        self.__container_name = None
        self.__node_ext_ids = None
        self.__is_read_only = None
        self.__target_path = None
        self.discriminator = None
        if datastore_name is not None:
            self.__datastore_name = datastore_name
        self.__container_name = container_name
        if node_ext_ids is not None:
            self.__node_ext_ids = node_ext_ids
        if is_read_only is not None:
            self.__is_read_only = is_read_only
        if target_path is not None:
            self.__target_path = target_path

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.DataStoreMount'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def datastore_name(self):
        """
        Name of the datastore.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        if datastore_name is not None and len(datastore_name) > 255:
            raise ValueError("Invalid value for `datastore_name`, length must be less than or equal to `255`")  # noqa: E501

        self.__datastore_name = datastore_name

    @property
    def container_name(self):
        """
        Name of the Storage Container. Note that the name of Storage Container should be unique in every cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__container_name

    @container_name.setter
    def container_name(self, container_name):
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")  # noqa: E501
        if container_name is not None and len(container_name) > 75:
            raise ValueError("Invalid value for `container_name`, length must be less than or equal to `75`")  # noqa: E501

        self.__container_name = container_name

    @property
    def node_ext_ids(self):
        """
        The UUIDs of the nodes where the NFS datastore has to be created.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__node_ext_ids

    @node_ext_ids.setter
    def node_ext_ids(self, node_ext_ids):

        self.__node_ext_ids = node_ext_ids

    @property
    def is_read_only(self):
        """
        Indicates weather the host system has read-only access to the NFS share.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):

        self.__is_read_only = is_read_only

    @property
    def target_path(self):
        """
        The target path on which to mount the NFS datastore.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_path

    @target_path.setter
    def target_path(self, target_path):

        self.__target_path = target_path

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DataStoreMount, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataStoreMount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


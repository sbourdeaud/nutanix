# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DigitalCertificateMapReference import DigitalCertificateMapReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervisorType import HypervisorType  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501

class NodeInfo(object):

    """Node item containing attributes of node.

    :param node_uuid: (:attr:`node_uuid`) UUID of the host.
    :type node_uuid: 
    
    
    :param block_id: (:attr:`block_id`) Rackable unit serial name.
    :type block_id: 
    
    
    :param node_position: (:attr:`node_position`) Position of a node in a rackable unit.
    :type node_position: 
    
    
    :param hypervisor_type: (:attr:`hypervisor_type`) 
    :type hypervisor_type: 
    
    
    :param is_robo_mixed_hypervisor: (:attr:`is_robo_mixed_hypervisor`) Indicates whether the hypervisor is robo mixed or not.
    :type is_robo_mixed_hypervisor: 
    
    
    :param hypervisor_hostname: (:attr:`hypervisor_hostname`) Name of the host.
    :type hypervisor_hostname: 
     max=64 chars
    
    :param hypervisor_version: (:attr:`hypervisor_version`) Host version of the node.
    :type hypervisor_version: 
    
    
    :param nos_version: (:attr:`nos_version`) NOS software version of a node.
    :type nos_version: 
    
    
    :param is_light_compute: (:attr:`is_light_compute`) Indicates whether the node is light compute or not.
    :type is_light_compute: 
    
    
    :param ipmi_ip: (:attr:`ipmi_ip`) 
    :type ipmi_ip: 
    
    
    :param digital_certificate_map_list: (:attr:`digital_certificate_map_list`) List of objects containing digital_certificate_base64 and key_management_server_uuid fields for key management server.
    :type digital_certificate_map_list: 
    
    
    :param cvm_ip: (:attr:`cvm_ip`) 
    :type cvm_ip: 
    
    
    :param hypervisor_ip: (:attr:`hypervisor_ip`) 
    :type hypervisor_ip: 
    
    
    :param model: (:attr:`model`) Rackable unit model name.
    :type model: 
    
    
    :param current_network_interface: (:attr:`current_network_interface`) Current network interface of a node.
    :type current_network_interface: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'node_uuid': 'str',
        'block_id': 'str',
        'node_position': 'str',
        'hypervisor_type': 'clustermgmt.v4.config.HypervisorType',
        'is_robo_mixed_hypervisor': 'bool',
        'hypervisor_hostname': 'str',
        'hypervisor_version': 'str',
        'nos_version': 'str',
        'is_light_compute': 'bool',
        'ipmi_ip': 'common.v1.config.IPAddress',
        'digital_certificate_map_list': 'list[clustermgmt.v4.config.DigitalCertificateMapReference]',
        'cvm_ip': 'common.v1.config.IPAddress',
        'hypervisor_ip': 'common.v1.config.IPAddress',
        'model': 'str',
        'current_network_interface': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'node_uuid': 'nodeUuid',
        'block_id': 'blockId',
        'node_position': 'nodePosition',
        'hypervisor_type': 'hypervisorType',
        'is_robo_mixed_hypervisor': 'isRoboMixedHypervisor',
        'hypervisor_hostname': 'hypervisorHostname',
        'hypervisor_version': 'hypervisorVersion',
        'nos_version': 'nosVersion',
        'is_light_compute': 'isLightCompute',
        'ipmi_ip': 'ipmiIp',
        'digital_certificate_map_list': 'digitalCertificateMapList',
        'cvm_ip': 'cvmIp',
        'hypervisor_ip': 'hypervisorIp',
        'model': 'model',
        'current_network_interface': 'currentNetworkInterface',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, node_uuid=None, block_id=None, node_position=None, hypervisor_type=None, is_robo_mixed_hypervisor=None, hypervisor_hostname=None, hypervisor_version=None, nos_version=None, is_light_compute=None, ipmi_ip=None, digital_certificate_map_list=None, cvm_ip=None, hypervisor_ip=None, model=None, current_network_interface=None, *args, **kwargs):  # noqa: E501
        self.__node_uuid = None
        self.__block_id = None
        self.__node_position = None
        self.__hypervisor_type = None
        self.__is_robo_mixed_hypervisor = None
        self.__hypervisor_hostname = None
        self.__hypervisor_version = None
        self.__nos_version = None
        self.__is_light_compute = None
        self.__ipmi_ip = None
        self.__digital_certificate_map_list = None
        self.__cvm_ip = None
        self.__hypervisor_ip = None
        self.__model = None
        self.__current_network_interface = None
        self.discriminator = None
        if node_uuid is not None:
            self.__node_uuid = node_uuid
        if block_id is not None:
            self.__block_id = block_id
        if node_position is not None:
            self.__node_position = node_position
        if hypervisor_type is not None:
            self.__hypervisor_type = hypervisor_type
        if is_robo_mixed_hypervisor is not None:
            self.__is_robo_mixed_hypervisor = is_robo_mixed_hypervisor
        if hypervisor_hostname is not None:
            self.__hypervisor_hostname = hypervisor_hostname
        if hypervisor_version is not None:
            self.__hypervisor_version = hypervisor_version
        if nos_version is not None:
            self.__nos_version = nos_version
        if is_light_compute is not None:
            self.__is_light_compute = is_light_compute
        if ipmi_ip is not None:
            self.__ipmi_ip = ipmi_ip
        if digital_certificate_map_list is not None:
            self.__digital_certificate_map_list = digital_certificate_map_list
        if cvm_ip is not None:
            self.__cvm_ip = cvm_ip
        if hypervisor_ip is not None:
            self.__hypervisor_ip = hypervisor_ip
        if model is not None:
            self.__model = model
        if current_network_interface is not None:
            self.__current_network_interface = current_network_interface
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.NodeInfo'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def node_uuid(self):
        """
        UUID of the host.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        if node_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', node_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `node_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__node_uuid = node_uuid

    @property
    def block_id(self):
        """
        Rackable unit serial name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__block_id

    @block_id.setter
    def block_id(self, block_id):

        self.__block_id = block_id

    @property
    def node_position(self):
        """
        Position of a node in a rackable unit.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__node_position

    @node_position.setter
    def node_position(self, node_position):

        self.__node_position = node_position

    @property
    def hypervisor_type(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervisorType`
        """  # noqa: E501
        return self.__hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):

        self.__hypervisor_type = hypervisor_type

    @property
    def is_robo_mixed_hypervisor(self):
        """
        Indicates whether the hypervisor is robo mixed or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_robo_mixed_hypervisor

    @is_robo_mixed_hypervisor.setter
    def is_robo_mixed_hypervisor(self, is_robo_mixed_hypervisor):

        self.__is_robo_mixed_hypervisor = is_robo_mixed_hypervisor

    @property
    def hypervisor_hostname(self):
        """
        Name of the host.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hypervisor_hostname

    @hypervisor_hostname.setter
    def hypervisor_hostname(self, hypervisor_hostname):
        if hypervisor_hostname is not None and len(hypervisor_hostname) > 64:
            raise ValueError("Invalid value for `hypervisor_hostname`, length must be less than or equal to `64`")  # noqa: E501

        self.__hypervisor_hostname = hypervisor_hostname

    @property
    def hypervisor_version(self):
        """
        Host version of the node.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hypervisor_version

    @hypervisor_version.setter
    def hypervisor_version(self, hypervisor_version):

        self.__hypervisor_version = hypervisor_version

    @property
    def nos_version(self):
        """
        NOS software version of a node.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__nos_version

    @nos_version.setter
    def nos_version(self, nos_version):

        self.__nos_version = nos_version

    @property
    def is_light_compute(self):
        """
        Indicates whether the node is light compute or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_light_compute

    @is_light_compute.setter
    def is_light_compute(self, is_light_compute):

        self.__is_light_compute = is_light_compute

    @property
    def ipmi_ip(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__ipmi_ip

    @ipmi_ip.setter
    def ipmi_ip(self, ipmi_ip):

        self.__ipmi_ip = ipmi_ip

    @property
    def digital_certificate_map_list(self):
        """
        List of objects containing digital_certificate_base64 and key_management_server_uuid fields for key management server.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DigitalCertificateMapReference` ]
        """  # noqa: E501
        return self.__digital_certificate_map_list

    @digital_certificate_map_list.setter
    def digital_certificate_map_list(self, digital_certificate_map_list):

        self.__digital_certificate_map_list = digital_certificate_map_list

    @property
    def cvm_ip(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__cvm_ip

    @cvm_ip.setter
    def cvm_ip(self, cvm_ip):

        self.__cvm_ip = cvm_ip

    @property
    def hypervisor_ip(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__hypervisor_ip

    @hypervisor_ip.setter
    def hypervisor_ip(self, hypervisor_ip):

        self.__hypervisor_ip = hypervisor_ip

    @property
    def model(self):
        """
        Rackable unit model name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__model

    @model.setter
    def model(self, model):

        self.__model = model

    @property
    def current_network_interface(self):
        """
        Current network interface of a node.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__current_network_interface

    @current_network_interface.setter
    def current_network_interface(self, current_network_interface):

        self.__current_network_interface = current_network_interface

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NodeInfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervCredentials import HypervCredentials  # noqa: F401,E501

class ConfigParams(object):

    """Config parameters.

    :param should_skip_discovery: (:attr:`should_skip_discovery`) Indicates if node discovery need to be skipped or not.
    :type should_skip_discovery: 
    
    
    :param should_skip_imaging: (:attr:`should_skip_imaging`) Indicates if node imaging needs to be skipped or not.
    :type should_skip_imaging: 
    
    
    :param should_validate_rack_awareness: (:attr:`should_validate_rack_awareness`) Indicates if rack awareness needs to be validated or not.
    :type should_validate_rack_awareness: 
    
    
    :param is_nos_compatible: (:attr:`is_nos_compatible`) Indicates if node is compatible or not.
    :type is_nos_compatible: 
    
    
    :param is_compute_only: (:attr:`is_compute_only`) Indicates whether the node is compute only or not.
    :type is_compute_only: 
    
    
    :param is_never_scheduleable: (:attr:`is_never_scheduleable`) Indicates whether the node is marked to be never schedulable or not.
    :type is_never_scheduleable: 
    
    
    :param target_hypervisor: (:attr:`target_hypervisor`) Target hypervisor.
    :type target_hypervisor: 
    
    
    :param hyperv: (:attr:`hyperv`) 
    :type hyperv: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'should_skip_discovery': 'bool',
        'should_skip_imaging': 'bool',
        'should_validate_rack_awareness': 'bool',
        'is_nos_compatible': 'bool',
        'is_compute_only': 'bool',
        'is_never_scheduleable': 'bool',
        'target_hypervisor': 'str',
        'hyperv': 'clustermgmt.v4.config.HypervCredentials',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'should_skip_discovery': 'shouldSkipDiscovery',
        'should_skip_imaging': 'shouldSkipImaging',
        'should_validate_rack_awareness': 'shouldValidateRackAwareness',
        'is_nos_compatible': 'isNosCompatible',
        'is_compute_only': 'isComputeOnly',
        'is_never_scheduleable': 'isNeverScheduleable',
        'target_hypervisor': 'targetHypervisor',
        'hyperv': 'hyperv',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, should_skip_discovery=None, should_skip_imaging=None, should_validate_rack_awareness=None, is_nos_compatible=None, is_compute_only=None, is_never_scheduleable=None, target_hypervisor=None, hyperv=None, *args, **kwargs):  # noqa: E501
        self.__should_skip_discovery = None
        self.__should_skip_imaging = None
        self.__should_validate_rack_awareness = None
        self.__is_nos_compatible = None
        self.__is_compute_only = None
        self.__is_never_scheduleable = None
        self.__target_hypervisor = None
        self.__hyperv = None
        self.discriminator = None
        if should_skip_discovery is not None:
            self.__should_skip_discovery = should_skip_discovery
        if should_skip_imaging is not None:
            self.__should_skip_imaging = should_skip_imaging
        if should_validate_rack_awareness is not None:
            self.__should_validate_rack_awareness = should_validate_rack_awareness
        if is_nos_compatible is not None:
            self.__is_nos_compatible = is_nos_compatible
        if is_compute_only is not None:
            self.__is_compute_only = is_compute_only
        if is_never_scheduleable is not None:
            self.__is_never_scheduleable = is_never_scheduleable
        if target_hypervisor is not None:
            self.__target_hypervisor = target_hypervisor
        if hyperv is not None:
            self.__hyperv = hyperv
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ConfigParams'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def should_skip_discovery(self):
        """
        Indicates if node discovery need to be skipped or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_skip_discovery

    @should_skip_discovery.setter
    def should_skip_discovery(self, should_skip_discovery):

        self.__should_skip_discovery = should_skip_discovery

    @property
    def should_skip_imaging(self):
        """
        Indicates if node imaging needs to be skipped or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_skip_imaging

    @should_skip_imaging.setter
    def should_skip_imaging(self, should_skip_imaging):

        self.__should_skip_imaging = should_skip_imaging

    @property
    def should_validate_rack_awareness(self):
        """
        Indicates if rack awareness needs to be validated or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_validate_rack_awareness

    @should_validate_rack_awareness.setter
    def should_validate_rack_awareness(self, should_validate_rack_awareness):

        self.__should_validate_rack_awareness = should_validate_rack_awareness

    @property
    def is_nos_compatible(self):
        """
        Indicates if node is compatible or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_nos_compatible

    @is_nos_compatible.setter
    def is_nos_compatible(self, is_nos_compatible):

        self.__is_nos_compatible = is_nos_compatible

    @property
    def is_compute_only(self):
        """
        Indicates whether the node is compute only or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_compute_only

    @is_compute_only.setter
    def is_compute_only(self, is_compute_only):

        self.__is_compute_only = is_compute_only

    @property
    def is_never_scheduleable(self):
        """
        Indicates whether the node is marked to be never schedulable or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_never_scheduleable

    @is_never_scheduleable.setter
    def is_never_scheduleable(self, is_never_scheduleable):

        self.__is_never_scheduleable = is_never_scheduleable

    @property
    def target_hypervisor(self):
        """
        Target hypervisor.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_hypervisor

    @target_hypervisor.setter
    def target_hypervisor(self, target_hypervisor):

        self.__target_hypervisor = target_hypervisor

    @property
    def hyperv(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervCredentials`
        """  # noqa: E501
        return self.__hyperv

    @hyperv.setter
    def hyperv(self, hyperv):

        self.__hyperv = hyperv

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ConfigParams, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


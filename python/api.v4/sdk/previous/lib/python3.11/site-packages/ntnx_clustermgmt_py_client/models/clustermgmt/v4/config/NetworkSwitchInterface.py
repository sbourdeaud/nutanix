# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class NetworkSwitchInterface(ExternalizableAbstractModel):

    """Network switch interface details.

    :param port: (:attr:`port`) Network switch interface port number.
    :type port: 
    
    
    :param switch_interface_name: (:attr:`switch_interface_name`) Network switch interface name.
    :type switch_interface_name: 
     max=64 chars
    
    :param switch_interface_description: (:attr:`switch_interface_description`) Network switch interface description.
    :type switch_interface_description: 
    
    
    :param switch_interface_type: (:attr:`switch_interface_type`) Network switch interface type.
    :type switch_interface_type: 
    
    
    :param index: (:attr:`index`) Network switch interface index.
    :type index: 
    
    
    :param speed_in_kbps: (:attr:`speed_in_kbps`) Network switch interface link speed in Kbps.
    :type speed_in_kbps: 
    
    
    :param mtu_in_bytes: (:attr:`mtu_in_bytes`) Maximum transmission unit in bytes.
    :type mtu_in_bytes: 
    
    
    :param mac_address: (:attr:`mac_address`) Host Mac address.
    :type mac_address: 
    
    
    :param last_change_time: (:attr:`last_change_time`) Timestamp when the interface state was last changed or modified.
    :type last_change_time: 
    
    
    :param switch_management_address: (:attr:`switch_management_address`) 
    :type switch_management_address: 
    
    
    :param attached_host_uuid: (:attr:`attached_host_uuid`) UUID of the host connected to the interface.
    :type attached_host_uuid: 
    
    
    :param attached_host_nic_uuids: (:attr:`attached_host_nic_uuids`) List of host NIC UUIDs connected to this interface.
    :type attached_host_nic_uuids: 
    
    
    :param switch_uuid: (:attr:`switch_uuid`) UUID of the switch.
    :type switch_uuid: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'port': 'int',
        'switch_interface_name': 'str',
        'switch_interface_description': 'str',
        'switch_interface_type': 'str',
        'index': 'int',
        'speed_in_kbps': 'int',
        'mtu_in_bytes': 'int',
        'mac_address': 'str',
        'last_change_time': 'datetime',
        'switch_management_address': 'common.v1.config.IPAddress',
        'attached_host_uuid': 'str',
        'attached_host_nic_uuids': 'list[str]',
        'switch_uuid': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'port': 'port',
        'switch_interface_name': 'switchInterfaceName',
        'switch_interface_description': 'switchInterfaceDescription',
        'switch_interface_type': 'switchInterfaceType',
        'index': 'index',
        'speed_in_kbps': 'speedInKbps',
        'mtu_in_bytes': 'mtuInBytes',
        'mac_address': 'macAddress',
        'last_change_time': 'lastChangeTime',
        'switch_management_address': 'switchManagementAddress',
        'attached_host_uuid': 'attachedHostUuid',
        'attached_host_nic_uuids': 'attachedHostNicUuids',
        'switch_uuid': 'switchUuid',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, port=None, switch_interface_name=None, switch_interface_description=None, switch_interface_type=None, index=None, speed_in_kbps=None, mtu_in_bytes=None, mac_address=None, last_change_time=None, switch_management_address=None, attached_host_uuid=None, attached_host_nic_uuids=None, switch_uuid=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__port = None
        self.__switch_interface_name = None
        self.__switch_interface_description = None
        self.__switch_interface_type = None
        self.__index = None
        self.__speed_in_kbps = None
        self.__mtu_in_bytes = None
        self.__mac_address = None
        self.__last_change_time = None
        self.__switch_management_address = None
        self.__attached_host_uuid = None
        self.__attached_host_nic_uuids = None
        self.__switch_uuid = None
        self.discriminator = None
        if port is not None:
            self.__port = port
        if switch_interface_name is not None:
            self.__switch_interface_name = switch_interface_name
        if switch_interface_description is not None:
            self.__switch_interface_description = switch_interface_description
        if switch_interface_type is not None:
            self.__switch_interface_type = switch_interface_type
        if index is not None:
            self.__index = index
        if speed_in_kbps is not None:
            self.__speed_in_kbps = speed_in_kbps
        if mtu_in_bytes is not None:
            self.__mtu_in_bytes = mtu_in_bytes
        if mac_address is not None:
            self.__mac_address = mac_address
        if last_change_time is not None:
            self.__last_change_time = last_change_time
        if switch_management_address is not None:
            self.__switch_management_address = switch_management_address
        if attached_host_uuid is not None:
            self.__attached_host_uuid = attached_host_uuid
        if attached_host_nic_uuids is not None:
            self.__attached_host_nic_uuids = attached_host_nic_uuids
        if switch_uuid is not None:
            self.__switch_uuid = switch_uuid

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.NetworkSwitchInterface'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def port(self):
        """
        Network switch interface port number.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):

        self.__port = port

    @property
    def switch_interface_name(self):
        """
        Network switch interface name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__switch_interface_name

    @switch_interface_name.setter
    def switch_interface_name(self, switch_interface_name):
        if switch_interface_name is not None and len(switch_interface_name) > 64:
            raise ValueError("Invalid value for `switch_interface_name`, length must be less than or equal to `64`")  # noqa: E501

        self.__switch_interface_name = switch_interface_name

    @property
    def switch_interface_description(self):
        """
        Network switch interface description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__switch_interface_description

    @switch_interface_description.setter
    def switch_interface_description(self, switch_interface_description):

        self.__switch_interface_description = switch_interface_description

    @property
    def switch_interface_type(self):
        """
        Network switch interface type.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__switch_interface_type

    @switch_interface_type.setter
    def switch_interface_type(self, switch_interface_type):

        self.__switch_interface_type = switch_interface_type

    @property
    def index(self):
        """
        Network switch interface index.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__index

    @index.setter
    def index(self, index):

        self.__index = index

    @property
    def speed_in_kbps(self):
        """
        Network switch interface link speed in Kbps.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__speed_in_kbps

    @speed_in_kbps.setter
    def speed_in_kbps(self, speed_in_kbps):

        self.__speed_in_kbps = speed_in_kbps

    @property
    def mtu_in_bytes(self):
        """
        Maximum transmission unit in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__mtu_in_bytes

    @mtu_in_bytes.setter
    def mtu_in_bytes(self, mtu_in_bytes):

        self.__mtu_in_bytes = mtu_in_bytes

    @property
    def mac_address(self):
        """
        Host Mac address.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        if mac_address is not None and not re.search('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', mac_address):  # noqa: E501
            raise ValueError(r"Invalid value for `mac_address`, must be a follow pattern or equal to `/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/`")  # noqa: E501

        self.__mac_address = mac_address

    @property
    def last_change_time(self):
        """
        Timestamp when the interface state was last changed or modified.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_change_time

    @last_change_time.setter
    def last_change_time(self, last_change_time):

        self.__last_change_time = last_change_time

    @property
    def switch_management_address(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__switch_management_address

    @switch_management_address.setter
    def switch_management_address(self, switch_management_address):

        self.__switch_management_address = switch_management_address

    @property
    def attached_host_uuid(self):
        """
        UUID of the host connected to the interface.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__attached_host_uuid

    @attached_host_uuid.setter
    def attached_host_uuid(self, attached_host_uuid):
        if attached_host_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', attached_host_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `attached_host_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__attached_host_uuid = attached_host_uuid

    @property
    def attached_host_nic_uuids(self):
        """
        List of host NIC UUIDs connected to this interface.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__attached_host_nic_uuids

    @attached_host_nic_uuids.setter
    def attached_host_nic_uuids(self, attached_host_nic_uuids):

        self.__attached_host_nic_uuids = attached_host_nic_uuids

    @property
    def switch_uuid(self):
        """
        UUID of the switch.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__switch_uuid

    @switch_uuid.setter
    def switch_uuid(self, switch_uuid):
        if switch_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', switch_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `switch_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__switch_uuid = switch_uuid

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NetworkSwitchInterface, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkSwitchInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


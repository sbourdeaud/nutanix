# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DiskAdvanceConfig import DiskAdvanceConfig  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DiskStatus import DiskStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.StorageTier import StorageTier  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class Disk(ExternalizableAbstractModel):

    """A model that represents the Disk resources.

    :param cluster_name: (:attr:`cluster_name`) Cluster name of the Disk it belongs to.
    :type cluster_name: 
     max=256 chars
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) The external identifier of the cluster on which Disk will be added.
    :type cluster_ext_id: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param storage_tier: (:attr:`storage_tier`) 
    :type storage_tier: 
    
    
    :param storage_pool_ext_id: (:attr:`storage_pool_ext_id`) The external identifier of a storage pool.
    :type storage_pool_ext_id: 
    
    
    :param service_vm_id: (:attr:`service_vm_id`) The service VM ID of the node.
    :type service_vm_id: 
    
    
    :param node_ext_id: (:attr:`node_ext_id`) The external identifier of the node.
    :type node_ext_id: 
    
    
    :param cvm_ip_address: (:attr:`cvm_ip_address`) 
    :type cvm_ip_address: 
    
    
    :param node_ip_address: (:attr:`node_ip_address`) 
    :type node_ip_address: 
    
    
    :param mount_path: (:attr:`mount_path`) Represents the mount path of the Disk.
    :type mount_path: 
    
    
    :param location: (:attr:`location`) Indicates the location of the Disk in a node.
    :type location: 
    
    
    :param serial_number: (:attr:`serial_number`) Represents the Disk serial number.
    :type serial_number: 
     max=256 chars
    
    :param disk_size_bytes: (:attr:`disk_size_bytes`) Size of the Disk in bytes.
    :type disk_size_bytes: 
    
     min=524288,
    :param physical_capacity_bytes: (:attr:`physical_capacity_bytes`) Physical capacity of the Disk in bytes.
    :type physical_capacity_bytes: 
    
     min=524288,
    :param model: (:attr:`model`) Represents the Disk model.
    :type model: 
     max=256 chars
    
    :param vendor: (:attr:`vendor`) Represents the Disk vendor.
    :type vendor: 
     max=256 chars
    
    :param nvme_pcie_path: (:attr:`nvme_pcie_path`) Indicates the PCIe path of NVMe devices.
    :type nvme_pcie_path: 
    
    
    :param firmware_version: (:attr:`firmware_version`) Represents the current firmware version.
    :type firmware_version: 
     max=256 chars
    
    :param target_firmware_version: (:attr:`target_firmware_version`) Represents the target firmware version.
    :type target_firmware_version: 
     max=256 chars
    
    :param host_name: (:attr:`host_name`) Host name of the Disk to which it belongs.
    :type host_name: 
     max=256 chars
    
    :param disk_advance_config: (:attr:`disk_advance_config`) 
    :type disk_advance_config: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_name': 'str',
        'cluster_ext_id': 'str',
        'status': 'clustermgmt.v4.config.DiskStatus',
        'storage_tier': 'clustermgmt.v4.config.StorageTier',
        'storage_pool_ext_id': 'str',
        'service_vm_id': 'str',
        'node_ext_id': 'str',
        'cvm_ip_address': 'common.v1.config.IPAddress',
        'node_ip_address': 'common.v1.config.IPAddress',
        'mount_path': 'str',
        'location': 'int',
        'serial_number': 'str',
        'disk_size_bytes': 'int',
        'physical_capacity_bytes': 'int',
        'model': 'str',
        'vendor': 'str',
        'nvme_pcie_path': 'str',
        'firmware_version': 'str',
        'target_firmware_version': 'str',
        'host_name': 'str',
        'disk_advance_config': 'clustermgmt.v4.config.DiskAdvanceConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_name': 'clusterName',
        'cluster_ext_id': 'clusterExtId',
        'status': 'status',
        'storage_tier': 'storageTier',
        'storage_pool_ext_id': 'storagePoolExtId',
        'service_vm_id': 'serviceVMId',
        'node_ext_id': 'nodeExtId',
        'cvm_ip_address': 'cvmIpAddress',
        'node_ip_address': 'nodeIpAddress',
        'mount_path': 'mountPath',
        'location': 'location',
        'serial_number': 'serialNumber',
        'disk_size_bytes': 'diskSizeBytes',
        'physical_capacity_bytes': 'physicalCapacityBytes',
        'model': 'model',
        'vendor': 'vendor',
        'nvme_pcie_path': 'nvmePciePath',
        'firmware_version': 'firmwareVersion',
        'target_firmware_version': 'targetFirmwareVersion',
        'host_name': 'hostName',
        'disk_advance_config': 'diskAdvanceConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_name=None, cluster_ext_id=None, status=None, storage_tier=None, storage_pool_ext_id=None, service_vm_id=None, node_ext_id=None, cvm_ip_address=None, node_ip_address=None, mount_path=None, location=None, serial_number=None, disk_size_bytes=None, physical_capacity_bytes=None, model=None, vendor=None, nvme_pcie_path=None, firmware_version=None, target_firmware_version=None, host_name=None, disk_advance_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_name = None
        self.__cluster_ext_id = None
        self.__status = None
        self.__storage_tier = None
        self.__storage_pool_ext_id = None
        self.__service_vm_id = None
        self.__node_ext_id = None
        self.__cvm_ip_address = None
        self.__node_ip_address = None
        self.__mount_path = None
        self.__location = None
        self.__serial_number = None
        self.__disk_size_bytes = None
        self.__physical_capacity_bytes = None
        self.__model = None
        self.__vendor = None
        self.__nvme_pcie_path = None
        self.__firmware_version = None
        self.__target_firmware_version = None
        self.__host_name = None
        self.__disk_advance_config = None
        self.discriminator = None
        if cluster_name is not None:
            self.__cluster_name = cluster_name
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if status is not None:
            self.__status = status
        if storage_tier is not None:
            self.__storage_tier = storage_tier
        if storage_pool_ext_id is not None:
            self.__storage_pool_ext_id = storage_pool_ext_id
        if service_vm_id is not None:
            self.__service_vm_id = service_vm_id
        if node_ext_id is not None:
            self.__node_ext_id = node_ext_id
        if cvm_ip_address is not None:
            self.__cvm_ip_address = cvm_ip_address
        if node_ip_address is not None:
            self.__node_ip_address = node_ip_address
        if mount_path is not None:
            self.__mount_path = mount_path
        if location is not None:
            self.__location = location
        if serial_number is not None:
            self.__serial_number = serial_number
        if disk_size_bytes is not None:
            self.__disk_size_bytes = disk_size_bytes
        if physical_capacity_bytes is not None:
            self.__physical_capacity_bytes = physical_capacity_bytes
        if model is not None:
            self.__model = model
        if vendor is not None:
            self.__vendor = vendor
        if nvme_pcie_path is not None:
            self.__nvme_pcie_path = nvme_pcie_path
        if firmware_version is not None:
            self.__firmware_version = firmware_version
        if target_firmware_version is not None:
            self.__target_firmware_version = target_firmware_version
        if host_name is not None:
            self.__host_name = host_name
        if disk_advance_config is not None:
            self.__disk_advance_config = disk_advance_config

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.Disk'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_name(self):
        """
        Cluster name of the Disk it belongs to.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        if cluster_name is not None and len(cluster_name) > 256:
            raise ValueError("Invalid value for `cluster_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__cluster_name = cluster_name

    @property
    def cluster_ext_id(self):
        """
        The external identifier of the cluster on which Disk will be added.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DiskStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def storage_tier(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.StorageTier`
        """  # noqa: E501
        return self.__storage_tier

    @storage_tier.setter
    def storage_tier(self, storage_tier):

        self.__storage_tier = storage_tier

    @property
    def storage_pool_ext_id(self):
        """
        The external identifier of a storage pool.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__storage_pool_ext_id

    @storage_pool_ext_id.setter
    def storage_pool_ext_id(self, storage_pool_ext_id):
        if storage_pool_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', storage_pool_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `storage_pool_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__storage_pool_ext_id = storage_pool_ext_id

    @property
    def service_vm_id(self):
        """
        The service VM ID of the node.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__service_vm_id

    @service_vm_id.setter
    def service_vm_id(self, service_vm_id):
        if service_vm_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}::[0-9]{1,}$', service_vm_id):  # noqa: E501
            raise ValueError(r"Invalid value for `service_vm_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}::[0-9]{1,}$/`")  # noqa: E501

        self.__service_vm_id = service_vm_id

    @property
    def node_ext_id(self):
        """
        The external identifier of the node.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__node_ext_id

    @node_ext_id.setter
    def node_ext_id(self, node_ext_id):
        if node_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', node_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `node_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__node_ext_id = node_ext_id

    @property
    def cvm_ip_address(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__cvm_ip_address

    @cvm_ip_address.setter
    def cvm_ip_address(self, cvm_ip_address):

        self.__cvm_ip_address = cvm_ip_address

    @property
    def node_ip_address(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__node_ip_address

    @node_ip_address.setter
    def node_ip_address(self, node_ip_address):

        self.__node_ip_address = node_ip_address

    @property
    def mount_path(self):
        """
        Represents the mount path of the Disk.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        if mount_path is not None and not re.search('^\/home\/nutanix\/data\/stargate-storage\/disks\/[A-Z0-9]{8}$', mount_path):  # noqa: E501
            raise ValueError(r"Invalid value for `mount_path`, must be a follow pattern or equal to `/^\/home\/nutanix\/data\/stargate-storage\/disks\/[A-Z0-9]{8}$/`")  # noqa: E501

        self.__mount_path = mount_path

    @property
    def location(self):
        """
        Indicates the location of the Disk in a node.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__location

    @location.setter
    def location(self, location):

        self.__location = location

    @property
    def serial_number(self):
        """
        Represents the Disk serial number.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        if serial_number is not None and len(serial_number) > 256:
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `256`")  # noqa: E501

        self.__serial_number = serial_number

    @property
    def disk_size_bytes(self):
        """
        Size of the Disk in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__disk_size_bytes

    @disk_size_bytes.setter
    def disk_size_bytes(self, disk_size_bytes):
        if disk_size_bytes is not None and disk_size_bytes < 524288:  # noqa: E501
            raise ValueError("Invalid value for `disk_size_bytes`, must be a value greater than or equal to `524288`")  # noqa: E501

        self.__disk_size_bytes = disk_size_bytes

    @property
    def physical_capacity_bytes(self):
        """
        Physical capacity of the Disk in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__physical_capacity_bytes

    @physical_capacity_bytes.setter
    def physical_capacity_bytes(self, physical_capacity_bytes):
        if physical_capacity_bytes is not None and physical_capacity_bytes < 524288:  # noqa: E501
            raise ValueError("Invalid value for `physical_capacity_bytes`, must be a value greater than or equal to `524288`")  # noqa: E501

        self.__physical_capacity_bytes = physical_capacity_bytes

    @property
    def model(self):
        """
        Represents the Disk model.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__model

    @model.setter
    def model(self, model):
        if model is not None and len(model) > 256:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `256`")  # noqa: E501

        self.__model = model

    @property
    def vendor(self):
        """
        Represents the Disk vendor.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vendor

    @vendor.setter
    def vendor(self, vendor):
        if vendor is not None and len(vendor) > 256:
            raise ValueError("Invalid value for `vendor`, length must be less than or equal to `256`")  # noqa: E501

        self.__vendor = vendor

    @property
    def nvme_pcie_path(self):
        """
        Indicates the PCIe path of NVMe devices.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__nvme_pcie_path

    @nvme_pcie_path.setter
    def nvme_pcie_path(self, nvme_pcie_path):

        self.__nvme_pcie_path = nvme_pcie_path

    @property
    def firmware_version(self):
        """
        Represents the current firmware version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        if firmware_version is not None and len(firmware_version) > 256:
            raise ValueError("Invalid value for `firmware_version`, length must be less than or equal to `256`")  # noqa: E501

        self.__firmware_version = firmware_version

    @property
    def target_firmware_version(self):
        """
        Represents the target firmware version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_firmware_version

    @target_firmware_version.setter
    def target_firmware_version(self, target_firmware_version):
        if target_firmware_version is not None and len(target_firmware_version) > 256:
            raise ValueError("Invalid value for `target_firmware_version`, length must be less than or equal to `256`")  # noqa: E501

        self.__target_firmware_version = target_firmware_version

    @property
    def host_name(self):
        """
        Host name of the Disk to which it belongs.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__host_name

    @host_name.setter
    def host_name(self, host_name):
        if host_name is not None and len(host_name) > 256:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__host_name = host_name

    @property
    def disk_advance_config(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.DiskAdvanceConfig`
        """  # noqa: E501
        return self.__disk_advance_config

    @disk_advance_config.setter
    def disk_advance_config(self, disk_advance_config):

        self.__disk_advance_config = disk_advance_config

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Disk, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


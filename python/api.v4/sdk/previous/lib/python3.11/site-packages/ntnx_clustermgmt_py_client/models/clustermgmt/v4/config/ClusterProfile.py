# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ConfigType import ConfigType  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ManagedCluster import ManagedCluster  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PulseStatus import PulseStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.RsyslogServer import RsyslogServer  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SmtpServerRef import SmtpServerRef  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SnmpConfig import SnmpConfig  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN import IPAddressOrFQDN  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class ClusterProfile(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) Name of the cluster profile
    :type name: required
     max=64 chars
    
    :param description: (:attr:`description`) Detailed description of a cluster profile
    :type description: 
     max=1000 chars
    
    :param create_time: (:attr:`create_time`) Creation time of cluster profile
    :type create_time: 
    
    
    :param last_update_time: (:attr:`last_update_time`) Last updated time of a cluster profile
    :type last_update_time: 
    
    
    :param created_by: (:attr:`created_by`) Details of the user who created this cluster profile
    :type created_by: 
    
    
    :param last_updated_by: (:attr:`last_updated_by`) Details of the user who has recently updated this cluster profile
    :type last_updated_by: 
    
    
    :param cluster_count: (:attr:`cluster_count`) Count of clusters associated to a cluster profile
    :type cluster_count: 
    
    
    :param drifted_cluster_count: (:attr:`drifted_cluster_count`) The count indicates the number of clusters associated with a cluster profile that have experienced drift. Drifted clusters are those in which the configuration differs from the defined profile. For example, the NTP server has different values on a cluster as compared to the profile it is attached.
    :type drifted_cluster_count: 
    
    
    :param clusters: (:attr:`clusters`) Managed cluster information
    :type clusters: 
    
    
    :param allowed_overrides: (:attr:`allowed_overrides`) Indicates if a configuration of attached clusters can be skipped from monitoring.
    :type allowed_overrides: 
    
    
    :param name_server_ip_list: (:attr:`name_server_ip_list`) List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    :type name_server_ip_list: 
    
    
    :param ntp_server_ip_list: (:attr:`ntp_server_ip_list`) List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    :type ntp_server_ip_list: 
    
    
    :param smtp_server: (:attr:`smtp_server`) 
    :type smtp_server: 
    
    
    :param nfs_subnet_whitelist: (:attr:`nfs_subnet_whitelist`) NFS subnet whitelist addresses. This is part of payload for cluster update operation only.
    :type nfs_subnet_whitelist: 
    
    
    :param snmp_config: (:attr:`snmp_config`) 
    :type snmp_config: 
    
    
    :param rsyslog_server_list: (:attr:`rsyslog_server_list`) RSYSLOG Server.
    :type rsyslog_server_list: 
    
    
    :param pulse_status: (:attr:`pulse_status`) 
    :type pulse_status: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'create_time': 'datetime',
        'last_update_time': 'datetime',
        'created_by': 'str',
        'last_updated_by': 'str',
        'cluster_count': 'int',
        'drifted_cluster_count': 'int',
        'clusters': 'list[clustermgmt.v4.config.ManagedCluster]',
        'allowed_overrides': 'list[clustermgmt.v4.config.ConfigType]',
        'name_server_ip_list': 'list[common.v1.config.IPAddress]',
        'ntp_server_ip_list': 'list[common.v1.config.IPAddressOrFQDN]',
        'smtp_server': 'clustermgmt.v4.config.SmtpServerRef',
        'nfs_subnet_whitelist': 'list[str]',
        'snmp_config': 'clustermgmt.v4.config.SnmpConfig',
        'rsyslog_server_list': 'list[clustermgmt.v4.config.RsyslogServer]',
        'pulse_status': 'clustermgmt.v4.config.PulseStatus',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'create_time': 'createTime',
        'last_update_time': 'lastUpdateTime',
        'created_by': 'createdBy',
        'last_updated_by': 'lastUpdatedBy',
        'cluster_count': 'clusterCount',
        'drifted_cluster_count': 'driftedClusterCount',
        'clusters': 'clusters',
        'allowed_overrides': 'allowedOverrides',
        'name_server_ip_list': 'nameServerIpList',
        'ntp_server_ip_list': 'ntpServerIpList',
        'smtp_server': 'smtpServer',
        'nfs_subnet_whitelist': 'nfsSubnetWhitelist',
        'snmp_config': 'snmpConfig',
        'rsyslog_server_list': 'rsyslogServerList',
        'pulse_status': 'pulseStatus',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, create_time=None, last_update_time=None, created_by=None, last_updated_by=None, cluster_count=None, drifted_cluster_count=None, clusters=None, allowed_overrides=None, name_server_ip_list=None, ntp_server_ip_list=None, smtp_server=None, nfs_subnet_whitelist=None, snmp_config=None, rsyslog_server_list=None, pulse_status=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__create_time = None
        self.__last_update_time = None
        self.__created_by = None
        self.__last_updated_by = None
        self.__cluster_count = None
        self.__drifted_cluster_count = None
        self.__clusters = None
        self.__allowed_overrides = None
        self.__name_server_ip_list = None
        self.__ntp_server_ip_list = None
        self.__smtp_server = None
        self.__nfs_subnet_whitelist = None
        self.__snmp_config = None
        self.__rsyslog_server_list = None
        self.__pulse_status = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if create_time is not None:
            self.__create_time = create_time
        if last_update_time is not None:
            self.__last_update_time = last_update_time
        if created_by is not None:
            self.__created_by = created_by
        if last_updated_by is not None:
            self.__last_updated_by = last_updated_by
        if cluster_count is not None:
            self.__cluster_count = cluster_count
        if drifted_cluster_count is not None:
            self.__drifted_cluster_count = drifted_cluster_count
        if clusters is not None:
            self.__clusters = clusters
        if allowed_overrides is not None:
            self.__allowed_overrides = allowed_overrides
        if name_server_ip_list is not None:
            self.__name_server_ip_list = name_server_ip_list
        if ntp_server_ip_list is not None:
            self.__ntp_server_ip_list = ntp_server_ip_list
        if smtp_server is not None:
            self.__smtp_server = smtp_server
        if nfs_subnet_whitelist is not None:
            self.__nfs_subnet_whitelist = nfs_subnet_whitelist
        if snmp_config is not None:
            self.__snmp_config = snmp_config
        if rsyslog_server_list is not None:
            self.__rsyslog_server_list = rsyslog_server_list
        if pulse_status is not None:
            self.__pulse_status = pulse_status

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ClusterProfile'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the cluster profile

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and not re.search('^[A-Za-z0-9._-]+$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9._-]+$/`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Detailed description of a cluster profile

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def create_time(self):
        """
        Creation time of cluster profile

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def last_update_time(self):
        """
        Last updated time of a cluster profile

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):

        self.__last_update_time = last_update_time

    @property
    def created_by(self):
        """
        Details of the user who created this cluster profile

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):
        if created_by is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', created_by):  # noqa: E501
            raise ValueError(r"Invalid value for `created_by`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__created_by = created_by

    @property
    def last_updated_by(self):
        """
        Details of the user who has recently updated this cluster profile

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        if last_updated_by is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', last_updated_by):  # noqa: E501
            raise ValueError(r"Invalid value for `last_updated_by`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__last_updated_by = last_updated_by

    @property
    def cluster_count(self):
        """
        Count of clusters associated to a cluster profile

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):

        self.__cluster_count = cluster_count

    @property
    def drifted_cluster_count(self):
        """
        The count indicates the number of clusters associated with a cluster profile that have experienced drift. Drifted clusters are those in which the configuration differs from the defined profile. For example, the NTP server has different values on a cluster as compared to the profile it is attached.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__drifted_cluster_count

    @drifted_cluster_count.setter
    def drifted_cluster_count(self, drifted_cluster_count):

        self.__drifted_cluster_count = drifted_cluster_count

    @property
    def clusters(self):
        """
        Managed cluster information

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ManagedCluster` ]
        """  # noqa: E501
        return self.__clusters

    @clusters.setter
    def clusters(self, clusters):

        self.__clusters = clusters

    @property
    def allowed_overrides(self):
        """
        Indicates if a configuration of attached clusters can be skipped from monitoring.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ConfigType` ]
        """  # noqa: E501
        return self.__allowed_overrides

    @allowed_overrides.setter
    def allowed_overrides(self, allowed_overrides):

        self.__allowed_overrides = allowed_overrides

    @property
    def name_server_ip_list(self):
        """
        List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__name_server_ip_list

    @name_server_ip_list.setter
    def name_server_ip_list(self, name_server_ip_list):

        self.__name_server_ip_list = name_server_ip_list

    @property
    def ntp_server_ip_list(self):
        """
        List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN` ]
        """  # noqa: E501
        return self.__ntp_server_ip_list

    @ntp_server_ip_list.setter
    def ntp_server_ip_list(self, ntp_server_ip_list):

        self.__ntp_server_ip_list = ntp_server_ip_list

    @property
    def smtp_server(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SmtpServerRef`
        """  # noqa: E501
        return self.__smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):

        self.__smtp_server = smtp_server

    @property
    def nfs_subnet_whitelist(self):
        """
        NFS subnet whitelist addresses. This is part of payload for cluster update operation only.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__nfs_subnet_whitelist

    @nfs_subnet_whitelist.setter
    def nfs_subnet_whitelist(self, nfs_subnet_whitelist):

        self.__nfs_subnet_whitelist = nfs_subnet_whitelist

    @property
    def snmp_config(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SnmpConfig`
        """  # noqa: E501
        return self.__snmp_config

    @snmp_config.setter
    def snmp_config(self, snmp_config):

        self.__snmp_config = snmp_config

    @property
    def rsyslog_server_list(self):
        """
        RSYSLOG Server.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.RsyslogServer` ]
        """  # noqa: E501
        return self.__rsyslog_server_list

    @rsyslog_server_list.setter
    def rsyslog_server_list(self, rsyslog_server_list):

        self.__rsyslog_server_list = rsyslog_server_list

    @property
    def pulse_status(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PulseStatus`
        """  # noqa: E501
        return self.__pulse_status

    @pulse_status.setter
    def pulse_status(self, pulse_status):

        self.__pulse_status = pulse_status

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterProfile, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.CacheDeduplication import CacheDeduplication  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ErasureCodeStatus import ErasureCodeStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.OnDiskDedup import OnDiskDedup  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.StorageContainer import StorageContainer  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN import IPAddressOrFQDN  # noqa: F401,E501

class StorageContainerProjection(StorageContainer):

    """

    :param container_ext_id: (:attr:`container_ext_id`) The external identifier of the Storage Container.
    :type container_ext_id: 
    
    
    :param owner_ext_id: (:attr:`owner_ext_id`) The external identifier of the owner.
    :type owner_ext_id: 
    
    
    :param name: (:attr:`name`) Name of the Storage Container. Note that the name of Storage Container should be unique in every cluster.
    :type name: required
     max=75 chars
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) The external identifier of the cluster owning the Storage Container.
    :type cluster_ext_id: 
    
    
    :param storage_pool_ext_id: (:attr:`storage_pool_ext_id`) The external identifier  of the Storage Pool owning the Storage Container instance.
    :type storage_pool_ext_id: 
    
    
    :param is_marked_for_removal: (:attr:`is_marked_for_removal`) Indicates whether the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
    :type is_marked_for_removal: 
    
    
    :param max_capacity_bytes: (:attr:`max_capacity_bytes`) Maximum physical capacity of the Storage Container in bytes.
    :type max_capacity_bytes: 
    
    
    :param logical_explicit_reserved_capacity_bytes: (:attr:`logical_explicit_reserved_capacity_bytes`) Total reserved size (in bytes) of the Storage Container (set by Admin). This also includes the replication factor of the Storage Container. The actual reserved capacity of the Storage Container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
    :type logical_explicit_reserved_capacity_bytes: 
    
    
    :param logical_implicit_reserved_capacity_bytes: (:attr:`logical_implicit_reserved_capacity_bytes`) This is the sum of the  of reservations provisioned on all vDisks in the Storage Container. The actual reserved capacity of the Storage Container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
    :type logical_implicit_reserved_capacity_bytes: 
    
    
    :param logical_advertised_capacity_bytes: (:attr:`logical_advertised_capacity_bytes`) Maximum capacity of the Storage Container as defined by the user.
    :type logical_advertised_capacity_bytes: 
    
    
    :param replication_factor: (:attr:`replication_factor`) Replication factor of the Storage Container.
    :type replication_factor: 
    
    
    :param nfs_whitelist_address: (:attr:`nfs_whitelist_address`) List of NFS addresses that need to be whitelisted.
    :type nfs_whitelist_address: 
    
    
    :param is_nfs_whitelist_inherited: (:attr:`is_nfs_whitelist_inherited`) Indicates whether the NFS whitelist is inherited from the global configuration.
    :type is_nfs_whitelist_inherited: 
    
    
    :param erasure_code: (:attr:`erasure_code`) 
    :type erasure_code: 
    
    
    :param is_inline_ec_enabled: (:attr:`is_inline_ec_enabled`) Indicates whether data written to this Storage Container should be inline erasure-coded or not. This field is only considered if ErasureCoding is enabled.
    :type is_inline_ec_enabled: 
    
    
    :param has_higher_ec_fault_domain_preference: (:attr:`has_higher_ec_fault_domain_preference`) Indicates whether to prefer a higher Erasure Code fault domain.
    :type has_higher_ec_fault_domain_preference: 
    
    
    :param erasure_code_delay_secs: (:attr:`erasure_code_delay_secs`) Delay in performing Erasure Code for the current Storage Container instance.
    :type erasure_code_delay_secs: 
    
    
    :param cache_deduplication: (:attr:`cache_deduplication`) 
    :type cache_deduplication: 
    
    
    :param on_disk_dedup: (:attr:`on_disk_dedup`) 
    :type on_disk_dedup: 
    
    
    :param is_compression_enabled: (:attr:`is_compression_enabled`) Indicates whether the compression is enabled for the Storage Container.
    :type is_compression_enabled: 
    
    
    :param compression_delay_secs: (:attr:`compression_delay_secs`) The compression delay in seconds.
    :type compression_delay_secs: 
    
    
    :param is_internal: (:attr:`is_internal`) Indicates whether the Storage Container is internal and is managed by Nutanix.
    :type is_internal: 
    
    
    :param is_software_encryption_enabled: (:attr:`is_software_encryption_enabled`) Indicates whether the Storage Container instance has software encryption enabled.
    :type is_software_encryption_enabled: 
    
    
    :param is_encrypted: (:attr:`is_encrypted`) Indicates whether the Storage Container is encrypted or not.
    :type is_encrypted: 
    
    
    :param affinity_host_ext_id: (:attr:`affinity_host_ext_id`) Affinity host external identifier for RF-1 Storage Container.
    :type affinity_host_ext_id: 
    
    
    :param cluster_name: (:attr:`cluster_name`) The corresponding name of the cluster owning the Storage Container instance.
    :type cluster_name: 
     max=256 chars
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'container_ext_id': 'str',
        'owner_ext_id': 'str',
        'name': 'str',
        'cluster_ext_id': 'str',
        'storage_pool_ext_id': 'str',
        'is_marked_for_removal': 'bool',
        'max_capacity_bytes': 'int',
        'logical_explicit_reserved_capacity_bytes': 'int',
        'logical_implicit_reserved_capacity_bytes': 'int',
        'logical_advertised_capacity_bytes': 'int',
        'replication_factor': 'int',
        'nfs_whitelist_address': 'list[common.v1.config.IPAddressOrFQDN]',
        'is_nfs_whitelist_inherited': 'bool',
        'erasure_code': 'clustermgmt.v4.config.ErasureCodeStatus',
        'is_inline_ec_enabled': 'bool',
        'has_higher_ec_fault_domain_preference': 'bool',
        'erasure_code_delay_secs': 'int',
        'cache_deduplication': 'clustermgmt.v4.config.CacheDeduplication',
        'on_disk_dedup': 'clustermgmt.v4.config.OnDiskDedup',
        'is_compression_enabled': 'bool',
        'compression_delay_secs': 'int',
        'is_internal': 'bool',
        'is_software_encryption_enabled': 'bool',
        'is_encrypted': 'bool',
        'affinity_host_ext_id': 'str',
        'cluster_name': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'container_ext_id': 'containerExtId',
        'owner_ext_id': 'ownerExtId',
        'name': 'name',
        'cluster_ext_id': 'clusterExtId',
        'storage_pool_ext_id': 'storagePoolExtId',
        'is_marked_for_removal': 'isMarkedForRemoval',
        'max_capacity_bytes': 'maxCapacityBytes',
        'logical_explicit_reserved_capacity_bytes': 'logicalExplicitReservedCapacityBytes',
        'logical_implicit_reserved_capacity_bytes': 'logicalImplicitReservedCapacityBytes',
        'logical_advertised_capacity_bytes': 'logicalAdvertisedCapacityBytes',
        'replication_factor': 'replicationFactor',
        'nfs_whitelist_address': 'nfsWhitelistAddress',
        'is_nfs_whitelist_inherited': 'isNfsWhitelistInherited',
        'erasure_code': 'erasureCode',
        'is_inline_ec_enabled': 'isInlineEcEnabled',
        'has_higher_ec_fault_domain_preference': 'hasHigherEcFaultDomainPreference',
        'erasure_code_delay_secs': 'erasureCodeDelaySecs',
        'cache_deduplication': 'cacheDeduplication',
        'on_disk_dedup': 'onDiskDedup',
        'is_compression_enabled': 'isCompressionEnabled',
        'compression_delay_secs': 'compressionDelaySecs',
        'is_internal': 'isInternal',
        'is_software_encryption_enabled': 'isSoftwareEncryptionEnabled',
        'is_encrypted': 'isEncrypted',
        'affinity_host_ext_id': 'affinityHostExtId',
        'cluster_name': 'clusterName',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, container_ext_id=None, owner_ext_id=None, name=None, cluster_ext_id=None, storage_pool_ext_id=None, is_marked_for_removal=None, max_capacity_bytes=None, logical_explicit_reserved_capacity_bytes=None, logical_implicit_reserved_capacity_bytes=None, logical_advertised_capacity_bytes=None, replication_factor=None, nfs_whitelist_address=None, is_nfs_whitelist_inherited=None, erasure_code=None, is_inline_ec_enabled=None, has_higher_ec_fault_domain_preference=None, erasure_code_delay_secs=None, cache_deduplication=None, on_disk_dedup=None, is_compression_enabled=None, compression_delay_secs=None, is_internal=None, is_software_encryption_enabled=None, is_encrypted=None, affinity_host_ext_id=None, cluster_name=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        StorageContainer.__init__(self, container_ext_id, owner_ext_id, name, cluster_ext_id, storage_pool_ext_id, is_marked_for_removal, max_capacity_bytes, logical_explicit_reserved_capacity_bytes, logical_implicit_reserved_capacity_bytes, logical_advertised_capacity_bytes, replication_factor, nfs_whitelist_address, is_nfs_whitelist_inherited, erasure_code, is_inline_ec_enabled, has_higher_ec_fault_domain_preference, erasure_code_delay_secs, cache_deduplication, on_disk_dedup, is_compression_enabled, compression_delay_secs, is_internal, is_software_encryption_enabled, is_encrypted, affinity_host_ext_id, cluster_name, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.StorageContainerProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(StorageContainerProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageContainerProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


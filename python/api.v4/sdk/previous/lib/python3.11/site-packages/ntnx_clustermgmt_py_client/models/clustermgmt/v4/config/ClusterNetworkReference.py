# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.BackplaneNetworkParams import BackplaneNetworkParams  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HttpProxyConfig import HttpProxyConfig  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HttpProxyWhiteListConfig import HttpProxyWhiteListConfig  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.KeyManagementServerType import KeyManagementServerType  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ManagementServerRef import ManagementServerRef  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SmtpServerRef import SmtpServerRef  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN import IPAddressOrFQDN  # noqa: F401,E501

class ClusterNetworkReference(object):

    """Network details of a cluster.

    :param external_address: (:attr:`external_address`) 
    :type external_address: 
    
    
    :param external_data_service_ip: (:attr:`external_data_service_ip`) 
    :type external_data_service_ip: 
    
    
    :param external_subnet: (:attr:`external_subnet`) Cluster external subnet address.
    :type external_subnet: 
    
    
    :param internal_subnet: (:attr:`internal_subnet`) Cluster internal subnet address.
    :type internal_subnet: 
    
    
    :param nfs_subnet_whitelist: (:attr:`nfs_subnet_whitelist`) NFS subnet whitelist addresses. This is part of payload for cluster update operation only.
    :type nfs_subnet_whitelist: 
    
    
    :param name_server_ip_list: (:attr:`name_server_ip_list`) List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    :type name_server_ip_list: 
    
    
    :param ntp_server_ip_list: (:attr:`ntp_server_ip_list`) List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    :type ntp_server_ip_list: 
    
    
    :param smtp_server: (:attr:`smtp_server`) 
    :type smtp_server: 
    
    
    :param masquerading_ip: (:attr:`masquerading_ip`) 
    :type masquerading_ip: 
    
    
    :param masquerading_port: (:attr:`masquerading_port`) The port to connect to the cluster when using masquerading IP.
    :type masquerading_port: 
    
    
    :param management_server: (:attr:`management_server`) 
    :type management_server: 
    
    
    :param fqdn: (:attr:`fqdn`) Cluster fully qualified domain name. This is part of payload for cluster update operation only.
    :type fqdn: 
    
    
    :param key_management_server_type: (:attr:`key_management_server_type`) 
    :type key_management_server_type: 
    
    
    :param backplane: (:attr:`backplane`) 
    :type backplane: 
    
    
    :param http_proxy_list: (:attr:`http_proxy_list`) List of HTTP Proxy server configuration needed to access a cluster which is hosted behind a HTTP Proxy to not reveal its identity.
    :type http_proxy_list: 
    
    
    :param http_proxy_white_list: (:attr:`http_proxy_white_list`) Targets HTTP traffic to which is exempted from going through the configured HTTP Proxy.
    :type http_proxy_white_list: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'external_address': 'common.v1.config.IPAddress',
        'external_data_service_ip': 'common.v1.config.IPAddress',
        'external_subnet': 'str',
        'internal_subnet': 'str',
        'nfs_subnet_whitelist': 'list[str]',
        'name_server_ip_list': 'list[common.v1.config.IPAddressOrFQDN]',
        'ntp_server_ip_list': 'list[common.v1.config.IPAddressOrFQDN]',
        'smtp_server': 'clustermgmt.v4.config.SmtpServerRef',
        'masquerading_ip': 'common.v1.config.IPAddress',
        'masquerading_port': 'int',
        'management_server': 'clustermgmt.v4.config.ManagementServerRef',
        'fqdn': 'str',
        'key_management_server_type': 'clustermgmt.v4.config.KeyManagementServerType',
        'backplane': 'clustermgmt.v4.config.BackplaneNetworkParams',
        'http_proxy_list': 'list[clustermgmt.v4.config.HttpProxyConfig]',
        'http_proxy_white_list': 'list[clustermgmt.v4.config.HttpProxyWhiteListConfig]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'external_address': 'externalAddress',
        'external_data_service_ip': 'externalDataServiceIp',
        'external_subnet': 'externalSubnet',
        'internal_subnet': 'internalSubnet',
        'nfs_subnet_whitelist': 'nfsSubnetWhitelist',
        'name_server_ip_list': 'nameServerIpList',
        'ntp_server_ip_list': 'ntpServerIpList',
        'smtp_server': 'smtpServer',
        'masquerading_ip': 'masqueradingIp',
        'masquerading_port': 'masqueradingPort',
        'management_server': 'managementServer',
        'fqdn': 'fqdn',
        'key_management_server_type': 'keyManagementServerType',
        'backplane': 'backplane',
        'http_proxy_list': 'httpProxyList',
        'http_proxy_white_list': 'httpProxyWhiteList',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, external_address=None, external_data_service_ip=None, external_subnet=None, internal_subnet=None, nfs_subnet_whitelist=None, name_server_ip_list=None, ntp_server_ip_list=None, smtp_server=None, masquerading_ip=None, masquerading_port=None, management_server=None, fqdn=None, key_management_server_type=None, backplane=None, http_proxy_list=None, http_proxy_white_list=None, *args, **kwargs):  # noqa: E501
        self.__external_address = None
        self.__external_data_service_ip = None
        self.__external_subnet = None
        self.__internal_subnet = None
        self.__nfs_subnet_whitelist = None
        self.__name_server_ip_list = None
        self.__ntp_server_ip_list = None
        self.__smtp_server = None
        self.__masquerading_ip = None
        self.__masquerading_port = None
        self.__management_server = None
        self.__fqdn = None
        self.__key_management_server_type = None
        self.__backplane = None
        self.__http_proxy_list = None
        self.__http_proxy_white_list = None
        self.discriminator = None
        if external_address is not None:
            self.__external_address = external_address
        if external_data_service_ip is not None:
            self.__external_data_service_ip = external_data_service_ip
        if external_subnet is not None:
            self.__external_subnet = external_subnet
        if internal_subnet is not None:
            self.__internal_subnet = internal_subnet
        if nfs_subnet_whitelist is not None:
            self.__nfs_subnet_whitelist = nfs_subnet_whitelist
        if name_server_ip_list is not None:
            self.__name_server_ip_list = name_server_ip_list
        if ntp_server_ip_list is not None:
            self.__ntp_server_ip_list = ntp_server_ip_list
        if smtp_server is not None:
            self.__smtp_server = smtp_server
        if masquerading_ip is not None:
            self.__masquerading_ip = masquerading_ip
        if masquerading_port is not None:
            self.__masquerading_port = masquerading_port
        if management_server is not None:
            self.__management_server = management_server
        if fqdn is not None:
            self.__fqdn = fqdn
        if key_management_server_type is not None:
            self.__key_management_server_type = key_management_server_type
        if backplane is not None:
            self.__backplane = backplane
        if http_proxy_list is not None:
            self.__http_proxy_list = http_proxy_list
        if http_proxy_white_list is not None:
            self.__http_proxy_white_list = http_proxy_white_list
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ClusterNetworkReference'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def external_address(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__external_address

    @external_address.setter
    def external_address(self, external_address):

        self.__external_address = external_address

    @property
    def external_data_service_ip(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__external_data_service_ip

    @external_data_service_ip.setter
    def external_data_service_ip(self, external_data_service_ip):

        self.__external_data_service_ip = external_data_service_ip

    @property
    def external_subnet(self):
        """
        Cluster external subnet address.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__external_subnet

    @external_subnet.setter
    def external_subnet(self, external_subnet):

        self.__external_subnet = external_subnet

    @property
    def internal_subnet(self):
        """
        Cluster internal subnet address.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__internal_subnet

    @internal_subnet.setter
    def internal_subnet(self, internal_subnet):

        self.__internal_subnet = internal_subnet

    @property
    def nfs_subnet_whitelist(self):
        """
        NFS subnet whitelist addresses. This is part of payload for cluster update operation only.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__nfs_subnet_whitelist

    @nfs_subnet_whitelist.setter
    def nfs_subnet_whitelist(self, nfs_subnet_whitelist):

        self.__nfs_subnet_whitelist = nfs_subnet_whitelist

    @property
    def name_server_ip_list(self):
        """
        List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN` ]
        """  # noqa: E501
        return self.__name_server_ip_list

    @name_server_ip_list.setter
    def name_server_ip_list(self, name_server_ip_list):

        self.__name_server_ip_list = name_server_ip_list

    @property
    def ntp_server_ip_list(self):
        """
        List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddressOrFQDN` ]
        """  # noqa: E501
        return self.__ntp_server_ip_list

    @ntp_server_ip_list.setter
    def ntp_server_ip_list(self, ntp_server_ip_list):

        self.__ntp_server_ip_list = ntp_server_ip_list

    @property
    def smtp_server(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SmtpServerRef`
        """  # noqa: E501
        return self.__smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):

        self.__smtp_server = smtp_server

    @property
    def masquerading_ip(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress`
        """  # noqa: E501
        return self.__masquerading_ip

    @masquerading_ip.setter
    def masquerading_ip(self, masquerading_ip):

        self.__masquerading_ip = masquerading_ip

    @property
    def masquerading_port(self):
        """
        The port to connect to the cluster when using masquerading IP.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__masquerading_port

    @masquerading_port.setter
    def masquerading_port(self, masquerading_port):

        self.__masquerading_port = masquerading_port

    @property
    def management_server(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ManagementServerRef`
        """  # noqa: E501
        return self.__management_server

    @management_server.setter
    def management_server(self, management_server):

        self.__management_server = management_server

    @property
    def fqdn(self):
        """
        Cluster fully qualified domain name. This is part of payload for cluster update operation only.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        if fqdn is not None and not re.search('^([a-z0-9]+(-[a-z0-9]+)*\\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$', fqdn):  # noqa: E501
            raise ValueError(r"Invalid value for `fqdn`, must be a follow pattern or equal to `/^([a-z0-9]+(-[a-z0-9]+)*\\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$/`")  # noqa: E501

        self.__fqdn = fqdn

    @property
    def key_management_server_type(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.KeyManagementServerType`
        """  # noqa: E501
        return self.__key_management_server_type

    @key_management_server_type.setter
    def key_management_server_type(self, key_management_server_type):

        self.__key_management_server_type = key_management_server_type

    @property
    def backplane(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.BackplaneNetworkParams`
        """  # noqa: E501
        return self.__backplane

    @backplane.setter
    def backplane(self, backplane):

        self.__backplane = backplane

    @property
    def http_proxy_list(self):
        """
        List of HTTP Proxy server configuration needed to access a cluster which is hosted behind a HTTP Proxy to not reveal its identity.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HttpProxyConfig` ]
        """  # noqa: E501
        return self.__http_proxy_list

    @http_proxy_list.setter
    def http_proxy_list(self, http_proxy_list):

        self.__http_proxy_list = http_proxy_list

    @property
    def http_proxy_white_list(self):
        """
        Targets HTTP traffic to which is exempted from going through the configured HTTP Proxy.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HttpProxyWhiteListConfig` ]
        """  # noqa: E501
        return self.__http_proxy_white_list

    @http_proxy_white_list.setter
    def http_proxy_white_list(self, http_proxy_white_list):

        self.__http_proxy_white_list = http_proxy_white_list

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterNetworkReference, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNetworkReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


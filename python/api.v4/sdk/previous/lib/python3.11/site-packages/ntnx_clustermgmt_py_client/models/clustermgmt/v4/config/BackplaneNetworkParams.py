# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.common.v1.config.IPv4Address import IPv4Address  # noqa: F401,E501

class BackplaneNetworkParams(object):

    """Params associated to the backplane network segmentation. This is part of payload for cluster create operation only.

    :param is_segmentation_enabled: (:attr:`is_segmentation_enabled`) Flag to indicate if the backplane segmentation needs to be enabled or not.
    :type is_segmentation_enabled: 
    
    
    :param vlan_tag: (:attr:`vlan_tag`) VLAN Id tagged to the backplane network on the cluster. This is part of cluster create payload.
    :type vlan_tag: 
    
    
    :param subnet: (:attr:`subnet`) 
    :type subnet: 
    
    
    :param netmask: (:attr:`netmask`) 
    :type netmask: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_segmentation_enabled': 'bool',
        'vlan_tag': 'int',
        'subnet': 'common.v1.config.IPv4Address',
        'netmask': 'common.v1.config.IPv4Address',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_segmentation_enabled': 'isSegmentationEnabled',
        'vlan_tag': 'vlanTag',
        'subnet': 'subnet',
        'netmask': 'netmask',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_segmentation_enabled=None, vlan_tag=None, subnet=None, netmask=None, *args, **kwargs):  # noqa: E501
        self.__is_segmentation_enabled = None
        self.__vlan_tag = None
        self.__subnet = None
        self.__netmask = None
        self.discriminator = None
        if is_segmentation_enabled is not None:
            self.__is_segmentation_enabled = is_segmentation_enabled
        if vlan_tag is not None:
            self.__vlan_tag = vlan_tag
        if subnet is not None:
            self.__subnet = subnet
        if netmask is not None:
            self.__netmask = netmask
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.BackplaneNetworkParams'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def is_segmentation_enabled(self):
        """
        Flag to indicate if the backplane segmentation needs to be enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_segmentation_enabled

    @is_segmentation_enabled.setter
    def is_segmentation_enabled(self, is_segmentation_enabled):

        self.__is_segmentation_enabled = is_segmentation_enabled

    @property
    def vlan_tag(self):
        """
        VLAN Id tagged to the backplane network on the cluster. This is part of cluster create payload.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__vlan_tag

    @vlan_tag.setter
    def vlan_tag(self, vlan_tag):

        self.__vlan_tag = vlan_tag

    @property
    def subnet(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__subnet

    @subnet.setter
    def subnet(self, subnet):

        self.__subnet = subnet

    @property
    def netmask(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__netmask

    @netmask.setter
    def netmask(self, netmask):

        self.__netmask = netmask

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(BackplaneNetworkParams, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackplaneNetworkParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


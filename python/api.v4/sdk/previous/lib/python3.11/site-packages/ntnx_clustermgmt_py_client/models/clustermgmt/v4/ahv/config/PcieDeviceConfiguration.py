# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class PcieDeviceConfiguration(object):

    """PCIe device configuration

    :param vendor_id: (:attr:`vendor_id`) Vendor ID
    :type vendor_id: 
    
    
    :param device_id: (:attr:`device_id`) Device ID
    :type device_id: 
    
    
    :param sub_system_vendor_id: (:attr:`sub_system_vendor_id`) Subsystem vendor ID
    :type sub_system_vendor_id: 
    
    
    :param sub_system_id: (:attr:`sub_system_id`) Subsystem (device) ID
    :type sub_system_id: 
    
    
    :param class_id: (:attr:`class_id`) Class code
    :type class_id: 
    
    
    :param sub_class_id: (:attr:`sub_class_id`) Subsystem class ID
    :type sub_class_id: 
    
    
    :param prog_i_face: (:attr:`prog_i_face`) Programming interface ID
    :type prog_i_face: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vendor_id': 'int',
        'device_id': 'int',
        'sub_system_vendor_id': 'int',
        'sub_system_id': 'int',
        'class_id': 'int',
        'sub_class_id': 'int',
        'prog_i_face': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vendor_id': 'vendorId',
        'device_id': 'deviceId',
        'sub_system_vendor_id': 'subSystemVendorId',
        'sub_system_id': 'subSystemId',
        'class_id': 'classId',
        'sub_class_id': 'subClassId',
        'prog_i_face': 'progIFace',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vendor_id=None, device_id=None, sub_system_vendor_id=None, sub_system_id=None, class_id=None, sub_class_id=None, prog_i_face=None, *args, **kwargs):  # noqa: E501
        self.__vendor_id = None
        self.__device_id = None
        self.__sub_system_vendor_id = None
        self.__sub_system_id = None
        self.__class_id = None
        self.__sub_class_id = None
        self.__prog_i_face = None
        self.discriminator = None
        if vendor_id is not None:
            self.__vendor_id = vendor_id
        if device_id is not None:
            self.__device_id = device_id
        if sub_system_vendor_id is not None:
            self.__sub_system_vendor_id = sub_system_vendor_id
        if sub_system_id is not None:
            self.__sub_system_id = sub_system_id
        if class_id is not None:
            self.__class_id = class_id
        if sub_class_id is not None:
            self.__sub_class_id = sub_class_id
        if prog_i_face is not None:
            self.__prog_i_face = prog_i_face
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.ahv.config.PcieDeviceConfiguration'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def vendor_id(self):
        """
        Vendor ID

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):

        self.__vendor_id = vendor_id

    @property
    def device_id(self):
        """
        Device ID

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__device_id

    @device_id.setter
    def device_id(self, device_id):

        self.__device_id = device_id

    @property
    def sub_system_vendor_id(self):
        """
        Subsystem vendor ID

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__sub_system_vendor_id

    @sub_system_vendor_id.setter
    def sub_system_vendor_id(self, sub_system_vendor_id):

        self.__sub_system_vendor_id = sub_system_vendor_id

    @property
    def sub_system_id(self):
        """
        Subsystem (device) ID

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__sub_system_id

    @sub_system_id.setter
    def sub_system_id(self, sub_system_id):

        self.__sub_system_id = sub_system_id

    @property
    def class_id(self):
        """
        Class code

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__class_id

    @class_id.setter
    def class_id(self, class_id):

        self.__class_id = class_id

    @property
    def sub_class_id(self):
        """
        Subsystem class ID

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__sub_class_id

    @sub_class_id.setter
    def sub_class_id(self, sub_class_id):

        self.__sub_class_id = sub_class_id

    @property
    def prog_i_face(self):
        """
        Programming interface ID

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__prog_i_face

    @prog_i_face.setter
    def prog_i_face(self, prog_i_face):

        self.__prog_i_face = prog_i_face

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PcieDeviceConfiguration, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PcieDeviceConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.BuildReference import BuildReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterArchReference import ClusterArchReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterFunctionRef import ClusterFunctionRef  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.EncryptionOptionInfo import EncryptionOptionInfo  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.EncryptionScopeInfo import EncryptionScopeInfo  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.EncryptionStatus import EncryptionStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.FaultToleranceState import FaultToleranceState  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervisorType import HypervisorType  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.OperationMode import OperationMode  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PublicKey import PublicKey  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PulseStatus import PulseStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SoftwareMapReference import SoftwareMapReference  # noqa: F401,E501

class ClusterConfigReference(object):

    """Cluster configuration details.

    :param incarnation_id: (:attr:`incarnation_id`) Cluster incarnation Id. This is part of payload for cluster update operation only.
    :type incarnation_id: 
    
    
    :param build_info: (:attr:`build_info`) 
    :type build_info: 
    
    
    :param hypervisor_types: (:attr:`hypervisor_types`) Hypervisor type.
    :type hypervisor_types: 
    
    
    :param cluster_function: (:attr:`cluster_function`) Cluster function. This is part of payload for cluster create operation only (allowed enum values for creation are AOS, ONE_NODE & TWO_NODE only).
    :type cluster_function: 
    
    
    :param timezone: (:attr:`timezone`) Time zone on a cluster.
    :type timezone: 
    
    
    :param authorized_public_key_list: (:attr:`authorized_public_key_list`) Public ssh key details. This is part of payload for cluster update operation only.
    :type authorized_public_key_list: 
    
    
    :param redundancy_factor: (:attr:`redundancy_factor`) Redundancy factor of a cluster. This is part of payload for both cluster create & update operations.
    :type redundancy_factor: 
    
    
    :param cluster_software_map: (:attr:`cluster_software_map`) Cluster software version details.
    :type cluster_software_map: 
    
    
    :param cluster_arch: (:attr:`cluster_arch`) 
    :type cluster_arch: 
    
    
    :param fault_tolerance_state: (:attr:`fault_tolerance_state`) 
    :type fault_tolerance_state: 
    
    
    :param is_remote_support_enabled: (:attr:`is_remote_support_enabled`) Remote support status.
    :type is_remote_support_enabled: 
    
    
    :param operation_mode: (:attr:`operation_mode`) 
    :type operation_mode: 
    
    
    :param is_lts: (:attr:`is_lts`) Indicates whether the release is categorized as Long-term or not.
    :type is_lts: 
    
    
    :param is_password_remote_login_enabled: (:attr:`is_password_remote_login_enabled`) Indicates whether the password ssh into the cluster is enabled or not.
    :type is_password_remote_login_enabled: 
    
    
    :param encryption_in_transit_status: (:attr:`encryption_in_transit_status`) 
    :type encryption_in_transit_status: 
    
    
    :param encryption_option: (:attr:`encryption_option`) Encryption option.
    :type encryption_option: 
    
    
    :param encryption_scope: (:attr:`encryption_scope`) Encryption scope.
    :type encryption_scope: 
    
    
    :param pulse_status: (:attr:`pulse_status`) 
    :type pulse_status: 
    
    
    :param is_available: (:attr:`is_available`) Indicates if cluster is available to contact or not.
    :type is_available: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'incarnation_id': 'int',
        'build_info': 'clustermgmt.v4.config.BuildReference',
        'hypervisor_types': 'list[clustermgmt.v4.config.HypervisorType]',
        'cluster_function': 'list[clustermgmt.v4.config.ClusterFunctionRef]',
        'timezone': 'str',
        'authorized_public_key_list': 'list[clustermgmt.v4.config.PublicKey]',
        'redundancy_factor': 'int',
        'cluster_software_map': 'list[clustermgmt.v4.config.SoftwareMapReference]',
        'cluster_arch': 'clustermgmt.v4.config.ClusterArchReference',
        'fault_tolerance_state': 'clustermgmt.v4.config.FaultToleranceState',
        'is_remote_support_enabled': 'bool',
        'operation_mode': 'clustermgmt.v4.config.OperationMode',
        'is_lts': 'bool',
        'is_password_remote_login_enabled': 'bool',
        'encryption_in_transit_status': 'clustermgmt.v4.config.EncryptionStatus',
        'encryption_option': 'list[clustermgmt.v4.config.EncryptionOptionInfo]',
        'encryption_scope': 'list[clustermgmt.v4.config.EncryptionScopeInfo]',
        'pulse_status': 'clustermgmt.v4.config.PulseStatus',
        'is_available': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'incarnation_id': 'incarnationId',
        'build_info': 'buildInfo',
        'hypervisor_types': 'hypervisorTypes',
        'cluster_function': 'clusterFunction',
        'timezone': 'timezone',
        'authorized_public_key_list': 'authorizedPublicKeyList',
        'redundancy_factor': 'redundancyFactor',
        'cluster_software_map': 'clusterSoftwareMap',
        'cluster_arch': 'clusterArch',
        'fault_tolerance_state': 'faultToleranceState',
        'is_remote_support_enabled': 'isRemoteSupportEnabled',
        'operation_mode': 'operationMode',
        'is_lts': 'isLts',
        'is_password_remote_login_enabled': 'isPasswordRemoteLoginEnabled',
        'encryption_in_transit_status': 'encryptionInTransitStatus',
        'encryption_option': 'encryptionOption',
        'encryption_scope': 'encryptionScope',
        'pulse_status': 'pulseStatus',
        'is_available': 'isAvailable',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, incarnation_id=None, build_info=None, hypervisor_types=None, cluster_function=None, timezone=None, authorized_public_key_list=None, redundancy_factor=None, cluster_software_map=None, cluster_arch=None, fault_tolerance_state=None, is_remote_support_enabled=None, operation_mode=None, is_lts=None, is_password_remote_login_enabled=None, encryption_in_transit_status=None, encryption_option=None, encryption_scope=None, pulse_status=None, is_available=None, *args, **kwargs):  # noqa: E501
        self.__incarnation_id = None
        self.__build_info = None
        self.__hypervisor_types = None
        self.__cluster_function = None
        self.__timezone = None
        self.__authorized_public_key_list = None
        self.__redundancy_factor = None
        self.__cluster_software_map = None
        self.__cluster_arch = None
        self.__fault_tolerance_state = None
        self.__is_remote_support_enabled = None
        self.__operation_mode = None
        self.__is_lts = None
        self.__is_password_remote_login_enabled = None
        self.__encryption_in_transit_status = None
        self.__encryption_option = None
        self.__encryption_scope = None
        self.__pulse_status = None
        self.__is_available = None
        self.discriminator = None
        if incarnation_id is not None:
            self.__incarnation_id = incarnation_id
        if build_info is not None:
            self.__build_info = build_info
        if hypervisor_types is not None:
            self.__hypervisor_types = hypervisor_types
        if cluster_function is not None:
            self.__cluster_function = cluster_function
        if timezone is not None:
            self.__timezone = timezone
        if authorized_public_key_list is not None:
            self.__authorized_public_key_list = authorized_public_key_list
        if redundancy_factor is not None:
            self.__redundancy_factor = redundancy_factor
        if cluster_software_map is not None:
            self.__cluster_software_map = cluster_software_map
        if cluster_arch is not None:
            self.__cluster_arch = cluster_arch
        if fault_tolerance_state is not None:
            self.__fault_tolerance_state = fault_tolerance_state
        if is_remote_support_enabled is not None:
            self.__is_remote_support_enabled = is_remote_support_enabled
        if operation_mode is not None:
            self.__operation_mode = operation_mode
        if is_lts is not None:
            self.__is_lts = is_lts
        if is_password_remote_login_enabled is not None:
            self.__is_password_remote_login_enabled = is_password_remote_login_enabled
        if encryption_in_transit_status is not None:
            self.__encryption_in_transit_status = encryption_in_transit_status
        if encryption_option is not None:
            self.__encryption_option = encryption_option
        if encryption_scope is not None:
            self.__encryption_scope = encryption_scope
        if pulse_status is not None:
            self.__pulse_status = pulse_status
        if is_available is not None:
            self.__is_available = is_available
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.ClusterConfigReference'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def incarnation_id(self):
        """
        Cluster incarnation Id. This is part of payload for cluster update operation only.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__incarnation_id

    @incarnation_id.setter
    def incarnation_id(self, incarnation_id):

        self.__incarnation_id = incarnation_id

    @property
    def build_info(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.BuildReference`
        """  # noqa: E501
        return self.__build_info

    @build_info.setter
    def build_info(self, build_info):

        self.__build_info = build_info

    @property
    def hypervisor_types(self):
        """
        Hypervisor type.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HypervisorType` ]
        """  # noqa: E501
        return self.__hypervisor_types

    @hypervisor_types.setter
    def hypervisor_types(self, hypervisor_types):

        self.__hypervisor_types = hypervisor_types

    @property
    def cluster_function(self):
        """
        Cluster function. This is part of payload for cluster create operation only (allowed enum values for creation are AOS, ONE_NODE & TWO_NODE only).

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterFunctionRef` ]
        """  # noqa: E501
        return self.__cluster_function

    @cluster_function.setter
    def cluster_function(self, cluster_function):

        self.__cluster_function = cluster_function

    @property
    def timezone(self):
        """
        Time zone on a cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__timezone

    @timezone.setter
    def timezone(self, timezone):

        self.__timezone = timezone

    @property
    def authorized_public_key_list(self):
        """
        Public ssh key details. This is part of payload for cluster update operation only.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PublicKey` ]
        """  # noqa: E501
        return self.__authorized_public_key_list

    @authorized_public_key_list.setter
    def authorized_public_key_list(self, authorized_public_key_list):

        self.__authorized_public_key_list = authorized_public_key_list

    @property
    def redundancy_factor(self):
        """
        Redundancy factor of a cluster. This is part of payload for both cluster create & update operations.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__redundancy_factor

    @redundancy_factor.setter
    def redundancy_factor(self, redundancy_factor):

        self.__redundancy_factor = redundancy_factor

    @property
    def cluster_software_map(self):
        """
        Cluster software version details.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.SoftwareMapReference` ]
        """  # noqa: E501
        return self.__cluster_software_map

    @cluster_software_map.setter
    def cluster_software_map(self, cluster_software_map):

        self.__cluster_software_map = cluster_software_map

    @property
    def cluster_arch(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterArchReference`
        """  # noqa: E501
        return self.__cluster_arch

    @cluster_arch.setter
    def cluster_arch(self, cluster_arch):

        self.__cluster_arch = cluster_arch

    @property
    def fault_tolerance_state(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.FaultToleranceState`
        """  # noqa: E501
        return self.__fault_tolerance_state

    @fault_tolerance_state.setter
    def fault_tolerance_state(self, fault_tolerance_state):

        self.__fault_tolerance_state = fault_tolerance_state

    @property
    def is_remote_support_enabled(self):
        """
        Remote support status.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_remote_support_enabled

    @is_remote_support_enabled.setter
    def is_remote_support_enabled(self, is_remote_support_enabled):

        self.__is_remote_support_enabled = is_remote_support_enabled

    @property
    def operation_mode(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.OperationMode`
        """  # noqa: E501
        return self.__operation_mode

    @operation_mode.setter
    def operation_mode(self, operation_mode):

        self.__operation_mode = operation_mode

    @property
    def is_lts(self):
        """
        Indicates whether the release is categorized as Long-term or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_lts

    @is_lts.setter
    def is_lts(self, is_lts):

        self.__is_lts = is_lts

    @property
    def is_password_remote_login_enabled(self):
        """
        Indicates whether the password ssh into the cluster is enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_password_remote_login_enabled

    @is_password_remote_login_enabled.setter
    def is_password_remote_login_enabled(self, is_password_remote_login_enabled):

        self.__is_password_remote_login_enabled = is_password_remote_login_enabled

    @property
    def encryption_in_transit_status(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.EncryptionStatus`
        """  # noqa: E501
        return self.__encryption_in_transit_status

    @encryption_in_transit_status.setter
    def encryption_in_transit_status(self, encryption_in_transit_status):

        self.__encryption_in_transit_status = encryption_in_transit_status

    @property
    def encryption_option(self):
        """
        Encryption option.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.EncryptionOptionInfo` ]
        """  # noqa: E501
        return self.__encryption_option

    @encryption_option.setter
    def encryption_option(self, encryption_option):

        self.__encryption_option = encryption_option

    @property
    def encryption_scope(self):
        """
        Encryption scope.

        :type:
             list[ :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.EncryptionScopeInfo` ]
        """  # noqa: E501
        return self.__encryption_scope

    @encryption_scope.setter
    def encryption_scope(self, encryption_scope):

        self.__encryption_scope = encryption_scope

    @property
    def pulse_status(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PulseStatus`
        """  # noqa: E501
        return self.__pulse_status

    @pulse_status.setter
    def pulse_status(self, pulse_status):

        self.__pulse_status = pulse_status

    @property
    def is_available(self):
        """
        Indicates if cluster is available to contact or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_available

    @is_available.setter
    def is_available(self, is_available):

        self.__is_available = is_available

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterConfigReference, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterConfigReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


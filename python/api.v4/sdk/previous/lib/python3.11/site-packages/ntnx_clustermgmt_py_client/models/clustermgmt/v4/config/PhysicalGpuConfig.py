# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.GpuMode import GpuMode  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.GpuType import GpuType  # noqa: F401,E501

class PhysicalGpuConfig(object):

    """Physical GPU configuration details.

    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param device_id: (:attr:`device_id`) Device Id.
    :type device_id: 
    
    
    :param device_name: (:attr:`device_name`) Device name.
    :type device_name: 
    
    
    :param vendor_name: (:attr:`vendor_name`) Vendor name.
    :type vendor_name: 
     max=128 chars
    
    :param is_in_use: (:attr:`is_in_use`) GPU in use.
    :type is_in_use: 
    
    
    :param sbdf: (:attr:`sbdf`) SBDF address.
    :type sbdf: 
    
    
    :param numa_node: (:attr:`numa_node`) NUMA node.
    :type numa_node: 
    
    
    :param assignable: (:attr:`assignable`) GPU assignable.
    :type assignable: 
    
    
    :param mode: (:attr:`mode`) 
    :type mode: 
    
    
    :param frame_buffer_size_bytes: (:attr:`frame_buffer_size_bytes`) Frame buffer size in bytes.
    :type frame_buffer_size_bytes: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'type': 'clustermgmt.v4.config.GpuType',
        'device_id': 'int',
        'device_name': 'str',
        'vendor_name': 'str',
        'is_in_use': 'bool',
        'sbdf': 'str',
        'numa_node': 'str',
        'assignable': 'int',
        'mode': 'clustermgmt.v4.config.GpuMode',
        'frame_buffer_size_bytes': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'type': 'type',
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'vendor_name': 'vendorName',
        'is_in_use': 'isInUse',
        'sbdf': 'sbdf',
        'numa_node': 'numaNode',
        'assignable': 'assignable',
        'mode': 'mode',
        'frame_buffer_size_bytes': 'frameBufferSizeBytes',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, type=None, device_id=None, device_name=None, vendor_name=None, is_in_use=None, sbdf=None, numa_node=None, assignable=None, mode=None, frame_buffer_size_bytes=None, *args, **kwargs):  # noqa: E501
        self.__type = None
        self.__device_id = None
        self.__device_name = None
        self.__vendor_name = None
        self.__is_in_use = None
        self.__sbdf = None
        self.__numa_node = None
        self.__assignable = None
        self.__mode = None
        self.__frame_buffer_size_bytes = None
        self.discriminator = None
        if type is not None:
            self.__type = type
        if device_id is not None:
            self.__device_id = device_id
        if device_name is not None:
            self.__device_name = device_name
        if vendor_name is not None:
            self.__vendor_name = vendor_name
        if is_in_use is not None:
            self.__is_in_use = is_in_use
        if sbdf is not None:
            self.__sbdf = sbdf
        if numa_node is not None:
            self.__numa_node = numa_node
        if assignable is not None:
            self.__assignable = assignable
        if mode is not None:
            self.__mode = mode
        if frame_buffer_size_bytes is not None:
            self.__frame_buffer_size_bytes = frame_buffer_size_bytes
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.PhysicalGpuConfig'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.GpuType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def device_id(self):
        """
        Device Id.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__device_id

    @device_id.setter
    def device_id(self, device_id):

        self.__device_id = device_id

    @property
    def device_name(self):
        """
        Device name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__device_name

    @device_name.setter
    def device_name(self, device_name):

        self.__device_name = device_name

    @property
    def vendor_name(self):
        """
        Vendor name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        if vendor_name is not None and len(vendor_name) > 128:
            raise ValueError("Invalid value for `vendor_name`, length must be less than or equal to `128`")  # noqa: E501

        self.__vendor_name = vendor_name

    @property
    def is_in_use(self):
        """
        GPU in use.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_in_use

    @is_in_use.setter
    def is_in_use(self, is_in_use):

        self.__is_in_use = is_in_use

    @property
    def sbdf(self):
        """
        SBDF address.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__sbdf

    @sbdf.setter
    def sbdf(self, sbdf):

        self.__sbdf = sbdf

    @property
    def numa_node(self):
        """
        NUMA node.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__numa_node

    @numa_node.setter
    def numa_node(self, numa_node):

        self.__numa_node = numa_node

    @property
    def assignable(self):
        """
        GPU assignable.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__assignable

    @assignable.setter
    def assignable(self, assignable):

        self.__assignable = assignable

    @property
    def mode(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.GpuMode`
        """  # noqa: E501
        return self.__mode

    @mode.setter
    def mode(self, mode):

        self.__mode = mode

    @property
    def frame_buffer_size_bytes(self):
        """
        Frame buffer size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__frame_buffer_size_bytes

    @frame_buffer_size_bytes.setter
    def frame_buffer_size_bytes(self, frame_buffer_size_bytes):

        self.__frame_buffer_size_bytes = frame_buffer_size_bytes

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PhysicalGpuConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhysicalGpuConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


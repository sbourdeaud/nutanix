# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.CdRom import CdRom  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.Disk import Disk  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.HostReference import HostReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.Nic import Nic  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.NutanixGuestTools import NutanixGuestTools  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.OwnershipInfo import OwnershipInfo  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.PowerState import PowerState  # noqa: F401,E501

class Vm(ExternalizableAbstractModel):

    """VM configuration.

    :param name: (:attr:`name`) VM name.
    :type name: 
     max=80 chars
    
    :param cluster: (:attr:`cluster`) 
    :type cluster: 
    
    
    :param host: (:attr:`host`) 
    :type host: 
    
    
    :param description: (:attr:`description`) VM description.
    :type description: 
    
    
    :param categories: (:attr:`categories`) Categories for the VM.
    :type categories: 
    
    
    :param ownership_info: (:attr:`ownership_info`) 
    :type ownership_info: 
    
    
    :param nutanix_guest_tools: (:attr:`nutanix_guest_tools`) 
    :type nutanix_guest_tools: 
    
    
    :param power_state: (:attr:`power_state`) 
    :type power_state: 
    
    
    :param memory_size_bytes: (:attr:`memory_size_bytes`) Memory size in bytes.
    :type memory_size_bytes: 
    
     min=1,
    :param num_cores_per_socket: (:attr:`num_cores_per_socket`) Number of cores per socket.
    :type num_cores_per_socket: 
    
     min=1,
    :param num_cpus: (:attr:`num_cpus`) Number of vCPUs.
    :type num_cpus: 
    
     min=1,
    :param guest_os_name: (:attr:`guest_os_name`) Name of the guest OS.
    :type guest_os_name: 
     max=256 chars
    
    :param virtual_hardware_version: (:attr:`virtual_hardware_version`) Virtual hardware version of the VM.
    :type virtual_hardware_version: 
    
     min=1,
    :param disks: (:attr:`disks`) Disks attached to the VM.
    :type disks: 
    
    
    :param cd_roms: (:attr:`cd_roms`) CD-ROMs attached to the VM.
    :type cd_roms: 
    
    
    :param nics: (:attr:`nics`) NICs attached to the VM.
    :type nics: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'cluster': 'vmm.v4.esxi.config.ClusterReference',
        'host': 'vmm.v4.esxi.config.HostReference',
        'description': 'str',
        'categories': 'list[vmm.v4.esxi.config.CategoryReference]',
        'ownership_info': 'vmm.v4.esxi.config.OwnershipInfo',
        'nutanix_guest_tools': 'vmm.v4.esxi.config.NutanixGuestTools',
        'power_state': 'vmm.v4.esxi.config.PowerState',
        'memory_size_bytes': 'int',
        'num_cores_per_socket': 'int',
        'num_cpus': 'int',
        'guest_os_name': 'str',
        'virtual_hardware_version': 'int',
        'disks': 'list[vmm.v4.esxi.config.Disk]',
        'cd_roms': 'list[vmm.v4.esxi.config.CdRom]',
        'nics': 'list[vmm.v4.esxi.config.Nic]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'cluster': 'cluster',
        'host': 'host',
        'description': 'description',
        'categories': 'categories',
        'ownership_info': 'ownershipInfo',
        'nutanix_guest_tools': 'nutanixGuestTools',
        'power_state': 'powerState',
        'memory_size_bytes': 'memorySizeBytes',
        'num_cores_per_socket': 'numCoresPerSocket',
        'num_cpus': 'numCpus',
        'guest_os_name': 'guestOsName',
        'virtual_hardware_version': 'virtualHardwareVersion',
        'disks': 'disks',
        'cd_roms': 'cdRoms',
        'nics': 'nics',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, cluster=None, host=None, description=None, categories=None, ownership_info=None, nutanix_guest_tools=None, power_state=None, memory_size_bytes=None, num_cores_per_socket=None, num_cpus=None, guest_os_name=None, virtual_hardware_version=None, disks=None, cd_roms=None, nics=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__cluster = None
        self.__host = None
        self.__description = None
        self.__categories = None
        self.__ownership_info = None
        self.__nutanix_guest_tools = None
        self.__power_state = None
        self.__memory_size_bytes = None
        self.__num_cores_per_socket = None
        self.__num_cpus = None
        self.__guest_os_name = None
        self.__virtual_hardware_version = None
        self.__disks = None
        self.__cd_roms = None
        self.__nics = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if cluster is not None:
            self.__cluster = cluster
        if host is not None:
            self.__host = host
        if description is not None:
            self.__description = description
        if categories is not None:
            self.__categories = categories
        if ownership_info is not None:
            self.__ownership_info = ownership_info
        if nutanix_guest_tools is not None:
            self.__nutanix_guest_tools = nutanix_guest_tools
        if power_state is not None:
            self.__power_state = power_state
        if memory_size_bytes is not None:
            self.__memory_size_bytes = memory_size_bytes
        if num_cores_per_socket is not None:
            self.__num_cores_per_socket = num_cores_per_socket
        if num_cpus is not None:
            self.__num_cpus = num_cpus
        if guest_os_name is not None:
            self.__guest_os_name = guest_os_name
        if virtual_hardware_version is not None:
            self.__virtual_hardware_version = virtual_hardware_version
        if disks is not None:
            self.__disks = disks
        if cd_roms is not None:
            self.__cd_roms = cd_roms
        if nics is not None:
            self.__nics = nics

    def _initialize_object_type(self):
        return 'vmm.v4.esxi.config.Vm'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        VM name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501

        self.__name = name

    @property
    def cluster(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.ClusterReference`
        """  # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def host(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.HostReference`
        """  # noqa: E501
        return self.__host

    @host.setter
    def host(self, host):

        self.__host = host

    @property
    def description(self):
        """
        VM description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def categories(self):
        """
        Categories for the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.CategoryReference` ]
        """  # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def ownership_info(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.OwnershipInfo`
        """  # noqa: E501
        return self.__ownership_info

    @ownership_info.setter
    def ownership_info(self, ownership_info):

        self.__ownership_info = ownership_info

    @property
    def nutanix_guest_tools(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.NutanixGuestTools`
        """  # noqa: E501
        return self.__nutanix_guest_tools

    @nutanix_guest_tools.setter
    def nutanix_guest_tools(self, nutanix_guest_tools):

        self.__nutanix_guest_tools = nutanix_guest_tools

    @property
    def power_state(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.PowerState`
        """  # noqa: E501
        return self.__power_state

    @power_state.setter
    def power_state(self, power_state):

        self.__power_state = power_state

    @property
    def memory_size_bytes(self):
        """
        Memory size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_size_bytes

    @memory_size_bytes.setter
    def memory_size_bytes(self, memory_size_bytes):
        if memory_size_bytes is not None and memory_size_bytes < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_size_bytes`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__memory_size_bytes = memory_size_bytes

    @property
    def num_cores_per_socket(self):
        """
        Number of cores per socket.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_cores_per_socket

    @num_cores_per_socket.setter
    def num_cores_per_socket(self, num_cores_per_socket):
        if num_cores_per_socket is not None and num_cores_per_socket < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_cores_per_socket`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_cores_per_socket = num_cores_per_socket

    @property
    def num_cpus(self):
        """
        Number of vCPUs.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus):
        if num_cpus is not None and num_cpus < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_cpus`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_cpus = num_cpus

    @property
    def guest_os_name(self):
        """
        Name of the guest OS.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__guest_os_name

    @guest_os_name.setter
    def guest_os_name(self, guest_os_name):
        if guest_os_name is not None and len(guest_os_name) > 256:
            raise ValueError("Invalid value for `guest_os_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__guest_os_name = guest_os_name

    @property
    def virtual_hardware_version(self):
        """
        Virtual hardware version of the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__virtual_hardware_version

    @virtual_hardware_version.setter
    def virtual_hardware_version(self, virtual_hardware_version):
        if virtual_hardware_version is not None and virtual_hardware_version < 1:  # noqa: E501
            raise ValueError("Invalid value for `virtual_hardware_version`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__virtual_hardware_version = virtual_hardware_version

    @property
    def disks(self):
        """
        Disks attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.Disk` ]
        """  # noqa: E501
        return self.__disks

    @disks.setter
    def disks(self, disks):

        self.__disks = disks

    @property
    def cd_roms(self):
        """
        CD-ROMs attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.CdRom` ]
        """  # noqa: E501
        return self.__cd_roms

    @cd_roms.setter
    def cd_roms(self, cd_roms):

        self.__cd_roms = cd_roms

    @property
    def nics(self):
        """
        NICs attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.Nic` ]
        """  # noqa: E501
        return self.__nics

    @nics.setter
    def nics(self, nics):

        self.__nics = nics

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Vm, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


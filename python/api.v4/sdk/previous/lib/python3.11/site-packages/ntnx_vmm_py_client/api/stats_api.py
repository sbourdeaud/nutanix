# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ntnx_vmm_py_client.api_client import ApiClient


class StatsApi(object):
    """IGNORE:
    NOTE: A placeholder for class level description
    IGNORE
    """  # noqa: E501

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()

        self.api_client = api_client
        self.__headers_to_skip = { 'authorization', 'cookie', 'host', 'user-agent' }

    def get_disk_stats_by_id(self, vmExtId, extId, _startTime, _endTime, _samplingInterval=None, _statType=None, _select=None, **kwargs):  # noqa: E501
        """Get the stats for the specified VM disk

        >>> response = api.get_disk_stats_by_id(vmExtId, extId, _startTime, _endTime, (optional) _samplingInterval, (optional) _statType, (optional) _select)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.get_disk_stats_by_id(vmExtId, extId, _startTime, _endTime, async_req=True)
        >>> result = thread.get()

        :param vmExtId: This field specifies the VM external ID when retrieving the stats for a given VM Disk.
        :type vmExtId:
            :class:`str`, required
        :param extId: This field specifies the VM external ID when retrieving the stats for a given VM Disk.
        :type extId:
            :class:`str`, required
        :param _startTime: The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _startTime:
            :class:`datetime`, required
        :param _endTime: The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _endTime:
            :class:`datetime`, required
        :param _samplingInterval: The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
        :type _samplingInterval:
            :class:`int`
        :param _statType: 
        :type _statType:
            :class:`common.v1.stats.DownSamplingOperator`
        :param _select: A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - extId - links - stats - tenantId - vmExtId 
        :type _select:
            :class:`str`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.stats.GetDiskStatsApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'vmExtId' is set
        if ('vmExtId' not in params or params['vmExtId'] is None):
            raise ValueError("Missing the required parameter `vmExtId` when calling `get_disk_stats_by_id`")  # noqa: E501
        # verify the required parameter 'extId' is set
        if ('extId' not in params or params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_disk_stats_by_id`")  # noqa: E501
        # verify the required parameter '_startTime' is set
        if ('_startTime' not in params or params['_startTime'] is None):
            raise ValueError("Missing the required parameter `_startTime` when calling `get_disk_stats_by_id`")  # noqa: E501
        # verify the required parameter '_endTime' is set
        if ('_endTime' not in params or params['_endTime'] is None):
            raise ValueError("Missing the required parameter `_endTime` when calling `get_disk_stats_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vmExtId' in params and params['vmExtId'] is not None:
            path_params['vmExtId'] = params['vmExtId']  # noqa: E501
        if 'extId' in params and params['extId'] is not None:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []
        if '_startTime' in params and params['_startTime'] is not None:
            query_params.append(('$startTime', params['_startTime']))  # noqa: E501
        if '_endTime' in params and params['_endTime'] is not None:
            query_params.append(('$endTime', params['_endTime']))  # noqa: E501
        if '_samplingInterval' in params and params['_samplingInterval'] is not None:
            query_params.append(('$samplingInterval', params['_samplingInterval']))  # noqa: E501
        if '_statType' in params and params['_statType'] is not None:
            query_params.append(('$statType', params['_statType']))  # noqa: E501
        if '_select' in params and params['_select'] is not None:
            query_params.append(('$select', params['_select']))  # noqa: E501

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['vmExtId', 'extId', '_startTime', '_endTime', '_samplingInterval', '_statType', '_select'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms/{vmExtId}/disks/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.GetDiskStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms/{vmExtId}/disks/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.GetDiskStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def get_nic_stats_by_id(self, vmExtId, extId, _startTime, _endTime, _samplingInterval=None, _statType=None, _select=None, **kwargs):  # noqa: E501
        """Get the stats for the specified VM NIC

        >>> response = api.get_nic_stats_by_id(vmExtId, extId, _startTime, _endTime, (optional) _samplingInterval, (optional) _statType, (optional) _select)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.get_nic_stats_by_id(vmExtId, extId, _startTime, _endTime, async_req=True)
        >>> result = thread.get()

        :param vmExtId: This field specifies the VM external ID when retrieving the stats for a given VM NIC.
        :type vmExtId:
            :class:`str`, required
        :param extId: This field specifies the external ID of the VM NIC when retrieving stats for a given VM NIC.
        :type extId:
            :class:`str`, required
        :param _startTime: The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _startTime:
            :class:`datetime`, required
        :param _endTime: The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _endTime:
            :class:`datetime`, required
        :param _samplingInterval: The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
        :type _samplingInterval:
            :class:`int`
        :param _statType: 
        :type _statType:
            :class:`common.v1.stats.DownSamplingOperator`
        :param _select: A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - extId - links - stats - tenantId - vmExtId 
        :type _select:
            :class:`str`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.stats.GetNicStatsApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'vmExtId' is set
        if ('vmExtId' not in params or params['vmExtId'] is None):
            raise ValueError("Missing the required parameter `vmExtId` when calling `get_nic_stats_by_id`")  # noqa: E501
        # verify the required parameter 'extId' is set
        if ('extId' not in params or params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_nic_stats_by_id`")  # noqa: E501
        # verify the required parameter '_startTime' is set
        if ('_startTime' not in params or params['_startTime'] is None):
            raise ValueError("Missing the required parameter `_startTime` when calling `get_nic_stats_by_id`")  # noqa: E501
        # verify the required parameter '_endTime' is set
        if ('_endTime' not in params or params['_endTime'] is None):
            raise ValueError("Missing the required parameter `_endTime` when calling `get_nic_stats_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vmExtId' in params and params['vmExtId'] is not None:
            path_params['vmExtId'] = params['vmExtId']  # noqa: E501
        if 'extId' in params and params['extId'] is not None:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []
        if '_startTime' in params and params['_startTime'] is not None:
            query_params.append(('$startTime', params['_startTime']))  # noqa: E501
        if '_endTime' in params and params['_endTime'] is not None:
            query_params.append(('$endTime', params['_endTime']))  # noqa: E501
        if '_samplingInterval' in params and params['_samplingInterval'] is not None:
            query_params.append(('$samplingInterval', params['_samplingInterval']))  # noqa: E501
        if '_statType' in params and params['_statType'] is not None:
            query_params.append(('$statType', params['_statType']))  # noqa: E501
        if '_select' in params and params['_select'] is not None:
            query_params.append(('$select', params['_select']))  # noqa: E501

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['vmExtId', 'extId', '_startTime', '_endTime', '_samplingInterval', '_statType', '_select'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms/{vmExtId}/nics/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.GetNicStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms/{vmExtId}/nics/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.GetNicStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def get_vm_stats_by_id(self, extId, _startTime, _endTime, _samplingInterval=None, _statType=None, _select=None, **kwargs):  # noqa: E501
        """Get VM stats for a given VM

        >>> response = api.get_vm_stats_by_id(extId, _startTime, _endTime, (optional) _samplingInterval, (optional) _statType, (optional) _select)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.get_vm_stats_by_id(extId, _startTime, _endTime, async_req=True)
        >>> result = thread.get()

        :param extId: Retrieve statistics for the VM with the specified external ID.
        :type extId:
            :class:`str`, required
        :param _startTime: The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _startTime:
            :class:`datetime`, required
        :param _endTime: The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _endTime:
            :class:`datetime`, required
        :param _samplingInterval: The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
        :type _samplingInterval:
            :class:`int`
        :param _statType: 
        :type _statType:
            :class:`common.v1.stats.DownSamplingOperator`
        :param _select: A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - extId - links - stats - tenantId 
        :type _select:
            :class:`str`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.stats.GetVmStatsApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'extId' is set
        if ('extId' not in params or params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_vm_stats_by_id`")  # noqa: E501
        # verify the required parameter '_startTime' is set
        if ('_startTime' not in params or params['_startTime'] is None):
            raise ValueError("Missing the required parameter `_startTime` when calling `get_vm_stats_by_id`")  # noqa: E501
        # verify the required parameter '_endTime' is set
        if ('_endTime' not in params or params['_endTime'] is None):
            raise ValueError("Missing the required parameter `_endTime` when calling `get_vm_stats_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params and params['extId'] is not None:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []
        if '_startTime' in params and params['_startTime'] is not None:
            query_params.append(('$startTime', params['_startTime']))  # noqa: E501
        if '_endTime' in params and params['_endTime'] is not None:
            query_params.append(('$endTime', params['_endTime']))  # noqa: E501
        if '_samplingInterval' in params and params['_samplingInterval'] is not None:
            query_params.append(('$samplingInterval', params['_samplingInterval']))  # noqa: E501
        if '_statType' in params and params['_statType'] is not None:
            query_params.append(('$statType', params['_statType']))  # noqa: E501
        if '_select' in params and params['_select'] is not None:
            query_params.append(('$select', params['_select']))  # noqa: E501

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['extId', '_startTime', '_endTime', '_samplingInterval', '_statType', '_select'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.GetVmStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.GetVmStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def list_vm_stats(self, _startTime, _endTime, _samplingInterval=None, _statType=None, _page=None, _limit=None, _filter=None, _orderby=None, _select=None, **kwargs):  # noqa: E501
        """List VM stats for all VMs

        >>> response = api.list_vm_stats(_startTime, _endTime, (optional) _samplingInterval, (optional) _statType, (optional) _page, (optional) _limit, (optional) _filter, (optional) _orderby, (optional) _select)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.list_vm_stats(_startTime, _endTime, async_req=True)
        >>> result = thread.get()

        :param _startTime: The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _startTime:
            :class:`datetime`, required
        :param _endTime: The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
        :type _endTime:
            :class:`datetime`, required
        :param _samplingInterval: The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
        :type _samplingInterval:
            :class:`int`
        :param _statType: 
        :type _statType:
            :class:`common.v1.stats.DownSamplingOperator`
        :param _page: A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results. 
        :type _page:
            :class:`int`
        :param _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set. 
        :type _limit:
            :class:`int`
        :param _filter: A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'. The filter can be applied to the following fields: - stats/checkScore - stats/cluster - stats/controllerAvgIoLatencyMicros - stats/controllerAvgReadIoLatencyMicros - stats/controllerAvgReadIoSizeKb - stats/controllerAvgWriteIoLatencyMicros - stats/controllerAvgWriteIoSizeKb - stats/controllerIoBandwidthKbps - stats/controllerNumIo - stats/controllerNumIops - stats/controllerNumRandomIo - stats/controllerNumReadIo - stats/controllerNumReadIops - stats/controllerNumSeqIo - stats/controllerNumWriteIo - stats/controllerNumWriteIops - stats/controllerOplogDrainDestHddBytes - stats/controllerOplogDrainDestSsdBytes - stats/controllerRandomIoPpm - stats/controllerReadIoBandwidthKbps - stats/controllerReadIoPpm - stats/controllerReadSourceEstoreHddLocalBytes - stats/controllerReadSourceEstoreHddRemoteBytes - stats/controllerReadSourceEstoreSsdLocalBytes - stats/controllerReadSourceEstoreSsdRemoteBytes - stats/controllerReadSourceOplogBytes - stats/controllerSeqIoPpm - stats/controllerSharedUsageBytes - stats/controllerSnapshotUsageBytes - stats/controllerStorageTierSsdUsageBytes - stats/controllerTimespanMicros - stats/controllerTotalIoSizeKb - stats/controllerTotalIoTimeMicros - stats/controllerTotalReadIoSizeKb - stats/controllerTotalReadIoTimeMicros - stats/controllerTotalTransformedUsageBytes - stats/controllerUserBytes - stats/controllerWriteDestEstoreHddBytes - stats/controllerWriteDestEstoreSsdBytes - stats/controllerWriteIoBandwidthKbps - stats/controllerWriteIoPpm - stats/controllerWss120SecondReadMb - stats/controllerWss120SecondUnionMb - stats/controllerWss120SecondWriteMb - stats/controllerWss3600SecondReadMb - stats/controllerWss3600SecondUnionMb - stats/controllerWss3600SecondWriteMb - stats/diskCapacityBytes - stats/diskUsagePpm - stats/frameBufferUsagePpm - stats/gpuUsagePpm - stats/guestMemoryUsagePpm - stats/hypervisorAvgIoLatencyMicros - stats/hypervisorCpuReadyTimePpm - stats/hypervisorCpuUsagePpm - stats/hypervisorIoBandwidthKbps - stats/hypervisorMemoryBalloonReclaimTargetBytes - stats/hypervisorMemoryBalloonReclaimedBytes - stats/hypervisorMemoryUsagePpm - stats/hypervisorNumIo - stats/hypervisorNumIops - stats/hypervisorNumReadIo - stats/hypervisorNumReadIops - stats/hypervisorNumReceivePacketsDropped - stats/hypervisorNumReceivedBytes - stats/hypervisorNumTransmitPacketsDropped - stats/hypervisorNumTransmittedBytes - stats/hypervisorNumWriteIo - stats/hypervisorNumWriteIops - stats/hypervisorReadIoBandwidthKbps - stats/hypervisorSwapInRateKbps - stats/hypervisorSwapOutRateKbps - stats/hypervisorTimespanMicros - stats/hypervisorTotalIoSizeKb - stats/hypervisorTotalIoTimeMicros - stats/hypervisorTotalReadIoSizeKb - stats/hypervisorType - stats/hypervisorVmRunningTimeUsecs - stats/hypervisorWriteIoBandwidthKbps - stats/memoryReservedBytes - stats/memoryUsageBytes - stats/memoryUsagePpm - stats/numVcpusUsedPpm 
        :type _filter:
            :class:`str`
        :param _orderby: A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - stats/checkScore - stats/controllerAvgIoLatencyMicros - stats/controllerAvgReadIoLatencyMicros - stats/controllerAvgReadIoSizeKb - stats/controllerAvgWriteIoLatencyMicros - stats/controllerAvgWriteIoSizeKb - stats/controllerIoBandwidthKbps - stats/controllerNumIo - stats/controllerNumIops - stats/controllerNumRandomIo - stats/controllerNumReadIo - stats/controllerNumReadIops - stats/controllerNumSeqIo - stats/controllerNumWriteIo - stats/controllerNumWriteIops - stats/controllerOplogDrainDestHddBytes - stats/controllerOplogDrainDestSsdBytes - stats/controllerRandomIoPpm - stats/controllerReadIoBandwidthKbps - stats/controllerReadIoPpm - stats/controllerReadSourceEstoreHddLocalBytes - stats/controllerReadSourceEstoreHddRemoteBytes - stats/controllerReadSourceEstoreSsdLocalBytes - stats/controllerReadSourceEstoreSsdRemoteBytes - stats/controllerReadSourceOplogBytes - stats/controllerSeqIoPpm - stats/controllerSharedUsageBytes - stats/controllerSnapshotUsageBytes - stats/controllerStorageTierSsdUsageBytes - stats/controllerTimespanMicros - stats/controllerTotalIoSizeKb - stats/controllerTotalIoTimeMicros - stats/controllerTotalReadIoSizeKb - stats/controllerTotalReadIoTimeMicros - stats/controllerTotalTransformedUsageBytes - stats/controllerUserBytes - stats/controllerWriteDestEstoreHddBytes - stats/controllerWriteDestEstoreSsdBytes - stats/controllerWriteIoBandwidthKbps - stats/controllerWriteIoPpm - stats/controllerWss120SecondReadMb - stats/controllerWss120SecondUnionMb - stats/controllerWss120SecondWriteMb - stats/controllerWss3600SecondReadMb - stats/controllerWss3600SecondUnionMb - stats/controllerWss3600SecondWriteMb - stats/diskCapacityBytes - stats/diskUsagePpm - stats/frameBufferUsagePpm - stats/gpuUsagePpm - stats/guestMemoryUsagePpm - stats/hypervisorAvgIoLatencyMicros - stats/hypervisorCpuReadyTimePpm - stats/hypervisorCpuUsagePpm - stats/hypervisorIoBandwidthKbps - stats/hypervisorMemoryBalloonReclaimTargetBytes - stats/hypervisorMemoryBalloonReclaimedBytes - stats/hypervisorMemoryUsagePpm - stats/hypervisorNumIo - stats/hypervisorNumIops - stats/hypervisorNumReadIo - stats/hypervisorNumReadIops - stats/hypervisorNumReceivePacketsDropped - stats/hypervisorNumReceivedBytes - stats/hypervisorNumTransmitPacketsDropped - stats/hypervisorNumTransmittedBytes - stats/hypervisorNumWriteIo - stats/hypervisorNumWriteIops - stats/hypervisorReadIoBandwidthKbps - stats/hypervisorSwapInRateKbps - stats/hypervisorSwapOutRateKbps - stats/hypervisorTimespanMicros - stats/hypervisorTotalIoSizeKb - stats/hypervisorTotalIoTimeMicros - stats/hypervisorTotalReadIoSizeKb - stats/hypervisorVmRunningTimeUsecs - stats/hypervisorWriteIoBandwidthKbps - stats/memoryReservedBytes - stats/memoryUsageBytes - stats/memoryUsagePpm - stats/numVcpusUsedPpm 
        :type _orderby:
            :class:`str`
        :param _select: A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - extId - links - stats - tenantId 
        :type _select:
            :class:`str`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.stats.ListVmStatsApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter '_startTime' is set
        if ('_startTime' not in params or params['_startTime'] is None):
            raise ValueError("Missing the required parameter `_startTime` when calling `list_vm_stats`")  # noqa: E501
        # verify the required parameter '_endTime' is set
        if ('_endTime' not in params or params['_endTime'] is None):
            raise ValueError("Missing the required parameter `_endTime` when calling `list_vm_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_startTime' in params and params['_startTime'] is not None:
            query_params.append(('$startTime', params['_startTime']))  # noqa: E501
        if '_endTime' in params and params['_endTime'] is not None:
            query_params.append(('$endTime', params['_endTime']))  # noqa: E501
        if '_samplingInterval' in params and params['_samplingInterval'] is not None:
            query_params.append(('$samplingInterval', params['_samplingInterval']))  # noqa: E501
        if '_statType' in params and params['_statType'] is not None:
            query_params.append(('$statType', params['_statType']))  # noqa: E501
        if '_page' in params and params['_page'] is not None:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params and params['_limit'] is not None:
            query_params.append(('$limit', params['_limit']))  # noqa: E501
        if '_filter' in params and params['_filter'] is not None:
            query_params.append(('$filter', params['_filter']))  # noqa: E501
        if '_orderby' in params and params['_orderby'] is not None:
            query_params.append(('$orderby', params['_orderby']))  # noqa: E501
        if '_select' in params and params['_select'] is not None:
            query_params.append(('$select', params['_select']))  # noqa: E501

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['_startTime', '_endTime', '_samplingInterval', '_statType', '_page', '_limit', '_filter', '_orderby', '_select'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.ListVmStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/vmm/v4.0/ahv/stats/vms', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='vmm.v4.ahv.stats.ListVmStatsApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

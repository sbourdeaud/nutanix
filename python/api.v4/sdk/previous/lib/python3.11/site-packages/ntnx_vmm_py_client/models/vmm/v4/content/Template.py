# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.GuestUpdateStatus import GuestUpdateStatus  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.TemplateUser import TemplateUser  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.TemplateVersionSpec import TemplateVersionSpec  # noqa: F401,E501

class Template(ExternalizableAbstractModel):

    """

    :param template_name: (:attr:`template_name`) The user-defined name of a template.
    :type template_name: 
     min=1 chars, max=256 chars
    
    :param template_description: (:attr:`template_description`) The user-defined description of a template.
    :type template_description: 
     max=1000 chars
    
    :param template_version_spec: (:attr:`template_version_spec`) 
    :type template_version_spec: 
    
    
    :param guest_update_status: (:attr:`guest_update_status`) 
    :type guest_update_status: 
    
    
    :param create_time: (:attr:`create_time`) Time when the template was created.
    :type create_time: 
    
    
    :param update_time: (:attr:`update_time`) Time when the template was last updated.
    :type update_time: 
    
    
    :param created_by: (:attr:`created_by`) 
    :type created_by: 
    
    
    :param updated_by: (:attr:`updated_by`) 
    :type updated_by: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'template_name': 'str',
        'template_description': 'str',
        'template_version_spec': 'vmm.v4.content.TemplateVersionSpec',
        'guest_update_status': 'vmm.v4.content.GuestUpdateStatus',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'created_by': 'vmm.v4.content.TemplateUser',
        'updated_by': 'vmm.v4.content.TemplateUser',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'template_name': 'templateName',
        'template_description': 'templateDescription',
        'template_version_spec': 'templateVersionSpec',
        'guest_update_status': 'guestUpdateStatus',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, template_name=None, template_description=None, template_version_spec=None, guest_update_status=None, create_time=None, update_time=None, created_by=None, updated_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__template_name = None
        self.__template_description = None
        self.__template_version_spec = None
        self.__guest_update_status = None
        self.__create_time = None
        self.__update_time = None
        self.__created_by = None
        self.__updated_by = None
        self.discriminator = None
        if template_name is not None:
            self.__template_name = template_name
        if template_description is not None:
            self.__template_description = template_description
        if template_version_spec is not None:
            self.__template_version_spec = template_version_spec
        if guest_update_status is not None:
            self.__guest_update_status = guest_update_status
        if create_time is not None:
            self.__create_time = create_time
        if update_time is not None:
            self.__update_time = update_time
        if created_by is not None:
            self.__created_by = created_by
        if updated_by is not None:
            self.__updated_by = updated_by

    def _initialize_object_type(self):
        return 'vmm.v4.content.Template'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def template_name(self):
        """
        The user-defined name of a template.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__template_name

    @template_name.setter
    def template_name(self, template_name):
        if template_name is not None and len(template_name) > 256:
            raise ValueError("Invalid value for `template_name`, length must be less than or equal to `256`")  # noqa: E501
        if template_name is not None and len(template_name) < 1:
            raise ValueError("Invalid value for `template_name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__template_name = template_name

    @property
    def template_description(self):
        """
        The user-defined description of a template.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__template_description

    @template_description.setter
    def template_description(self, template_description):
        if template_description is not None and len(template_description) > 1000:
            raise ValueError("Invalid value for `template_description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__template_description = template_description

    @property
    def template_version_spec(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.TemplateVersionSpec`
        """  # noqa: E501
        return self.__template_version_spec

    @template_version_spec.setter
    def template_version_spec(self, template_version_spec):

        self.__template_version_spec = template_version_spec

    @property
    def guest_update_status(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.GuestUpdateStatus`
        """  # noqa: E501
        return self.__guest_update_status

    @guest_update_status.setter
    def guest_update_status(self, guest_update_status):

        self.__guest_update_status = guest_update_status

    @property
    def create_time(self):
        """
        Time when the template was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def update_time(self):
        """
        Time when the template was last updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__update_time

    @update_time.setter
    def update_time(self, update_time):

        self.__update_time = update_time

    @property
    def created_by(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.TemplateUser`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def updated_by(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.TemplateUser`
        """  # noqa: E501
        return self.__updated_by

    @updated_by.setter
    def updated_by(self, updated_by):

        self.__updated_by = updated_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Template, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


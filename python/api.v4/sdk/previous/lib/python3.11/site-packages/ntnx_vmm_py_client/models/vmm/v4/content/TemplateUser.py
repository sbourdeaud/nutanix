# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from ntnx_vmm_py_client.models.iam.v4.authn.BucketsAccessKey import BucketsAccessKey  # noqa: F401,E501
from ntnx_vmm_py_client.models.iam.v4.authn.CreationType import CreationType  # noqa: F401,E501
from ntnx_vmm_py_client.models.iam.v4.authn.User import User  # noqa: F401,E501
from ntnx_vmm_py_client.models.iam.v4.authn.UserStatusType import UserStatusType  # noqa: F401,E501
from ntnx_vmm_py_client.models.iam.v4.authn.UserType import UserType  # noqa: F401,E501

class TemplateUser(User):

    """Details for the user who created or modified the template.

    :param username: (:attr:`username`) Identifier of the user.
    :type username: 
     min=1 chars, max=255 chars
    
    :param user_type: (:attr:`user_type`) 
    :type user_type: 
    
    
    :param idp_id: (:attr:`idp_id`) Identifier of the IDP for the user.
    :type idp_id: 
    
    
    :param display_name: (:attr:`display_name`) Display name of the user. For LDAP and SAML users, this is set from AD config.
    :type display_name: 
     min=1 chars, max=255 chars
    
    :param first_name: (:attr:`first_name`) First name of the user.
    :type first_name: 
     min=1 chars, max=255 chars
    
    :param middle_initial: (:attr:`middle_initial`) Middle name of the user.
    :type middle_initial: 
     min=1 chars, max=255 chars
    
    :param last_name: (:attr:`last_name`) Last name of the user.
    :type last_name: 
     min=1 chars, max=255 chars
    
    :param email_id: (:attr:`email_id`) Email ID of the user.
    :type email_id: 
     max=255 chars
    
    :param locale: (:attr:`locale`) Default locale of the user.
    :type locale: 
    
    
    :param region: (:attr:`region`) Default region of the user.
    :type region: 
    
    
    :param password: (:attr:`password`) Password of the user.
    :type password: 
    
    
    :param is_force_reset_password_enabled: (:attr:`is_force_reset_password_enabled`) Flag to force the user to reset password.
    :type is_force_reset_password_enabled: 
    
    
    :param additional_attributes: (:attr:`additional_attributes`) Indicates additional attributes of the user.
    :type additional_attributes: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param buckets_access_keys: (:attr:`buckets_access_keys`) Bucket access keys for the user.
    :type buckets_access_keys: 
    
    
    :param last_login_time: (:attr:`last_login_time`) The last successful login time for the user.
    :type last_login_time: 
    
    
    :param created_time: (:attr:`created_time`) Creation time of the user.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) The last updated time for the user.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or Service who created the user.
    :type created_by: 
    
    
    :param last_updated_by: (:attr:`last_updated_by`) Last updated by this user ID.
    :type last_updated_by: 
    
    
    :param description: (:attr:`description`) Description of the user.
    :type description: 
    
    
    :param creation_type: (:attr:`creation_type`) 
    :type creation_type: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'username': 'str',
        'user_type': 'iam.v4.authn.UserType',
        'idp_id': 'str',
        'display_name': 'str',
        'first_name': 'str',
        'middle_initial': 'str',
        'last_name': 'str',
        'email_id': 'str',
        'locale': 'str',
        'region': 'str',
        'password': 'str',
        'is_force_reset_password_enabled': 'bool',
        'additional_attributes': 'list[common.v1.config.KVPair]',
        'status': 'iam.v4.authn.UserStatusType',
        'buckets_access_keys': 'list[iam.v4.authn.BucketsAccessKey]',
        'last_login_time': 'datetime',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'last_updated_by': 'str',
        'description': 'str',
        'creation_type': 'iam.v4.authn.CreationType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'username': 'username',
        'user_type': 'userType',
        'idp_id': 'idpId',
        'display_name': 'displayName',
        'first_name': 'firstName',
        'middle_initial': 'middleInitial',
        'last_name': 'lastName',
        'email_id': 'emailId',
        'locale': 'locale',
        'region': 'region',
        'password': 'password',
        'is_force_reset_password_enabled': 'isForceResetPasswordEnabled',
        'additional_attributes': 'additionalAttributes',
        'status': 'status',
        'buckets_access_keys': 'bucketsAccessKeys',
        'last_login_time': 'lastLoginTime',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'last_updated_by': 'lastUpdatedBy',
        'description': 'description',
        'creation_type': 'creationType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, username=None, user_type=None, idp_id=None, display_name=None, first_name=None, middle_initial=None, last_name=None, email_id=None, locale=None, region=None, password=None, is_force_reset_password_enabled=None, additional_attributes=None, status=None, buckets_access_keys=None, last_login_time=None, created_time=None, last_updated_time=None, created_by=None, last_updated_by=None, description=None, creation_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        User.__init__(self, username, user_type, idp_id, display_name, first_name, middle_initial, last_name, email_id, locale, region, password, is_force_reset_password_enabled, additional_attributes, status, buckets_access_keys, last_login_time, created_time, last_updated_time, created_by, last_updated_by, description, creation_type, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'vmm.v4.content.TemplateUser'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TemplateUser, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


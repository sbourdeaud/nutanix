# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointStatus import RecoveryPointStatus  # noqa: F401,E501
from ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointType import RecoveryPointType  # noqa: F401,E501

class BaseRecoveryPoint(ExternalizableAbstractModel):

    """A model that represents common properties of a Recovery point resources

    :param location_agnostic_id: (:attr:`location_agnostic_id`) Location agnostic identifier of the Recovery point.
    :type location_agnostic_id: 
    
    
    :param name: (:attr:`name`) The name of the Recovery point.
    :type name: 
     max=256 chars
    
    :param creation_time: (:attr:`creation_time`) The UTC date and time in ISO-8601 format when the Recovery point is created.
    :type creation_time: 
    
    
    :param expiration_time: (:attr:`expiration_time`) The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.
    :type expiration_time: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param recovery_point_type: (:attr:`recovery_point_type`) 
    :type recovery_point_type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'location_agnostic_id': 'str',
        'name': 'str',
        'creation_time': 'datetime',
        'expiration_time': 'datetime',
        'status': 'dataprotection.v4.common.RecoveryPointStatus',
        'recovery_point_type': 'dataprotection.v4.common.RecoveryPointType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'location_agnostic_id': 'locationAgnosticId',
        'name': 'name',
        'creation_time': 'creationTime',
        'expiration_time': 'expirationTime',
        'status': 'status',
        'recovery_point_type': 'recoveryPointType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, location_agnostic_id=None, name=None, creation_time=None, expiration_time=None, status=None, recovery_point_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__location_agnostic_id = None
        self.__name = None
        self.__creation_time = None
        self.__expiration_time = None
        self.__status = None
        self.__recovery_point_type = None
        self.discriminator = None
        if location_agnostic_id is not None:
            self.__location_agnostic_id = location_agnostic_id
        if name is not None:
            self.__name = name
        if creation_time is not None:
            self.__creation_time = creation_time
        if expiration_time is not None:
            self.__expiration_time = expiration_time
        if status is not None:
            self.__status = status
        if recovery_point_type is not None:
            self.__recovery_point_type = recovery_point_type

    def _initialize_object_type(self):
        return 'dataprotection.v4.common.BaseRecoveryPoint'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def location_agnostic_id(self):
        """
        Location agnostic identifier of the Recovery point.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__location_agnostic_id

    @location_agnostic_id.setter
    def location_agnostic_id(self, location_agnostic_id):
        if location_agnostic_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', location_agnostic_id):  # noqa: E501
            raise ValueError(r"Invalid value for `location_agnostic_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__location_agnostic_id = location_agnostic_id

    @property
    def name(self):
        """
        The name of the Recovery point.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self.__name = name

    @property
    def creation_time(self):
        """
        The UTC date and time in ISO-8601 format when the Recovery point is created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__creation_time

    @creation_time.setter
    def creation_time(self, creation_time):

        self.__creation_time = creation_time

    @property
    def expiration_time(self):
        """
        The UTC date and time in ISO-8601 format when the current Recovery point expires and will be garbage collected.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):

        self.__expiration_time = expiration_time

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def recovery_point_type(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointType`
        """  # noqa: E501
        return self.__recovery_point_type

    @recovery_point_type.setter
    def recovery_point_type(self, recovery_point_type):

        self.__recovery_point_type = recovery_point_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(BaseRecoveryPoint, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseRecoveryPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.vmm.v4.content.ComplianceStatus import ComplianceStatus  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.EnforcementMode import EnforcementMode  # noqa: F401,E501

class ImagePlacementStatus(object):

    """Status of an image placement policy.

    :param placement_policy_ext_id: (:attr:`placement_policy_ext_id`) The external identifier of image placement policy.
    :type placement_policy_ext_id: required
    
    
    :param compliance_status: (:attr:`compliance_status`) 
    :type compliance_status: required
    
    
    :param enforcement_mode: (:attr:`enforcement_mode`) 
    :type enforcement_mode: required
    
    
    :param policy_cluster_ext_ids: (:attr:`policy_cluster_ext_ids`) List of cluster external identifiers of the image location for the enforced placement policy.
    :type policy_cluster_ext_ids: 
    
    
    :param enforced_cluster_ext_ids: (:attr:`enforced_cluster_ext_ids`) List of cluster external identifiers for the enforced placement policy.
    :type enforced_cluster_ext_ids: 
    
    
    :param conflicting_policy_ext_ids: (:attr:`conflicting_policy_ext_ids`) List of image placement policy external identifiers that conflict with the current one.
    :type conflicting_policy_ext_ids: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'placement_policy_ext_id': 'str',
        'compliance_status': 'vmm.v4.content.ComplianceStatus',
        'enforcement_mode': 'vmm.v4.content.EnforcementMode',
        'policy_cluster_ext_ids': 'list[str]',
        'enforced_cluster_ext_ids': 'list[str]',
        'conflicting_policy_ext_ids': 'list[str]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'placement_policy_ext_id': 'placementPolicyExtId',
        'compliance_status': 'complianceStatus',
        'enforcement_mode': 'enforcementMode',
        'policy_cluster_ext_ids': 'policyClusterExtIds',
        'enforced_cluster_ext_ids': 'enforcedClusterExtIds',
        'conflicting_policy_ext_ids': 'conflictingPolicyExtIds',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, placement_policy_ext_id=None, compliance_status=None, enforcement_mode=None, policy_cluster_ext_ids=None, enforced_cluster_ext_ids=None, conflicting_policy_ext_ids=None, *args, **kwargs):  # noqa: E501
        self.__placement_policy_ext_id = None
        self.__compliance_status = None
        self.__enforcement_mode = None
        self.__policy_cluster_ext_ids = None
        self.__enforced_cluster_ext_ids = None
        self.__conflicting_policy_ext_ids = None
        self.discriminator = None
        self.__placement_policy_ext_id = placement_policy_ext_id
        self.__compliance_status = compliance_status
        self.__enforcement_mode = enforcement_mode
        if policy_cluster_ext_ids is not None:
            self.__policy_cluster_ext_ids = policy_cluster_ext_ids
        if enforced_cluster_ext_ids is not None:
            self.__enforced_cluster_ext_ids = enforced_cluster_ext_ids
        if conflicting_policy_ext_ids is not None:
            self.__conflicting_policy_ext_ids = conflicting_policy_ext_ids
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.content.ImagePlacementStatus'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def placement_policy_ext_id(self):
        """
        The external identifier of image placement policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__placement_policy_ext_id

    @placement_policy_ext_id.setter
    def placement_policy_ext_id(self, placement_policy_ext_id):
        if placement_policy_ext_id is None:
            raise ValueError("Invalid value for `placement_policy_ext_id`, must not be `None`")  # noqa: E501
        if placement_policy_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', placement_policy_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `placement_policy_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__placement_policy_ext_id = placement_policy_ext_id

    @property
    def compliance_status(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.ComplianceStatus`
        """  # noqa: E501
        return self.__compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        if compliance_status is None:
            raise ValueError("Invalid value for `compliance_status`, must not be `None`")  # noqa: E501

        self.__compliance_status = compliance_status

    @property
    def enforcement_mode(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.EnforcementMode`
        """  # noqa: E501
        return self.__enforcement_mode

    @enforcement_mode.setter
    def enforcement_mode(self, enforcement_mode):
        if enforcement_mode is None:
            raise ValueError("Invalid value for `enforcement_mode`, must not be `None`")  # noqa: E501

        self.__enforcement_mode = enforcement_mode

    @property
    def policy_cluster_ext_ids(self):
        """
        List of cluster external identifiers of the image location for the enforced placement policy.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__policy_cluster_ext_ids

    @policy_cluster_ext_ids.setter
    def policy_cluster_ext_ids(self, policy_cluster_ext_ids):

        self.__policy_cluster_ext_ids = policy_cluster_ext_ids

    @property
    def enforced_cluster_ext_ids(self):
        """
        List of cluster external identifiers for the enforced placement policy.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__enforced_cluster_ext_ids

    @enforced_cluster_ext_ids.setter
    def enforced_cluster_ext_ids(self, enforced_cluster_ext_ids):

        self.__enforced_cluster_ext_ids = enforced_cluster_ext_ids

    @property
    def conflicting_policy_ext_ids(self):
        """
        List of image placement policy external identifiers that conflict with the current one.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__conflicting_policy_ext_ids

    @conflicting_policy_ext_ids.setter
    def conflicting_policy_ext_ids(self, conflicting_policy_ext_ids):

        self.__conflicting_policy_ext_ids = conflicting_policy_ext_ids

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ImagePlacementStatus, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImagePlacementStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_vmm_py_client.models
from ntnx_vmm_py_client.models.OneOfvmm.v4.content.Imagechecksum import Imagechecksum  # noqa: F401,E501
from ntnx_vmm_py_client.models.OneOfvmm.v4.content.Imagesource import Imagesource  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.ImagePlacementStatus import ImagePlacementStatus  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.ImageType import ImageType  # noqa: F401,E501

class Image(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) The user-defined name of an image.
    :type name: required
     min=1 chars, max=256 chars
    
    :param description: (:attr:`description`) The user-defined description of an image.
    :type description: 
     max=1000 chars
    
    :param type: (:attr:`type`) 
    :type type: required
    
    
    :param checksum: (:attr:`checksum`) The checksum of an image.
    :type checksum: 
    
    
    :param size_bytes: (:attr:`size_bytes`) The size of an image in bytes.
    :type size_bytes: 
    
    
    :param source: (:attr:`source`) The source of an image, which can be a VM disk, a URL, or an Objects Lite key.
    :type source: 
    
    
    :param category_ext_ids: (:attr:`category_ext_ids`) List of external identifier of the category for an image.
    :type category_ext_ids: 
    
    
    :param cluster_location_ext_ids: (:attr:`cluster_location_ext_ids`) List of external identifier of the cluster where the image is located.
    :type cluster_location_ext_ids: 
    
    
    :param create_time: (:attr:`create_time`) Image creation time.
    :type create_time: 
    
    
    :param last_update_time: (:attr:`last_update_time`) Last updated time of an image.
    :type last_update_time: 
    
    
    :param owner_ext_id: (:attr:`owner_ext_id`) External identifier of the owner of the image.
    :type owner_ext_id: 
    
    
    :param placement_policy_status: (:attr:`placement_policy_status`) Status of an image placement policy.
    :type placement_policy_status: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'vmm.v4.content.ImageType',
        'checksum': 'OneOfvmm.v4.content.Imagechecksum',
        'size_bytes': 'int',
        'source': 'OneOfvmm.v4.content.Imagesource',
        'category_ext_ids': 'list[str]',
        'cluster_location_ext_ids': 'list[str]',
        'create_time': 'datetime',
        'last_update_time': 'datetime',
        'owner_ext_id': 'str',
        'placement_policy_status': 'list[vmm.v4.content.ImagePlacementStatus]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'checksum': 'checksum',
        'size_bytes': 'sizeBytes',
        'source': 'source',
        'category_ext_ids': 'categoryExtIds',
        'cluster_location_ext_ids': 'clusterLocationExtIds',
        'create_time': 'createTime',
        'last_update_time': 'lastUpdateTime',
        'owner_ext_id': 'ownerExtId',
        'placement_policy_status': 'placementPolicyStatus',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, type=None, checksum=None, size_bytes=None, source=None, category_ext_ids=None, cluster_location_ext_ids=None, create_time=None, last_update_time=None, owner_ext_id=None, placement_policy_status=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__type = None
        self.__checksum = None
        self.__size_bytes = None
        self.__source = None
        self.__category_ext_ids = None
        self.__cluster_location_ext_ids = None
        self.__create_time = None
        self.__last_update_time = None
        self.__owner_ext_id = None
        self.__placement_policy_status = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__type = type
        if checksum is not None:
            self.__checksum = checksum
        if size_bytes is not None:
            self.__size_bytes = size_bytes
        if source is not None:
            self.__source = source
        if category_ext_ids is not None:
            self.__category_ext_ids = category_ext_ids
        if cluster_location_ext_ids is not None:
            self.__cluster_location_ext_ids = cluster_location_ext_ids
        if create_time is not None:
            self.__create_time = create_time
        if last_update_time is not None:
            self.__last_update_time = last_update_time
        if owner_ext_id is not None:
            self.__owner_ext_id = owner_ext_id
        if placement_policy_status is not None:
            self.__placement_policy_status = placement_policy_status

    def _initialize_object_type(self):
        return 'vmm.v4.content.Image'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        The user-defined name of an image.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        The user-defined description of an image.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.ImageType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self.__type = type

    @property
    def checksum(self):
        """
        The checksum of an image.

        :type:
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.ImageSha1Checksum` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.ImageSha256Checksum`
        """  # noqa: E501
        return self.__checksum

    @checksum.setter
    def checksum(self, checksum):

        self.__checksum = checksum

    @property
    def size_bytes(self):
        """
        The size of an image in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):

        self.__size_bytes = size_bytes

    @property
    def source(self):
        """
        The source of an image, which can be a VM disk, a URL, or an Objects Lite key.

        :type:
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.UrlSource` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.VmDiskSource` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.ObjectsLiteSource`
        """  # noqa: E501
        return self.__source

    @source.setter
    def source(self, source):

        self.__source = source

    @property
    def category_ext_ids(self):
        """
        List of external identifier of the category for an image.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__category_ext_ids

    @category_ext_ids.setter
    def category_ext_ids(self, category_ext_ids):

        self.__category_ext_ids = category_ext_ids

    @property
    def cluster_location_ext_ids(self):
        """
        List of external identifier of the cluster where the image is located.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__cluster_location_ext_ids

    @cluster_location_ext_ids.setter
    def cluster_location_ext_ids(self, cluster_location_ext_ids):

        self.__cluster_location_ext_ids = cluster_location_ext_ids

    @property
    def create_time(self):
        """
        Image creation time.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def last_update_time(self):
        """
        Last updated time of an image.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):

        self.__last_update_time = last_update_time

    @property
    def owner_ext_id(self):
        """
        External identifier of the owner of the image.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__owner_ext_id

    @owner_ext_id.setter
    def owner_ext_id(self, owner_ext_id):
        if owner_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owner_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `owner_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owner_ext_id = owner_ext_id

    @property
    def placement_policy_status(self):
        """
        Status of an image placement policy.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.content.ImagePlacementStatus` ]
        """  # noqa: E501
        return self.__placement_policy_status

    @placement_policy_status.setter
    def placement_policy_status(self, placement_policy_status):

        self.__placement_policy_status = placement_policy_status

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Image, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


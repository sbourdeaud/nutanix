# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class VmStatsTuple(object):

    """A collection of VM stats.

    :param timestamp: (:attr:`timestamp`) The timestamp of a specific VM stats response data point.
    :type timestamp: 
    
    
    :param controller_avg_io_latency_micros: (:attr:`controller_avg_io_latency_micros`) The VM controller average I/O latency in microseconds.
    :type controller_avg_io_latency_micros: 
    
    
    :param controller_avg_read_io_latency_micros: (:attr:`controller_avg_read_io_latency_micros`) The VM controller average read I/O latency in microseconds.
    :type controller_avg_read_io_latency_micros: 
    
    
    :param controller_avg_read_io_size_kb: (:attr:`controller_avg_read_io_size_kb`) The VM controller average read I/O size in kilobytes.
    :type controller_avg_read_io_size_kb: 
    
    
    :param controller_avg_write_io_latency_micros: (:attr:`controller_avg_write_io_latency_micros`) The VM controller average write I/O latency in microseconds.
    :type controller_avg_write_io_latency_micros: 
    
    
    :param controller_avg_write_io_size_kb: (:attr:`controller_avg_write_io_size_kb`) The VM controller average write I/O size in kilobytes.
    :type controller_avg_write_io_size_kb: 
    
    
    :param controller_io_bandwidth_kbps: (:attr:`controller_io_bandwidth_kbps`) The VM controller I/O bandwidth in kilobytes per second.
    :type controller_io_bandwidth_kbps: 
    
    
    :param controller_num_io: (:attr:`controller_num_io`) The VM controller number of I/O requests.
    :type controller_num_io: 
    
    
    :param controller_num_iops: (:attr:`controller_num_iops`) The VM controller number of I/O operations per second.
    :type controller_num_iops: 
    
    
    :param controller_num_random_io: (:attr:`controller_num_random_io`) The VM controller number of random I/O.
    :type controller_num_random_io: 
    
    
    :param controller_num_read_io: (:attr:`controller_num_read_io`) The VM controller number of read I/O.
    :type controller_num_read_io: 
    
    
    :param controller_num_read_iops: (:attr:`controller_num_read_iops`) The VM controller number of read I/O operations per second.
    :type controller_num_read_iops: 
    
    
    :param controller_num_seq_io: (:attr:`controller_num_seq_io`) The VM controller number of sequential I/Os.
    :type controller_num_seq_io: 
    
    
    :param controller_num_write_io: (:attr:`controller_num_write_io`) The VM controller number of write I/O.
    :type controller_num_write_io: 
    
    
    :param controller_num_write_iops: (:attr:`controller_num_write_iops`) The VM controller number of write I/O operations per second.
    :type controller_num_write_iops: 
    
    
    :param controller_oplog_drain_dest_hdd_bytes: (:attr:`controller_oplog_drain_dest_hdd_bytes`) Amount of data in bytes drained to HDD tier of extent store by the VM controller.
    :type controller_oplog_drain_dest_hdd_bytes: 
    
    
    :param controller_oplog_drain_dest_ssd_bytes: (:attr:`controller_oplog_drain_dest_ssd_bytes`) Amount of data in bytes drained to SSD tier of extent store by the VM controller.
    :type controller_oplog_drain_dest_ssd_bytes: 
    
    
    :param controller_random_io_ppm: (:attr:`controller_random_io_ppm`) The VM controller number of random I/O PPM.
    :type controller_random_io_ppm: 
    
    
    :param controller_read_io_bandwidth_kbps: (:attr:`controller_read_io_bandwidth_kbps`) The VM controller number of read I/O bandwidth in kilobytes per second.
    :type controller_read_io_bandwidth_kbps: 
    
    
    :param controller_read_io_ppm: (:attr:`controller_read_io_ppm`) The VM controller number of read I/O PPM.
    :type controller_read_io_ppm: 
    
    
    :param controller_read_source_estore_hdd_local_bytes: (:attr:`controller_read_source_estore_hdd_local_bytes`) The VM disk controller number of bytes for local read source: HDD estore.
    :type controller_read_source_estore_hdd_local_bytes: 
    
    
    :param controller_read_source_estore_ssd_local_bytes: (:attr:`controller_read_source_estore_ssd_local_bytes`) The VM disk controller number of bytes for local read source: SSD estore.
    :type controller_read_source_estore_ssd_local_bytes: 
    
    
    :param controller_read_source_estore_hdd_remote_bytes: (:attr:`controller_read_source_estore_hdd_remote_bytes`) The VM disk controller number of bytes for remote read source: HDD estore.
    :type controller_read_source_estore_hdd_remote_bytes: 
    
    
    :param controller_read_source_estore_ssd_remote_bytes: (:attr:`controller_read_source_estore_ssd_remote_bytes`) The VM disk controller number of bytes for remote read source: SSD estore.
    :type controller_read_source_estore_ssd_remote_bytes: 
    
    
    :param controller_read_source_oplog_bytes: (:attr:`controller_read_source_oplog_bytes`) The VM controller read source oplog in bytes.
    :type controller_read_source_oplog_bytes: 
    
    
    :param controller_seq_io_ppm: (:attr:`controller_seq_io_ppm`) The VM controller number of sequential I/O PPM.
    :type controller_seq_io_ppm: 
    
    
    :param controller_shared_usage_bytes: (:attr:`controller_shared_usage_bytes`) The VM controller shared usage in bytes.
    :type controller_shared_usage_bytes: 
    
    
    :param controller_snapshot_usage_bytes: (:attr:`controller_snapshot_usage_bytes`) The VM controller snapshot usage in bytes.
    :type controller_snapshot_usage_bytes: 
    
    
    :param controller_storage_tier_ssd_usage_bytes: (:attr:`controller_storage_tier_ssd_usage_bytes`) The VM controller total usage on SSD tier for the VM.
    :type controller_storage_tier_ssd_usage_bytes: 
    
    
    :param controller_timespan_micros: (:attr:`controller_timespan_micros`) The VM controller timespan in microseconds.
    :type controller_timespan_micros: 
    
    
    :param controller_total_io_size_kb: (:attr:`controller_total_io_size_kb`) The VM controller number of total I/O size in kilobytes.
    :type controller_total_io_size_kb: 
    
    
    :param controller_total_io_time_micros: (:attr:`controller_total_io_time_micros`) The VM controller number of total I/O time in microseconds.
    :type controller_total_io_time_micros: 
    
    
    :param controller_total_read_io_size_kb: (:attr:`controller_total_read_io_size_kb`) The VM controller number of total read I/O size in kilobytes.
    :type controller_total_read_io_size_kb: 
    
    
    :param controller_total_read_io_time_micros: (:attr:`controller_total_read_io_time_micros`) The VM controller number of total read I/O time in microseconds.
    :type controller_total_read_io_time_micros: 
    
    
    :param controller_total_transformed_usage_bytes: (:attr:`controller_total_transformed_usage_bytes`) The VM controller number of total transformed usage in bytes.
    :type controller_total_transformed_usage_bytes: 
    
    
    :param controller_user_bytes: (:attr:`controller_user_bytes`) The VM controller user bytes.
    :type controller_user_bytes: 
    
    
    :param controller_write_dest_estore_ssd_bytes: (:attr:`controller_write_dest_estore_ssd_bytes`) The VM controller write destination SSD estore in bytes.
    :type controller_write_dest_estore_ssd_bytes: 
    
    
    :param controller_write_dest_estore_hdd_bytes: (:attr:`controller_write_dest_estore_hdd_bytes`) The VM controller write destination HDD estore in bytes.
    :type controller_write_dest_estore_hdd_bytes: 
    
    
    :param controller_write_io_bandwidth_kbps: (:attr:`controller_write_io_bandwidth_kbps`) The VM controller write I/O bandwidth in kilobytes per second.
    :type controller_write_io_bandwidth_kbps: 
    
    
    :param controller_write_io_ppm: (:attr:`controller_write_io_ppm`) The VM controller percentage of write I/O in parts per million.
    :type controller_write_io_ppm: 
    
    
    :param controller_wss120_second_union_mb: (:attr:`controller_wss120_second_union_mb`) The combined working set size of the VM disk controller in megabytes, 2 minute measurement interval.
    :type controller_wss120_second_union_mb: 
    
    
    :param controller_wss120_second_read_mb: (:attr:`controller_wss120_second_read_mb`) The read working set size of the VM disk controller in megabytes, 2 minute measurement interval.
    :type controller_wss120_second_read_mb: 
    
    
    :param controller_wss120_second_write_mb: (:attr:`controller_wss120_second_write_mb`) The write working set size of the VM disk controller in megabytes, 2 minute measurement interval.
    :type controller_wss120_second_write_mb: 
    
    
    :param controller_wss3600_second_union_mb: (:attr:`controller_wss3600_second_union_mb`) The combined working set size of the VM disk controller in megabytes, 1-hour measurement interval.
    :type controller_wss3600_second_union_mb: 
    
    
    :param controller_wss3600_second_read_mb: (:attr:`controller_wss3600_second_read_mb`) The read working set size of the VM disk controller in megabytes, 1 hour measurement interval.
    :type controller_wss3600_second_read_mb: 
    
    
    :param controller_wss3600_second_write_mb: (:attr:`controller_wss3600_second_write_mb`) The write working set size of the VM disk controller in megabytes, 1-hour measurement interval.
    :type controller_wss3600_second_write_mb: 
    
    
    :param frame_buffer_usage_ppm: (:attr:`frame_buffer_usage_ppm`) The VM frame buffer usage in PPM.
    :type frame_buffer_usage_ppm: 
    
    
    :param gpu_usage_ppm: (:attr:`gpu_usage_ppm`) The VM GPU usage in PPM.
    :type gpu_usage_ppm: 
    
    
    :param guest_memory_usage_ppm: (:attr:`guest_memory_usage_ppm`) The VM memory usage in percentage reported by a guest.
    :type guest_memory_usage_ppm: 
    
    
    :param hypervisor_avg_io_latency_micros: (:attr:`hypervisor_avg_io_latency_micros`) The average I/O latency of the VM in microseconds
    :type hypervisor_avg_io_latency_micros: 
    
    
    :param hypervisor_cpu_ready_time_ppm: (:attr:`hypervisor_cpu_ready_time_ppm`) Percentage of time that the VM was ready, but could not get scheduled to run.
    :type hypervisor_cpu_ready_time_ppm: 
    
    
    :param hypervisor_cpu_usage_ppm: (:attr:`hypervisor_cpu_usage_ppm`) The CPU usage of the VM in parts per million.
    :type hypervisor_cpu_usage_ppm: 
    
    
    :param hypervisor_io_bandwidth_kbps: (:attr:`hypervisor_io_bandwidth_kbps`) The I/O bandwidth of the VM in kilobytes per second.
    :type hypervisor_io_bandwidth_kbps: 
    
    
    :param hypervisor_memory_balloon_reclaimed_bytes: (:attr:`hypervisor_memory_balloon_reclaimed_bytes`) The memory balloon reclaimed by the VM in bytes.
    :type hypervisor_memory_balloon_reclaimed_bytes: 
    
    
    :param hypervisor_memory_balloon_reclaim_target_bytes: (:attr:`hypervisor_memory_balloon_reclaim_target_bytes`) The target memory balloon of the VM to be reclaimed in bytes.
    :type hypervisor_memory_balloon_reclaim_target_bytes: 
    
    
    :param hypervisor_memory_usage_ppm: (:attr:`hypervisor_memory_usage_ppm`) Consolidated guest memory usage in percentage.
    :type hypervisor_memory_usage_ppm: 
    
    
    :param hypervisor_num_io: (:attr:`hypervisor_num_io`) The number of I/O by the VM.
    :type hypervisor_num_io: 
    
    
    :param hypervisor_num_iops: (:attr:`hypervisor_num_iops`) The number of I/O operations by the VM per second.
    :type hypervisor_num_iops: 
    
    
    :param hypervisor_num_read_iops: (:attr:`hypervisor_num_read_iops`) The number of read I/O operations by the VM per second.
    :type hypervisor_num_read_iops: 
    
    
    :param hypervisor_num_read_io: (:attr:`hypervisor_num_read_io`) The number of read I/O operations by the VM.
    :type hypervisor_num_read_io: 
    
    
    :param hypervisor_num_received_bytes: (:attr:`hypervisor_num_received_bytes`) The number of bytes received by the VM.
    :type hypervisor_num_received_bytes: 
    
    
    :param hypervisor_num_receive_packets_dropped: (:attr:`hypervisor_num_receive_packets_dropped`) The number of packets dropped by the VM during reception.
    :type hypervisor_num_receive_packets_dropped: 
    
    
    :param hypervisor_num_transmitted_bytes: (:attr:`hypervisor_num_transmitted_bytes`) The number of bytes transmitted by the VM.
    :type hypervisor_num_transmitted_bytes: 
    
    
    :param hypervisor_num_transmit_packets_dropped: (:attr:`hypervisor_num_transmit_packets_dropped`) The number of packets dropped by the VM during transmission.
    :type hypervisor_num_transmit_packets_dropped: 
    
    
    :param hypervisor_num_write_io: (:attr:`hypervisor_num_write_io`) The number of write I/O by the VM.
    :type hypervisor_num_write_io: 
    
    
    :param hypervisor_num_write_iops: (:attr:`hypervisor_num_write_iops`) The number of write I/O operations by the VM per second.
    :type hypervisor_num_write_iops: 
    
    
    :param hypervisor_read_io_bandwidth_kbps: (:attr:`hypervisor_read_io_bandwidth_kbps`) The number of read I/O bandwidth of the VM in kilobytes per second.
    :type hypervisor_read_io_bandwidth_kbps: 
    
    
    :param hypervisor_timespan_micros: (:attr:`hypervisor_timespan_micros`) The timespan of the VM in microseconds.
    :type hypervisor_timespan_micros: 
    
    
    :param hypervisor_total_io_size_kb: (:attr:`hypervisor_total_io_size_kb`) The total I/O size of the VM in kilobytes.
    :type hypervisor_total_io_size_kb: 
    
    
    :param hypervisor_total_io_time_micros: (:attr:`hypervisor_total_io_time_micros`) The total I/O time of the VM in microseconds.
    :type hypervisor_total_io_time_micros: 
    
    
    :param hypervisor_total_read_io_size_kb: (:attr:`hypervisor_total_read_io_size_kb`) The total read I/O size of the VM in kilobytes.
    :type hypervisor_total_read_io_size_kb: 
    
    
    :param hypervisor_vm_running_time_usecs: (:attr:`hypervisor_vm_running_time_usecs`) The running time of the VM in microseconds.
    :type hypervisor_vm_running_time_usecs: 
    
    
    :param hypervisor_write_io_bandwidth_kbps: (:attr:`hypervisor_write_io_bandwidth_kbps`) The write I/O bandwidth of the VM in kilobytes per second.
    :type hypervisor_write_io_bandwidth_kbps: 
    
    
    :param memory_usage_bytes: (:attr:`memory_usage_bytes`) The VM memory usage bytes.
    :type memory_usage_bytes: 
    
    
    :param memory_usage_ppm: (:attr:`memory_usage_ppm`) The VM memory usage in PPM.
    :type memory_usage_ppm: 
    
    
    :param num_vcpus_used_ppm: (:attr:`num_vcpus_used_ppm`) The VM number of vCPUs used in PPM.
    :type num_vcpus_used_ppm: 
    
    
    :param check_score: (:attr:`check_score`) The VM NCC health check score.
    :type check_score: 
    
    
    :param cluster: (:attr:`cluster`) The UUID of the cluster on which the VM resides.
    :type cluster: 
    
    
    :param hypervisor_type: (:attr:`hypervisor_type`) Hypervisor type of the VM.
    :type hypervisor_type: 
    
    
    :param disk_usage_ppm: (:attr:`disk_usage_ppm`) The VM disk usage in PPM.
    :type disk_usage_ppm: 
    
    
    :param disk_capacity_bytes: (:attr:`disk_capacity_bytes`) The VM disk capacity in bytes.
    :type disk_capacity_bytes: 
    
    
    :param hypervisor_swap_in_rate_kbps: (:attr:`hypervisor_swap_in_rate_kbps`) The swap in rate of the VM in kilobytes per second.
    :type hypervisor_swap_in_rate_kbps: 
    
    
    :param hypervisor_swap_out_rate_kbps: (:attr:`hypervisor_swap_out_rate_kbps`) The swap out rate of the VM in kilobytes per second.
    :type hypervisor_swap_out_rate_kbps: 
    
    
    :param memory_reserved_bytes: (:attr:`memory_reserved_bytes`) The reserved memory of the VM in bytes.
    :type memory_reserved_bytes: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'timestamp': 'datetime',
        'controller_avg_io_latency_micros': 'int',
        'controller_avg_read_io_latency_micros': 'int',
        'controller_avg_read_io_size_kb': 'int',
        'controller_avg_write_io_latency_micros': 'int',
        'controller_avg_write_io_size_kb': 'int',
        'controller_io_bandwidth_kbps': 'int',
        'controller_num_io': 'int',
        'controller_num_iops': 'int',
        'controller_num_random_io': 'int',
        'controller_num_read_io': 'int',
        'controller_num_read_iops': 'int',
        'controller_num_seq_io': 'int',
        'controller_num_write_io': 'int',
        'controller_num_write_iops': 'int',
        'controller_oplog_drain_dest_hdd_bytes': 'int',
        'controller_oplog_drain_dest_ssd_bytes': 'int',
        'controller_random_io_ppm': 'int',
        'controller_read_io_bandwidth_kbps': 'int',
        'controller_read_io_ppm': 'int',
        'controller_read_source_estore_hdd_local_bytes': 'int',
        'controller_read_source_estore_ssd_local_bytes': 'int',
        'controller_read_source_estore_hdd_remote_bytes': 'int',
        'controller_read_source_estore_ssd_remote_bytes': 'int',
        'controller_read_source_oplog_bytes': 'int',
        'controller_seq_io_ppm': 'int',
        'controller_shared_usage_bytes': 'int',
        'controller_snapshot_usage_bytes': 'int',
        'controller_storage_tier_ssd_usage_bytes': 'int',
        'controller_timespan_micros': 'int',
        'controller_total_io_size_kb': 'int',
        'controller_total_io_time_micros': 'int',
        'controller_total_read_io_size_kb': 'int',
        'controller_total_read_io_time_micros': 'int',
        'controller_total_transformed_usage_bytes': 'int',
        'controller_user_bytes': 'int',
        'controller_write_dest_estore_ssd_bytes': 'int',
        'controller_write_dest_estore_hdd_bytes': 'int',
        'controller_write_io_bandwidth_kbps': 'int',
        'controller_write_io_ppm': 'int',
        'controller_wss120_second_union_mb': 'int',
        'controller_wss120_second_read_mb': 'int',
        'controller_wss120_second_write_mb': 'int',
        'controller_wss3600_second_union_mb': 'int',
        'controller_wss3600_second_read_mb': 'int',
        'controller_wss3600_second_write_mb': 'int',
        'frame_buffer_usage_ppm': 'int',
        'gpu_usage_ppm': 'int',
        'guest_memory_usage_ppm': 'int',
        'hypervisor_avg_io_latency_micros': 'int',
        'hypervisor_cpu_ready_time_ppm': 'int',
        'hypervisor_cpu_usage_ppm': 'int',
        'hypervisor_io_bandwidth_kbps': 'int',
        'hypervisor_memory_balloon_reclaimed_bytes': 'int',
        'hypervisor_memory_balloon_reclaim_target_bytes': 'int',
        'hypervisor_memory_usage_ppm': 'int',
        'hypervisor_num_io': 'int',
        'hypervisor_num_iops': 'int',
        'hypervisor_num_read_iops': 'int',
        'hypervisor_num_read_io': 'int',
        'hypervisor_num_received_bytes': 'int',
        'hypervisor_num_receive_packets_dropped': 'int',
        'hypervisor_num_transmitted_bytes': 'int',
        'hypervisor_num_transmit_packets_dropped': 'int',
        'hypervisor_num_write_io': 'int',
        'hypervisor_num_write_iops': 'int',
        'hypervisor_read_io_bandwidth_kbps': 'int',
        'hypervisor_timespan_micros': 'int',
        'hypervisor_total_io_size_kb': 'int',
        'hypervisor_total_io_time_micros': 'int',
        'hypervisor_total_read_io_size_kb': 'int',
        'hypervisor_vm_running_time_usecs': 'int',
        'hypervisor_write_io_bandwidth_kbps': 'int',
        'memory_usage_bytes': 'int',
        'memory_usage_ppm': 'int',
        'num_vcpus_used_ppm': 'int',
        'check_score': 'int',
        'cluster': 'str',
        'hypervisor_type': 'str',
        'disk_usage_ppm': 'int',
        'disk_capacity_bytes': 'int',
        'hypervisor_swap_in_rate_kbps': 'int',
        'hypervisor_swap_out_rate_kbps': 'int',
        'memory_reserved_bytes': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'controller_avg_io_latency_micros': 'controllerAvgIoLatencyMicros',
        'controller_avg_read_io_latency_micros': 'controllerAvgReadIoLatencyMicros',
        'controller_avg_read_io_size_kb': 'controllerAvgReadIoSizeKb',
        'controller_avg_write_io_latency_micros': 'controllerAvgWriteIoLatencyMicros',
        'controller_avg_write_io_size_kb': 'controllerAvgWriteIoSizeKb',
        'controller_io_bandwidth_kbps': 'controllerIoBandwidthKbps',
        'controller_num_io': 'controllerNumIo',
        'controller_num_iops': 'controllerNumIops',
        'controller_num_random_io': 'controllerNumRandomIo',
        'controller_num_read_io': 'controllerNumReadIo',
        'controller_num_read_iops': 'controllerNumReadIops',
        'controller_num_seq_io': 'controllerNumSeqIo',
        'controller_num_write_io': 'controllerNumWriteIo',
        'controller_num_write_iops': 'controllerNumWriteIops',
        'controller_oplog_drain_dest_hdd_bytes': 'controllerOplogDrainDestHddBytes',
        'controller_oplog_drain_dest_ssd_bytes': 'controllerOplogDrainDestSsdBytes',
        'controller_random_io_ppm': 'controllerRandomIoPpm',
        'controller_read_io_bandwidth_kbps': 'controllerReadIoBandwidthKbps',
        'controller_read_io_ppm': 'controllerReadIoPpm',
        'controller_read_source_estore_hdd_local_bytes': 'controllerReadSourceEstoreHddLocalBytes',
        'controller_read_source_estore_ssd_local_bytes': 'controllerReadSourceEstoreSsdLocalBytes',
        'controller_read_source_estore_hdd_remote_bytes': 'controllerReadSourceEstoreHddRemoteBytes',
        'controller_read_source_estore_ssd_remote_bytes': 'controllerReadSourceEstoreSsdRemoteBytes',
        'controller_read_source_oplog_bytes': 'controllerReadSourceOplogBytes',
        'controller_seq_io_ppm': 'controllerSeqIoPpm',
        'controller_shared_usage_bytes': 'controllerSharedUsageBytes',
        'controller_snapshot_usage_bytes': 'controllerSnapshotUsageBytes',
        'controller_storage_tier_ssd_usage_bytes': 'controllerStorageTierSsdUsageBytes',
        'controller_timespan_micros': 'controllerTimespanMicros',
        'controller_total_io_size_kb': 'controllerTotalIoSizeKb',
        'controller_total_io_time_micros': 'controllerTotalIoTimeMicros',
        'controller_total_read_io_size_kb': 'controllerTotalReadIoSizeKb',
        'controller_total_read_io_time_micros': 'controllerTotalReadIoTimeMicros',
        'controller_total_transformed_usage_bytes': 'controllerTotalTransformedUsageBytes',
        'controller_user_bytes': 'controllerUserBytes',
        'controller_write_dest_estore_ssd_bytes': 'controllerWriteDestEstoreSsdBytes',
        'controller_write_dest_estore_hdd_bytes': 'controllerWriteDestEstoreHddBytes',
        'controller_write_io_bandwidth_kbps': 'controllerWriteIoBandwidthKbps',
        'controller_write_io_ppm': 'controllerWriteIoPpm',
        'controller_wss120_second_union_mb': 'controllerWss120SecondUnionMb',
        'controller_wss120_second_read_mb': 'controllerWss120SecondReadMb',
        'controller_wss120_second_write_mb': 'controllerWss120SecondWriteMb',
        'controller_wss3600_second_union_mb': 'controllerWss3600SecondUnionMb',
        'controller_wss3600_second_read_mb': 'controllerWss3600SecondReadMb',
        'controller_wss3600_second_write_mb': 'controllerWss3600SecondWriteMb',
        'frame_buffer_usage_ppm': 'frameBufferUsagePpm',
        'gpu_usage_ppm': 'gpuUsagePpm',
        'guest_memory_usage_ppm': 'guestMemoryUsagePpm',
        'hypervisor_avg_io_latency_micros': 'hypervisorAvgIoLatencyMicros',
        'hypervisor_cpu_ready_time_ppm': 'hypervisorCpuReadyTimePpm',
        'hypervisor_cpu_usage_ppm': 'hypervisorCpuUsagePpm',
        'hypervisor_io_bandwidth_kbps': 'hypervisorIoBandwidthKbps',
        'hypervisor_memory_balloon_reclaimed_bytes': 'hypervisorMemoryBalloonReclaimedBytes',
        'hypervisor_memory_balloon_reclaim_target_bytes': 'hypervisorMemoryBalloonReclaimTargetBytes',
        'hypervisor_memory_usage_ppm': 'hypervisorMemoryUsagePpm',
        'hypervisor_num_io': 'hypervisorNumIo',
        'hypervisor_num_iops': 'hypervisorNumIops',
        'hypervisor_num_read_iops': 'hypervisorNumReadIops',
        'hypervisor_num_read_io': 'hypervisorNumReadIo',
        'hypervisor_num_received_bytes': 'hypervisorNumReceivedBytes',
        'hypervisor_num_receive_packets_dropped': 'hypervisorNumReceivePacketsDropped',
        'hypervisor_num_transmitted_bytes': 'hypervisorNumTransmittedBytes',
        'hypervisor_num_transmit_packets_dropped': 'hypervisorNumTransmitPacketsDropped',
        'hypervisor_num_write_io': 'hypervisorNumWriteIo',
        'hypervisor_num_write_iops': 'hypervisorNumWriteIops',
        'hypervisor_read_io_bandwidth_kbps': 'hypervisorReadIoBandwidthKbps',
        'hypervisor_timespan_micros': 'hypervisorTimespanMicros',
        'hypervisor_total_io_size_kb': 'hypervisorTotalIoSizeKb',
        'hypervisor_total_io_time_micros': 'hypervisorTotalIoTimeMicros',
        'hypervisor_total_read_io_size_kb': 'hypervisorTotalReadIoSizeKb',
        'hypervisor_vm_running_time_usecs': 'hypervisorVmRunningTimeUsecs',
        'hypervisor_write_io_bandwidth_kbps': 'hypervisorWriteIoBandwidthKbps',
        'memory_usage_bytes': 'memoryUsageBytes',
        'memory_usage_ppm': 'memoryUsagePpm',
        'num_vcpus_used_ppm': 'numVcpusUsedPpm',
        'check_score': 'checkScore',
        'cluster': 'cluster',
        'hypervisor_type': 'hypervisorType',
        'disk_usage_ppm': 'diskUsagePpm',
        'disk_capacity_bytes': 'diskCapacityBytes',
        'hypervisor_swap_in_rate_kbps': 'hypervisorSwapInRateKbps',
        'hypervisor_swap_out_rate_kbps': 'hypervisorSwapOutRateKbps',
        'memory_reserved_bytes': 'memoryReservedBytes',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, timestamp=None, controller_avg_io_latency_micros=None, controller_avg_read_io_latency_micros=None, controller_avg_read_io_size_kb=None, controller_avg_write_io_latency_micros=None, controller_avg_write_io_size_kb=None, controller_io_bandwidth_kbps=None, controller_num_io=None, controller_num_iops=None, controller_num_random_io=None, controller_num_read_io=None, controller_num_read_iops=None, controller_num_seq_io=None, controller_num_write_io=None, controller_num_write_iops=None, controller_oplog_drain_dest_hdd_bytes=None, controller_oplog_drain_dest_ssd_bytes=None, controller_random_io_ppm=None, controller_read_io_bandwidth_kbps=None, controller_read_io_ppm=None, controller_read_source_estore_hdd_local_bytes=None, controller_read_source_estore_ssd_local_bytes=None, controller_read_source_estore_hdd_remote_bytes=None, controller_read_source_estore_ssd_remote_bytes=None, controller_read_source_oplog_bytes=None, controller_seq_io_ppm=None, controller_shared_usage_bytes=None, controller_snapshot_usage_bytes=None, controller_storage_tier_ssd_usage_bytes=None, controller_timespan_micros=None, controller_total_io_size_kb=None, controller_total_io_time_micros=None, controller_total_read_io_size_kb=None, controller_total_read_io_time_micros=None, controller_total_transformed_usage_bytes=None, controller_user_bytes=None, controller_write_dest_estore_ssd_bytes=None, controller_write_dest_estore_hdd_bytes=None, controller_write_io_bandwidth_kbps=None, controller_write_io_ppm=None, controller_wss120_second_union_mb=None, controller_wss120_second_read_mb=None, controller_wss120_second_write_mb=None, controller_wss3600_second_union_mb=None, controller_wss3600_second_read_mb=None, controller_wss3600_second_write_mb=None, frame_buffer_usage_ppm=None, gpu_usage_ppm=None, guest_memory_usage_ppm=None, hypervisor_avg_io_latency_micros=None, hypervisor_cpu_ready_time_ppm=None, hypervisor_cpu_usage_ppm=None, hypervisor_io_bandwidth_kbps=None, hypervisor_memory_balloon_reclaimed_bytes=None, hypervisor_memory_balloon_reclaim_target_bytes=None, hypervisor_memory_usage_ppm=None, hypervisor_num_io=None, hypervisor_num_iops=None, hypervisor_num_read_iops=None, hypervisor_num_read_io=None, hypervisor_num_received_bytes=None, hypervisor_num_receive_packets_dropped=None, hypervisor_num_transmitted_bytes=None, hypervisor_num_transmit_packets_dropped=None, hypervisor_num_write_io=None, hypervisor_num_write_iops=None, hypervisor_read_io_bandwidth_kbps=None, hypervisor_timespan_micros=None, hypervisor_total_io_size_kb=None, hypervisor_total_io_time_micros=None, hypervisor_total_read_io_size_kb=None, hypervisor_vm_running_time_usecs=None, hypervisor_write_io_bandwidth_kbps=None, memory_usage_bytes=None, memory_usage_ppm=None, num_vcpus_used_ppm=None, check_score=None, cluster=None, hypervisor_type=None, disk_usage_ppm=None, disk_capacity_bytes=None, hypervisor_swap_in_rate_kbps=None, hypervisor_swap_out_rate_kbps=None, memory_reserved_bytes=None, *args, **kwargs):  # noqa: E501
        self.__timestamp = None
        self.__controller_avg_io_latency_micros = None
        self.__controller_avg_read_io_latency_micros = None
        self.__controller_avg_read_io_size_kb = None
        self.__controller_avg_write_io_latency_micros = None
        self.__controller_avg_write_io_size_kb = None
        self.__controller_io_bandwidth_kbps = None
        self.__controller_num_io = None
        self.__controller_num_iops = None
        self.__controller_num_random_io = None
        self.__controller_num_read_io = None
        self.__controller_num_read_iops = None
        self.__controller_num_seq_io = None
        self.__controller_num_write_io = None
        self.__controller_num_write_iops = None
        self.__controller_oplog_drain_dest_hdd_bytes = None
        self.__controller_oplog_drain_dest_ssd_bytes = None
        self.__controller_random_io_ppm = None
        self.__controller_read_io_bandwidth_kbps = None
        self.__controller_read_io_ppm = None
        self.__controller_read_source_estore_hdd_local_bytes = None
        self.__controller_read_source_estore_ssd_local_bytes = None
        self.__controller_read_source_estore_hdd_remote_bytes = None
        self.__controller_read_source_estore_ssd_remote_bytes = None
        self.__controller_read_source_oplog_bytes = None
        self.__controller_seq_io_ppm = None
        self.__controller_shared_usage_bytes = None
        self.__controller_snapshot_usage_bytes = None
        self.__controller_storage_tier_ssd_usage_bytes = None
        self.__controller_timespan_micros = None
        self.__controller_total_io_size_kb = None
        self.__controller_total_io_time_micros = None
        self.__controller_total_read_io_size_kb = None
        self.__controller_total_read_io_time_micros = None
        self.__controller_total_transformed_usage_bytes = None
        self.__controller_user_bytes = None
        self.__controller_write_dest_estore_ssd_bytes = None
        self.__controller_write_dest_estore_hdd_bytes = None
        self.__controller_write_io_bandwidth_kbps = None
        self.__controller_write_io_ppm = None
        self.__controller_wss120_second_union_mb = None
        self.__controller_wss120_second_read_mb = None
        self.__controller_wss120_second_write_mb = None
        self.__controller_wss3600_second_union_mb = None
        self.__controller_wss3600_second_read_mb = None
        self.__controller_wss3600_second_write_mb = None
        self.__frame_buffer_usage_ppm = None
        self.__gpu_usage_ppm = None
        self.__guest_memory_usage_ppm = None
        self.__hypervisor_avg_io_latency_micros = None
        self.__hypervisor_cpu_ready_time_ppm = None
        self.__hypervisor_cpu_usage_ppm = None
        self.__hypervisor_io_bandwidth_kbps = None
        self.__hypervisor_memory_balloon_reclaimed_bytes = None
        self.__hypervisor_memory_balloon_reclaim_target_bytes = None
        self.__hypervisor_memory_usage_ppm = None
        self.__hypervisor_num_io = None
        self.__hypervisor_num_iops = None
        self.__hypervisor_num_read_iops = None
        self.__hypervisor_num_read_io = None
        self.__hypervisor_num_received_bytes = None
        self.__hypervisor_num_receive_packets_dropped = None
        self.__hypervisor_num_transmitted_bytes = None
        self.__hypervisor_num_transmit_packets_dropped = None
        self.__hypervisor_num_write_io = None
        self.__hypervisor_num_write_iops = None
        self.__hypervisor_read_io_bandwidth_kbps = None
        self.__hypervisor_timespan_micros = None
        self.__hypervisor_total_io_size_kb = None
        self.__hypervisor_total_io_time_micros = None
        self.__hypervisor_total_read_io_size_kb = None
        self.__hypervisor_vm_running_time_usecs = None
        self.__hypervisor_write_io_bandwidth_kbps = None
        self.__memory_usage_bytes = None
        self.__memory_usage_ppm = None
        self.__num_vcpus_used_ppm = None
        self.__check_score = None
        self.__cluster = None
        self.__hypervisor_type = None
        self.__disk_usage_ppm = None
        self.__disk_capacity_bytes = None
        self.__hypervisor_swap_in_rate_kbps = None
        self.__hypervisor_swap_out_rate_kbps = None
        self.__memory_reserved_bytes = None
        self.discriminator = None
        if timestamp is not None:
            self.__timestamp = timestamp
        if controller_avg_io_latency_micros is not None:
            self.__controller_avg_io_latency_micros = controller_avg_io_latency_micros
        if controller_avg_read_io_latency_micros is not None:
            self.__controller_avg_read_io_latency_micros = controller_avg_read_io_latency_micros
        if controller_avg_read_io_size_kb is not None:
            self.__controller_avg_read_io_size_kb = controller_avg_read_io_size_kb
        if controller_avg_write_io_latency_micros is not None:
            self.__controller_avg_write_io_latency_micros = controller_avg_write_io_latency_micros
        if controller_avg_write_io_size_kb is not None:
            self.__controller_avg_write_io_size_kb = controller_avg_write_io_size_kb
        if controller_io_bandwidth_kbps is not None:
            self.__controller_io_bandwidth_kbps = controller_io_bandwidth_kbps
        if controller_num_io is not None:
            self.__controller_num_io = controller_num_io
        if controller_num_iops is not None:
            self.__controller_num_iops = controller_num_iops
        if controller_num_random_io is not None:
            self.__controller_num_random_io = controller_num_random_io
        if controller_num_read_io is not None:
            self.__controller_num_read_io = controller_num_read_io
        if controller_num_read_iops is not None:
            self.__controller_num_read_iops = controller_num_read_iops
        if controller_num_seq_io is not None:
            self.__controller_num_seq_io = controller_num_seq_io
        if controller_num_write_io is not None:
            self.__controller_num_write_io = controller_num_write_io
        if controller_num_write_iops is not None:
            self.__controller_num_write_iops = controller_num_write_iops
        if controller_oplog_drain_dest_hdd_bytes is not None:
            self.__controller_oplog_drain_dest_hdd_bytes = controller_oplog_drain_dest_hdd_bytes
        if controller_oplog_drain_dest_ssd_bytes is not None:
            self.__controller_oplog_drain_dest_ssd_bytes = controller_oplog_drain_dest_ssd_bytes
        if controller_random_io_ppm is not None:
            self.__controller_random_io_ppm = controller_random_io_ppm
        if controller_read_io_bandwidth_kbps is not None:
            self.__controller_read_io_bandwidth_kbps = controller_read_io_bandwidth_kbps
        if controller_read_io_ppm is not None:
            self.__controller_read_io_ppm = controller_read_io_ppm
        if controller_read_source_estore_hdd_local_bytes is not None:
            self.__controller_read_source_estore_hdd_local_bytes = controller_read_source_estore_hdd_local_bytes
        if controller_read_source_estore_ssd_local_bytes is not None:
            self.__controller_read_source_estore_ssd_local_bytes = controller_read_source_estore_ssd_local_bytes
        if controller_read_source_estore_hdd_remote_bytes is not None:
            self.__controller_read_source_estore_hdd_remote_bytes = controller_read_source_estore_hdd_remote_bytes
        if controller_read_source_estore_ssd_remote_bytes is not None:
            self.__controller_read_source_estore_ssd_remote_bytes = controller_read_source_estore_ssd_remote_bytes
        if controller_read_source_oplog_bytes is not None:
            self.__controller_read_source_oplog_bytes = controller_read_source_oplog_bytes
        if controller_seq_io_ppm is not None:
            self.__controller_seq_io_ppm = controller_seq_io_ppm
        if controller_shared_usage_bytes is not None:
            self.__controller_shared_usage_bytes = controller_shared_usage_bytes
        if controller_snapshot_usage_bytes is not None:
            self.__controller_snapshot_usage_bytes = controller_snapshot_usage_bytes
        if controller_storage_tier_ssd_usage_bytes is not None:
            self.__controller_storage_tier_ssd_usage_bytes = controller_storage_tier_ssd_usage_bytes
        if controller_timespan_micros is not None:
            self.__controller_timespan_micros = controller_timespan_micros
        if controller_total_io_size_kb is not None:
            self.__controller_total_io_size_kb = controller_total_io_size_kb
        if controller_total_io_time_micros is not None:
            self.__controller_total_io_time_micros = controller_total_io_time_micros
        if controller_total_read_io_size_kb is not None:
            self.__controller_total_read_io_size_kb = controller_total_read_io_size_kb
        if controller_total_read_io_time_micros is not None:
            self.__controller_total_read_io_time_micros = controller_total_read_io_time_micros
        if controller_total_transformed_usage_bytes is not None:
            self.__controller_total_transformed_usage_bytes = controller_total_transformed_usage_bytes
        if controller_user_bytes is not None:
            self.__controller_user_bytes = controller_user_bytes
        if controller_write_dest_estore_ssd_bytes is not None:
            self.__controller_write_dest_estore_ssd_bytes = controller_write_dest_estore_ssd_bytes
        if controller_write_dest_estore_hdd_bytes is not None:
            self.__controller_write_dest_estore_hdd_bytes = controller_write_dest_estore_hdd_bytes
        if controller_write_io_bandwidth_kbps is not None:
            self.__controller_write_io_bandwidth_kbps = controller_write_io_bandwidth_kbps
        if controller_write_io_ppm is not None:
            self.__controller_write_io_ppm = controller_write_io_ppm
        if controller_wss120_second_union_mb is not None:
            self.__controller_wss120_second_union_mb = controller_wss120_second_union_mb
        if controller_wss120_second_read_mb is not None:
            self.__controller_wss120_second_read_mb = controller_wss120_second_read_mb
        if controller_wss120_second_write_mb is not None:
            self.__controller_wss120_second_write_mb = controller_wss120_second_write_mb
        if controller_wss3600_second_union_mb is not None:
            self.__controller_wss3600_second_union_mb = controller_wss3600_second_union_mb
        if controller_wss3600_second_read_mb is not None:
            self.__controller_wss3600_second_read_mb = controller_wss3600_second_read_mb
        if controller_wss3600_second_write_mb is not None:
            self.__controller_wss3600_second_write_mb = controller_wss3600_second_write_mb
        if frame_buffer_usage_ppm is not None:
            self.__frame_buffer_usage_ppm = frame_buffer_usage_ppm
        if gpu_usage_ppm is not None:
            self.__gpu_usage_ppm = gpu_usage_ppm
        if guest_memory_usage_ppm is not None:
            self.__guest_memory_usage_ppm = guest_memory_usage_ppm
        if hypervisor_avg_io_latency_micros is not None:
            self.__hypervisor_avg_io_latency_micros = hypervisor_avg_io_latency_micros
        if hypervisor_cpu_ready_time_ppm is not None:
            self.__hypervisor_cpu_ready_time_ppm = hypervisor_cpu_ready_time_ppm
        if hypervisor_cpu_usage_ppm is not None:
            self.__hypervisor_cpu_usage_ppm = hypervisor_cpu_usage_ppm
        if hypervisor_io_bandwidth_kbps is not None:
            self.__hypervisor_io_bandwidth_kbps = hypervisor_io_bandwidth_kbps
        if hypervisor_memory_balloon_reclaimed_bytes is not None:
            self.__hypervisor_memory_balloon_reclaimed_bytes = hypervisor_memory_balloon_reclaimed_bytes
        if hypervisor_memory_balloon_reclaim_target_bytes is not None:
            self.__hypervisor_memory_balloon_reclaim_target_bytes = hypervisor_memory_balloon_reclaim_target_bytes
        if hypervisor_memory_usage_ppm is not None:
            self.__hypervisor_memory_usage_ppm = hypervisor_memory_usage_ppm
        if hypervisor_num_io is not None:
            self.__hypervisor_num_io = hypervisor_num_io
        if hypervisor_num_iops is not None:
            self.__hypervisor_num_iops = hypervisor_num_iops
        if hypervisor_num_read_iops is not None:
            self.__hypervisor_num_read_iops = hypervisor_num_read_iops
        if hypervisor_num_read_io is not None:
            self.__hypervisor_num_read_io = hypervisor_num_read_io
        if hypervisor_num_received_bytes is not None:
            self.__hypervisor_num_received_bytes = hypervisor_num_received_bytes
        if hypervisor_num_receive_packets_dropped is not None:
            self.__hypervisor_num_receive_packets_dropped = hypervisor_num_receive_packets_dropped
        if hypervisor_num_transmitted_bytes is not None:
            self.__hypervisor_num_transmitted_bytes = hypervisor_num_transmitted_bytes
        if hypervisor_num_transmit_packets_dropped is not None:
            self.__hypervisor_num_transmit_packets_dropped = hypervisor_num_transmit_packets_dropped
        if hypervisor_num_write_io is not None:
            self.__hypervisor_num_write_io = hypervisor_num_write_io
        if hypervisor_num_write_iops is not None:
            self.__hypervisor_num_write_iops = hypervisor_num_write_iops
        if hypervisor_read_io_bandwidth_kbps is not None:
            self.__hypervisor_read_io_bandwidth_kbps = hypervisor_read_io_bandwidth_kbps
        if hypervisor_timespan_micros is not None:
            self.__hypervisor_timespan_micros = hypervisor_timespan_micros
        if hypervisor_total_io_size_kb is not None:
            self.__hypervisor_total_io_size_kb = hypervisor_total_io_size_kb
        if hypervisor_total_io_time_micros is not None:
            self.__hypervisor_total_io_time_micros = hypervisor_total_io_time_micros
        if hypervisor_total_read_io_size_kb is not None:
            self.__hypervisor_total_read_io_size_kb = hypervisor_total_read_io_size_kb
        if hypervisor_vm_running_time_usecs is not None:
            self.__hypervisor_vm_running_time_usecs = hypervisor_vm_running_time_usecs
        if hypervisor_write_io_bandwidth_kbps is not None:
            self.__hypervisor_write_io_bandwidth_kbps = hypervisor_write_io_bandwidth_kbps
        if memory_usage_bytes is not None:
            self.__memory_usage_bytes = memory_usage_bytes
        if memory_usage_ppm is not None:
            self.__memory_usage_ppm = memory_usage_ppm
        if num_vcpus_used_ppm is not None:
            self.__num_vcpus_used_ppm = num_vcpus_used_ppm
        if check_score is not None:
            self.__check_score = check_score
        if cluster is not None:
            self.__cluster = cluster
        if hypervisor_type is not None:
            self.__hypervisor_type = hypervisor_type
        if disk_usage_ppm is not None:
            self.__disk_usage_ppm = disk_usage_ppm
        if disk_capacity_bytes is not None:
            self.__disk_capacity_bytes = disk_capacity_bytes
        if hypervisor_swap_in_rate_kbps is not None:
            self.__hypervisor_swap_in_rate_kbps = hypervisor_swap_in_rate_kbps
        if hypervisor_swap_out_rate_kbps is not None:
            self.__hypervisor_swap_out_rate_kbps = hypervisor_swap_out_rate_kbps
        if memory_reserved_bytes is not None:
            self.__memory_reserved_bytes = memory_reserved_bytes
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.stats.VmStatsTuple'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def timestamp(self):
        """
        The timestamp of a specific VM stats response data point.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, timestamp):

        self.__timestamp = timestamp

    @property
    def controller_avg_io_latency_micros(self):
        """
        The VM controller average I/O latency in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_io_latency_micros

    @controller_avg_io_latency_micros.setter
    def controller_avg_io_latency_micros(self, controller_avg_io_latency_micros):

        self.__controller_avg_io_latency_micros = controller_avg_io_latency_micros

    @property
    def controller_avg_read_io_latency_micros(self):
        """
        The VM controller average read I/O latency in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_read_io_latency_micros

    @controller_avg_read_io_latency_micros.setter
    def controller_avg_read_io_latency_micros(self, controller_avg_read_io_latency_micros):

        self.__controller_avg_read_io_latency_micros = controller_avg_read_io_latency_micros

    @property
    def controller_avg_read_io_size_kb(self):
        """
        The VM controller average read I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_read_io_size_kb

    @controller_avg_read_io_size_kb.setter
    def controller_avg_read_io_size_kb(self, controller_avg_read_io_size_kb):

        self.__controller_avg_read_io_size_kb = controller_avg_read_io_size_kb

    @property
    def controller_avg_write_io_latency_micros(self):
        """
        The VM controller average write I/O latency in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_write_io_latency_micros

    @controller_avg_write_io_latency_micros.setter
    def controller_avg_write_io_latency_micros(self, controller_avg_write_io_latency_micros):

        self.__controller_avg_write_io_latency_micros = controller_avg_write_io_latency_micros

    @property
    def controller_avg_write_io_size_kb(self):
        """
        The VM controller average write I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_write_io_size_kb

    @controller_avg_write_io_size_kb.setter
    def controller_avg_write_io_size_kb(self, controller_avg_write_io_size_kb):

        self.__controller_avg_write_io_size_kb = controller_avg_write_io_size_kb

    @property
    def controller_io_bandwidth_kbps(self):
        """
        The VM controller I/O bandwidth in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_io_bandwidth_kbps

    @controller_io_bandwidth_kbps.setter
    def controller_io_bandwidth_kbps(self, controller_io_bandwidth_kbps):

        self.__controller_io_bandwidth_kbps = controller_io_bandwidth_kbps

    @property
    def controller_num_io(self):
        """
        The VM controller number of I/O requests.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_io

    @controller_num_io.setter
    def controller_num_io(self, controller_num_io):

        self.__controller_num_io = controller_num_io

    @property
    def controller_num_iops(self):
        """
        The VM controller number of I/O operations per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_iops

    @controller_num_iops.setter
    def controller_num_iops(self, controller_num_iops):

        self.__controller_num_iops = controller_num_iops

    @property
    def controller_num_random_io(self):
        """
        The VM controller number of random I/O.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_random_io

    @controller_num_random_io.setter
    def controller_num_random_io(self, controller_num_random_io):

        self.__controller_num_random_io = controller_num_random_io

    @property
    def controller_num_read_io(self):
        """
        The VM controller number of read I/O.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_read_io

    @controller_num_read_io.setter
    def controller_num_read_io(self, controller_num_read_io):

        self.__controller_num_read_io = controller_num_read_io

    @property
    def controller_num_read_iops(self):
        """
        The VM controller number of read I/O operations per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_read_iops

    @controller_num_read_iops.setter
    def controller_num_read_iops(self, controller_num_read_iops):

        self.__controller_num_read_iops = controller_num_read_iops

    @property
    def controller_num_seq_io(self):
        """
        The VM controller number of sequential I/Os.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_seq_io

    @controller_num_seq_io.setter
    def controller_num_seq_io(self, controller_num_seq_io):

        self.__controller_num_seq_io = controller_num_seq_io

    @property
    def controller_num_write_io(self):
        """
        The VM controller number of write I/O.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_write_io

    @controller_num_write_io.setter
    def controller_num_write_io(self, controller_num_write_io):

        self.__controller_num_write_io = controller_num_write_io

    @property
    def controller_num_write_iops(self):
        """
        The VM controller number of write I/O operations per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_write_iops

    @controller_num_write_iops.setter
    def controller_num_write_iops(self, controller_num_write_iops):

        self.__controller_num_write_iops = controller_num_write_iops

    @property
    def controller_oplog_drain_dest_hdd_bytes(self):
        """
        Amount of data in bytes drained to HDD tier of extent store by the VM controller.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_oplog_drain_dest_hdd_bytes

    @controller_oplog_drain_dest_hdd_bytes.setter
    def controller_oplog_drain_dest_hdd_bytes(self, controller_oplog_drain_dest_hdd_bytes):

        self.__controller_oplog_drain_dest_hdd_bytes = controller_oplog_drain_dest_hdd_bytes

    @property
    def controller_oplog_drain_dest_ssd_bytes(self):
        """
        Amount of data in bytes drained to SSD tier of extent store by the VM controller.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_oplog_drain_dest_ssd_bytes

    @controller_oplog_drain_dest_ssd_bytes.setter
    def controller_oplog_drain_dest_ssd_bytes(self, controller_oplog_drain_dest_ssd_bytes):

        self.__controller_oplog_drain_dest_ssd_bytes = controller_oplog_drain_dest_ssd_bytes

    @property
    def controller_random_io_ppm(self):
        """
        The VM controller number of random I/O PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_random_io_ppm

    @controller_random_io_ppm.setter
    def controller_random_io_ppm(self, controller_random_io_ppm):

        self.__controller_random_io_ppm = controller_random_io_ppm

    @property
    def controller_read_io_bandwidth_kbps(self):
        """
        The VM controller number of read I/O bandwidth in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_io_bandwidth_kbps

    @controller_read_io_bandwidth_kbps.setter
    def controller_read_io_bandwidth_kbps(self, controller_read_io_bandwidth_kbps):

        self.__controller_read_io_bandwidth_kbps = controller_read_io_bandwidth_kbps

    @property
    def controller_read_io_ppm(self):
        """
        The VM controller number of read I/O PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_io_ppm

    @controller_read_io_ppm.setter
    def controller_read_io_ppm(self, controller_read_io_ppm):

        self.__controller_read_io_ppm = controller_read_io_ppm

    @property
    def controller_read_source_estore_hdd_local_bytes(self):
        """
        The VM disk controller number of bytes for local read source: HDD estore.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_source_estore_hdd_local_bytes

    @controller_read_source_estore_hdd_local_bytes.setter
    def controller_read_source_estore_hdd_local_bytes(self, controller_read_source_estore_hdd_local_bytes):

        self.__controller_read_source_estore_hdd_local_bytes = controller_read_source_estore_hdd_local_bytes

    @property
    def controller_read_source_estore_ssd_local_bytes(self):
        """
        The VM disk controller number of bytes for local read source: SSD estore.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_source_estore_ssd_local_bytes

    @controller_read_source_estore_ssd_local_bytes.setter
    def controller_read_source_estore_ssd_local_bytes(self, controller_read_source_estore_ssd_local_bytes):

        self.__controller_read_source_estore_ssd_local_bytes = controller_read_source_estore_ssd_local_bytes

    @property
    def controller_read_source_estore_hdd_remote_bytes(self):
        """
        The VM disk controller number of bytes for remote read source: HDD estore.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_source_estore_hdd_remote_bytes

    @controller_read_source_estore_hdd_remote_bytes.setter
    def controller_read_source_estore_hdd_remote_bytes(self, controller_read_source_estore_hdd_remote_bytes):

        self.__controller_read_source_estore_hdd_remote_bytes = controller_read_source_estore_hdd_remote_bytes

    @property
    def controller_read_source_estore_ssd_remote_bytes(self):
        """
        The VM disk controller number of bytes for remote read source: SSD estore.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_source_estore_ssd_remote_bytes

    @controller_read_source_estore_ssd_remote_bytes.setter
    def controller_read_source_estore_ssd_remote_bytes(self, controller_read_source_estore_ssd_remote_bytes):

        self.__controller_read_source_estore_ssd_remote_bytes = controller_read_source_estore_ssd_remote_bytes

    @property
    def controller_read_source_oplog_bytes(self):
        """
        The VM controller read source oplog in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_source_oplog_bytes

    @controller_read_source_oplog_bytes.setter
    def controller_read_source_oplog_bytes(self, controller_read_source_oplog_bytes):

        self.__controller_read_source_oplog_bytes = controller_read_source_oplog_bytes

    @property
    def controller_seq_io_ppm(self):
        """
        The VM controller number of sequential I/O PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_seq_io_ppm

    @controller_seq_io_ppm.setter
    def controller_seq_io_ppm(self, controller_seq_io_ppm):

        self.__controller_seq_io_ppm = controller_seq_io_ppm

    @property
    def controller_shared_usage_bytes(self):
        """
        The VM controller shared usage in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_shared_usage_bytes

    @controller_shared_usage_bytes.setter
    def controller_shared_usage_bytes(self, controller_shared_usage_bytes):

        self.__controller_shared_usage_bytes = controller_shared_usage_bytes

    @property
    def controller_snapshot_usage_bytes(self):
        """
        The VM controller snapshot usage in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_snapshot_usage_bytes

    @controller_snapshot_usage_bytes.setter
    def controller_snapshot_usage_bytes(self, controller_snapshot_usage_bytes):

        self.__controller_snapshot_usage_bytes = controller_snapshot_usage_bytes

    @property
    def controller_storage_tier_ssd_usage_bytes(self):
        """
        The VM controller total usage on SSD tier for the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_storage_tier_ssd_usage_bytes

    @controller_storage_tier_ssd_usage_bytes.setter
    def controller_storage_tier_ssd_usage_bytes(self, controller_storage_tier_ssd_usage_bytes):

        self.__controller_storage_tier_ssd_usage_bytes = controller_storage_tier_ssd_usage_bytes

    @property
    def controller_timespan_micros(self):
        """
        The VM controller timespan in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_timespan_micros

    @controller_timespan_micros.setter
    def controller_timespan_micros(self, controller_timespan_micros):

        self.__controller_timespan_micros = controller_timespan_micros

    @property
    def controller_total_io_size_kb(self):
        """
        The VM controller number of total I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_io_size_kb

    @controller_total_io_size_kb.setter
    def controller_total_io_size_kb(self, controller_total_io_size_kb):

        self.__controller_total_io_size_kb = controller_total_io_size_kb

    @property
    def controller_total_io_time_micros(self):
        """
        The VM controller number of total I/O time in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_io_time_micros

    @controller_total_io_time_micros.setter
    def controller_total_io_time_micros(self, controller_total_io_time_micros):

        self.__controller_total_io_time_micros = controller_total_io_time_micros

    @property
    def controller_total_read_io_size_kb(self):
        """
        The VM controller number of total read I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_read_io_size_kb

    @controller_total_read_io_size_kb.setter
    def controller_total_read_io_size_kb(self, controller_total_read_io_size_kb):

        self.__controller_total_read_io_size_kb = controller_total_read_io_size_kb

    @property
    def controller_total_read_io_time_micros(self):
        """
        The VM controller number of total read I/O time in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_read_io_time_micros

    @controller_total_read_io_time_micros.setter
    def controller_total_read_io_time_micros(self, controller_total_read_io_time_micros):

        self.__controller_total_read_io_time_micros = controller_total_read_io_time_micros

    @property
    def controller_total_transformed_usage_bytes(self):
        """
        The VM controller number of total transformed usage in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_transformed_usage_bytes

    @controller_total_transformed_usage_bytes.setter
    def controller_total_transformed_usage_bytes(self, controller_total_transformed_usage_bytes):

        self.__controller_total_transformed_usage_bytes = controller_total_transformed_usage_bytes

    @property
    def controller_user_bytes(self):
        """
        The VM controller user bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_user_bytes

    @controller_user_bytes.setter
    def controller_user_bytes(self, controller_user_bytes):

        self.__controller_user_bytes = controller_user_bytes

    @property
    def controller_write_dest_estore_ssd_bytes(self):
        """
        The VM controller write destination SSD estore in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_write_dest_estore_ssd_bytes

    @controller_write_dest_estore_ssd_bytes.setter
    def controller_write_dest_estore_ssd_bytes(self, controller_write_dest_estore_ssd_bytes):

        self.__controller_write_dest_estore_ssd_bytes = controller_write_dest_estore_ssd_bytes

    @property
    def controller_write_dest_estore_hdd_bytes(self):
        """
        The VM controller write destination HDD estore in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_write_dest_estore_hdd_bytes

    @controller_write_dest_estore_hdd_bytes.setter
    def controller_write_dest_estore_hdd_bytes(self, controller_write_dest_estore_hdd_bytes):

        self.__controller_write_dest_estore_hdd_bytes = controller_write_dest_estore_hdd_bytes

    @property
    def controller_write_io_bandwidth_kbps(self):
        """
        The VM controller write I/O bandwidth in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_write_io_bandwidth_kbps

    @controller_write_io_bandwidth_kbps.setter
    def controller_write_io_bandwidth_kbps(self, controller_write_io_bandwidth_kbps):

        self.__controller_write_io_bandwidth_kbps = controller_write_io_bandwidth_kbps

    @property
    def controller_write_io_ppm(self):
        """
        The VM controller percentage of write I/O in parts per million.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_write_io_ppm

    @controller_write_io_ppm.setter
    def controller_write_io_ppm(self, controller_write_io_ppm):

        self.__controller_write_io_ppm = controller_write_io_ppm

    @property
    def controller_wss120_second_union_mb(self):
        """
        The combined working set size of the VM disk controller in megabytes, 2 minute measurement interval.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_wss120_second_union_mb

    @controller_wss120_second_union_mb.setter
    def controller_wss120_second_union_mb(self, controller_wss120_second_union_mb):

        self.__controller_wss120_second_union_mb = controller_wss120_second_union_mb

    @property
    def controller_wss120_second_read_mb(self):
        """
        The read working set size of the VM disk controller in megabytes, 2 minute measurement interval.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_wss120_second_read_mb

    @controller_wss120_second_read_mb.setter
    def controller_wss120_second_read_mb(self, controller_wss120_second_read_mb):

        self.__controller_wss120_second_read_mb = controller_wss120_second_read_mb

    @property
    def controller_wss120_second_write_mb(self):
        """
        The write working set size of the VM disk controller in megabytes, 2 minute measurement interval.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_wss120_second_write_mb

    @controller_wss120_second_write_mb.setter
    def controller_wss120_second_write_mb(self, controller_wss120_second_write_mb):

        self.__controller_wss120_second_write_mb = controller_wss120_second_write_mb

    @property
    def controller_wss3600_second_union_mb(self):
        """
        The combined working set size of the VM disk controller in megabytes, 1-hour measurement interval.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_wss3600_second_union_mb

    @controller_wss3600_second_union_mb.setter
    def controller_wss3600_second_union_mb(self, controller_wss3600_second_union_mb):

        self.__controller_wss3600_second_union_mb = controller_wss3600_second_union_mb

    @property
    def controller_wss3600_second_read_mb(self):
        """
        The read working set size of the VM disk controller in megabytes, 1 hour measurement interval.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_wss3600_second_read_mb

    @controller_wss3600_second_read_mb.setter
    def controller_wss3600_second_read_mb(self, controller_wss3600_second_read_mb):

        self.__controller_wss3600_second_read_mb = controller_wss3600_second_read_mb

    @property
    def controller_wss3600_second_write_mb(self):
        """
        The write working set size of the VM disk controller in megabytes, 1-hour measurement interval.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_wss3600_second_write_mb

    @controller_wss3600_second_write_mb.setter
    def controller_wss3600_second_write_mb(self, controller_wss3600_second_write_mb):

        self.__controller_wss3600_second_write_mb = controller_wss3600_second_write_mb

    @property
    def frame_buffer_usage_ppm(self):
        """
        The VM frame buffer usage in PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__frame_buffer_usage_ppm

    @frame_buffer_usage_ppm.setter
    def frame_buffer_usage_ppm(self, frame_buffer_usage_ppm):

        self.__frame_buffer_usage_ppm = frame_buffer_usage_ppm

    @property
    def gpu_usage_ppm(self):
        """
        The VM GPU usage in PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__gpu_usage_ppm

    @gpu_usage_ppm.setter
    def gpu_usage_ppm(self, gpu_usage_ppm):

        self.__gpu_usage_ppm = gpu_usage_ppm

    @property
    def guest_memory_usage_ppm(self):
        """
        The VM memory usage in percentage reported by a guest.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__guest_memory_usage_ppm

    @guest_memory_usage_ppm.setter
    def guest_memory_usage_ppm(self, guest_memory_usage_ppm):

        self.__guest_memory_usage_ppm = guest_memory_usage_ppm

    @property
    def hypervisor_avg_io_latency_micros(self):
        """
        The average I/O latency of the VM in microseconds

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_avg_io_latency_micros

    @hypervisor_avg_io_latency_micros.setter
    def hypervisor_avg_io_latency_micros(self, hypervisor_avg_io_latency_micros):

        self.__hypervisor_avg_io_latency_micros = hypervisor_avg_io_latency_micros

    @property
    def hypervisor_cpu_ready_time_ppm(self):
        """
        Percentage of time that the VM was ready, but could not get scheduled to run.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_cpu_ready_time_ppm

    @hypervisor_cpu_ready_time_ppm.setter
    def hypervisor_cpu_ready_time_ppm(self, hypervisor_cpu_ready_time_ppm):

        self.__hypervisor_cpu_ready_time_ppm = hypervisor_cpu_ready_time_ppm

    @property
    def hypervisor_cpu_usage_ppm(self):
        """
        The CPU usage of the VM in parts per million.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_cpu_usage_ppm

    @hypervisor_cpu_usage_ppm.setter
    def hypervisor_cpu_usage_ppm(self, hypervisor_cpu_usage_ppm):

        self.__hypervisor_cpu_usage_ppm = hypervisor_cpu_usage_ppm

    @property
    def hypervisor_io_bandwidth_kbps(self):
        """
        The I/O bandwidth of the VM in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_io_bandwidth_kbps

    @hypervisor_io_bandwidth_kbps.setter
    def hypervisor_io_bandwidth_kbps(self, hypervisor_io_bandwidth_kbps):

        self.__hypervisor_io_bandwidth_kbps = hypervisor_io_bandwidth_kbps

    @property
    def hypervisor_memory_balloon_reclaimed_bytes(self):
        """
        The memory balloon reclaimed by the VM in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_memory_balloon_reclaimed_bytes

    @hypervisor_memory_balloon_reclaimed_bytes.setter
    def hypervisor_memory_balloon_reclaimed_bytes(self, hypervisor_memory_balloon_reclaimed_bytes):

        self.__hypervisor_memory_balloon_reclaimed_bytes = hypervisor_memory_balloon_reclaimed_bytes

    @property
    def hypervisor_memory_balloon_reclaim_target_bytes(self):
        """
        The target memory balloon of the VM to be reclaimed in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_memory_balloon_reclaim_target_bytes

    @hypervisor_memory_balloon_reclaim_target_bytes.setter
    def hypervisor_memory_balloon_reclaim_target_bytes(self, hypervisor_memory_balloon_reclaim_target_bytes):

        self.__hypervisor_memory_balloon_reclaim_target_bytes = hypervisor_memory_balloon_reclaim_target_bytes

    @property
    def hypervisor_memory_usage_ppm(self):
        """
        Consolidated guest memory usage in percentage.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_memory_usage_ppm

    @hypervisor_memory_usage_ppm.setter
    def hypervisor_memory_usage_ppm(self, hypervisor_memory_usage_ppm):

        self.__hypervisor_memory_usage_ppm = hypervisor_memory_usage_ppm

    @property
    def hypervisor_num_io(self):
        """
        The number of I/O by the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_io

    @hypervisor_num_io.setter
    def hypervisor_num_io(self, hypervisor_num_io):

        self.__hypervisor_num_io = hypervisor_num_io

    @property
    def hypervisor_num_iops(self):
        """
        The number of I/O operations by the VM per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_iops

    @hypervisor_num_iops.setter
    def hypervisor_num_iops(self, hypervisor_num_iops):

        self.__hypervisor_num_iops = hypervisor_num_iops

    @property
    def hypervisor_num_read_iops(self):
        """
        The number of read I/O operations by the VM per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_read_iops

    @hypervisor_num_read_iops.setter
    def hypervisor_num_read_iops(self, hypervisor_num_read_iops):

        self.__hypervisor_num_read_iops = hypervisor_num_read_iops

    @property
    def hypervisor_num_read_io(self):
        """
        The number of read I/O operations by the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_read_io

    @hypervisor_num_read_io.setter
    def hypervisor_num_read_io(self, hypervisor_num_read_io):

        self.__hypervisor_num_read_io = hypervisor_num_read_io

    @property
    def hypervisor_num_received_bytes(self):
        """
        The number of bytes received by the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_received_bytes

    @hypervisor_num_received_bytes.setter
    def hypervisor_num_received_bytes(self, hypervisor_num_received_bytes):

        self.__hypervisor_num_received_bytes = hypervisor_num_received_bytes

    @property
    def hypervisor_num_receive_packets_dropped(self):
        """
        The number of packets dropped by the VM during reception.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_receive_packets_dropped

    @hypervisor_num_receive_packets_dropped.setter
    def hypervisor_num_receive_packets_dropped(self, hypervisor_num_receive_packets_dropped):

        self.__hypervisor_num_receive_packets_dropped = hypervisor_num_receive_packets_dropped

    @property
    def hypervisor_num_transmitted_bytes(self):
        """
        The number of bytes transmitted by the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_transmitted_bytes

    @hypervisor_num_transmitted_bytes.setter
    def hypervisor_num_transmitted_bytes(self, hypervisor_num_transmitted_bytes):

        self.__hypervisor_num_transmitted_bytes = hypervisor_num_transmitted_bytes

    @property
    def hypervisor_num_transmit_packets_dropped(self):
        """
        The number of packets dropped by the VM during transmission.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_transmit_packets_dropped

    @hypervisor_num_transmit_packets_dropped.setter
    def hypervisor_num_transmit_packets_dropped(self, hypervisor_num_transmit_packets_dropped):

        self.__hypervisor_num_transmit_packets_dropped = hypervisor_num_transmit_packets_dropped

    @property
    def hypervisor_num_write_io(self):
        """
        The number of write I/O by the VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_write_io

    @hypervisor_num_write_io.setter
    def hypervisor_num_write_io(self, hypervisor_num_write_io):

        self.__hypervisor_num_write_io = hypervisor_num_write_io

    @property
    def hypervisor_num_write_iops(self):
        """
        The number of write I/O operations by the VM per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_num_write_iops

    @hypervisor_num_write_iops.setter
    def hypervisor_num_write_iops(self, hypervisor_num_write_iops):

        self.__hypervisor_num_write_iops = hypervisor_num_write_iops

    @property
    def hypervisor_read_io_bandwidth_kbps(self):
        """
        The number of read I/O bandwidth of the VM in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_read_io_bandwidth_kbps

    @hypervisor_read_io_bandwidth_kbps.setter
    def hypervisor_read_io_bandwidth_kbps(self, hypervisor_read_io_bandwidth_kbps):

        self.__hypervisor_read_io_bandwidth_kbps = hypervisor_read_io_bandwidth_kbps

    @property
    def hypervisor_timespan_micros(self):
        """
        The timespan of the VM in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_timespan_micros

    @hypervisor_timespan_micros.setter
    def hypervisor_timespan_micros(self, hypervisor_timespan_micros):

        self.__hypervisor_timespan_micros = hypervisor_timespan_micros

    @property
    def hypervisor_total_io_size_kb(self):
        """
        The total I/O size of the VM in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_total_io_size_kb

    @hypervisor_total_io_size_kb.setter
    def hypervisor_total_io_size_kb(self, hypervisor_total_io_size_kb):

        self.__hypervisor_total_io_size_kb = hypervisor_total_io_size_kb

    @property
    def hypervisor_total_io_time_micros(self):
        """
        The total I/O time of the VM in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_total_io_time_micros

    @hypervisor_total_io_time_micros.setter
    def hypervisor_total_io_time_micros(self, hypervisor_total_io_time_micros):

        self.__hypervisor_total_io_time_micros = hypervisor_total_io_time_micros

    @property
    def hypervisor_total_read_io_size_kb(self):
        """
        The total read I/O size of the VM in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_total_read_io_size_kb

    @hypervisor_total_read_io_size_kb.setter
    def hypervisor_total_read_io_size_kb(self, hypervisor_total_read_io_size_kb):

        self.__hypervisor_total_read_io_size_kb = hypervisor_total_read_io_size_kb

    @property
    def hypervisor_vm_running_time_usecs(self):
        """
        The running time of the VM in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_vm_running_time_usecs

    @hypervisor_vm_running_time_usecs.setter
    def hypervisor_vm_running_time_usecs(self, hypervisor_vm_running_time_usecs):

        self.__hypervisor_vm_running_time_usecs = hypervisor_vm_running_time_usecs

    @property
    def hypervisor_write_io_bandwidth_kbps(self):
        """
        The write I/O bandwidth of the VM in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_write_io_bandwidth_kbps

    @hypervisor_write_io_bandwidth_kbps.setter
    def hypervisor_write_io_bandwidth_kbps(self, hypervisor_write_io_bandwidth_kbps):

        self.__hypervisor_write_io_bandwidth_kbps = hypervisor_write_io_bandwidth_kbps

    @property
    def memory_usage_bytes(self):
        """
        The VM memory usage bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_usage_bytes

    @memory_usage_bytes.setter
    def memory_usage_bytes(self, memory_usage_bytes):

        self.__memory_usage_bytes = memory_usage_bytes

    @property
    def memory_usage_ppm(self):
        """
        The VM memory usage in PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_usage_ppm

    @memory_usage_ppm.setter
    def memory_usage_ppm(self, memory_usage_ppm):

        self.__memory_usage_ppm = memory_usage_ppm

    @property
    def num_vcpus_used_ppm(self):
        """
        The VM number of vCPUs used in PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_vcpus_used_ppm

    @num_vcpus_used_ppm.setter
    def num_vcpus_used_ppm(self, num_vcpus_used_ppm):

        self.__num_vcpus_used_ppm = num_vcpus_used_ppm

    @property
    def check_score(self):
        """
        The VM NCC health check score.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__check_score

    @check_score.setter
    def check_score(self, check_score):

        self.__check_score = check_score

    @property
    def cluster(self):
        """
        The UUID of the cluster on which the VM resides.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def hypervisor_type(self):
        """
        Hypervisor type of the VM.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):

        self.__hypervisor_type = hypervisor_type

    @property
    def disk_usage_ppm(self):
        """
        The VM disk usage in PPM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__disk_usage_ppm

    @disk_usage_ppm.setter
    def disk_usage_ppm(self, disk_usage_ppm):

        self.__disk_usage_ppm = disk_usage_ppm

    @property
    def disk_capacity_bytes(self):
        """
        The VM disk capacity in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__disk_capacity_bytes

    @disk_capacity_bytes.setter
    def disk_capacity_bytes(self, disk_capacity_bytes):

        self.__disk_capacity_bytes = disk_capacity_bytes

    @property
    def hypervisor_swap_in_rate_kbps(self):
        """
        The swap in rate of the VM in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_swap_in_rate_kbps

    @hypervisor_swap_in_rate_kbps.setter
    def hypervisor_swap_in_rate_kbps(self, hypervisor_swap_in_rate_kbps):

        self.__hypervisor_swap_in_rate_kbps = hypervisor_swap_in_rate_kbps

    @property
    def hypervisor_swap_out_rate_kbps(self):
        """
        The swap out rate of the VM in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hypervisor_swap_out_rate_kbps

    @hypervisor_swap_out_rate_kbps.setter
    def hypervisor_swap_out_rate_kbps(self, hypervisor_swap_out_rate_kbps):

        self.__hypervisor_swap_out_rate_kbps = hypervisor_swap_out_rate_kbps

    @property
    def memory_reserved_bytes(self):
        """
        The reserved memory of the VM in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_reserved_bytes

    @memory_reserved_bytes.setter
    def memory_reserved_bytes(self, memory_reserved_bytes):

        self.__memory_reserved_bytes = memory_reserved_bytes

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmStatsTuple, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmStatsTuple):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


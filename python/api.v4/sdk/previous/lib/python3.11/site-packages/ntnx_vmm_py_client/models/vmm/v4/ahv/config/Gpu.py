# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.GpuMode import GpuMode  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.GpuVendor import GpuVendor  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.SBDF import SBDF  # noqa: F401,E501

class Gpu(ExternalizableAbstractModel):

    """Graphics resource information for the virtual machine.

    :param mode: (:attr:`mode`) 
    :type mode: 
    
    
    :param device_id: (:attr:`device_id`) The device Id of the GPU.
    :type device_id: 
    
    
    :param vendor: (:attr:`vendor`) 
    :type vendor: 
    
    
    :param pci_address: (:attr:`pci_address`) 
    :type pci_address: 
    
    
    :param guest_driver_version: (:attr:`guest_driver_version`) Last determined guest driver version.
    :type guest_driver_version: 
     max=128 chars
    
    :param name: (:attr:`name`) Name of the GPU resource.
    :type name: 
     max=128 chars
    
    :param frame_buffer_size_bytes: (:attr:`frame_buffer_size_bytes`) GPU frame buffer size in bytes.
    :type frame_buffer_size_bytes: 
    
    
    :param num_virtual_display_heads: (:attr:`num_virtual_display_heads`) Number of supported virtual display heads.
    :type num_virtual_display_heads: 
    
    
    :param fraction: (:attr:`fraction`) Fraction of the physical GPU assigned.
    :type fraction: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'mode': 'vmm.v4.ahv.config.GpuMode',
        'device_id': 'int',
        'vendor': 'vmm.v4.ahv.config.GpuVendor',
        'pci_address': 'vmm.v4.ahv.config.SBDF',
        'guest_driver_version': 'str',
        'name': 'str',
        'frame_buffer_size_bytes': 'int',
        'num_virtual_display_heads': 'int',
        'fraction': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'mode': 'mode',
        'device_id': 'deviceId',
        'vendor': 'vendor',
        'pci_address': 'pciAddress',
        'guest_driver_version': 'guestDriverVersion',
        'name': 'name',
        'frame_buffer_size_bytes': 'frameBufferSizeBytes',
        'num_virtual_display_heads': 'numVirtualDisplayHeads',
        'fraction': 'fraction',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, mode=None, device_id=None, vendor=None, pci_address=None, guest_driver_version=None, name=None, frame_buffer_size_bytes=None, num_virtual_display_heads=None, fraction=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__mode = None
        self.__device_id = None
        self.__vendor = None
        self.__pci_address = None
        self.__guest_driver_version = None
        self.__name = None
        self.__frame_buffer_size_bytes = None
        self.__num_virtual_display_heads = None
        self.__fraction = None
        self.discriminator = None
        if mode is not None:
            self.__mode = mode
        if device_id is not None:
            self.__device_id = device_id
        if vendor is not None:
            self.__vendor = vendor
        if pci_address is not None:
            self.__pci_address = pci_address
        if guest_driver_version is not None:
            self.__guest_driver_version = guest_driver_version
        if name is not None:
            self.__name = name
        if frame_buffer_size_bytes is not None:
            self.__frame_buffer_size_bytes = frame_buffer_size_bytes
        if num_virtual_display_heads is not None:
            self.__num_virtual_display_heads = num_virtual_display_heads
        if fraction is not None:
            self.__fraction = fraction

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.Gpu'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def mode(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.GpuMode`
        """  # noqa: E501
        return self.__mode

    @mode.setter
    def mode(self, mode):

        self.__mode = mode

    @property
    def device_id(self):
        """
        The device Id of the GPU.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__device_id

    @device_id.setter
    def device_id(self, device_id):

        self.__device_id = device_id

    @property
    def vendor(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.GpuVendor`
        """  # noqa: E501
        return self.__vendor

    @vendor.setter
    def vendor(self, vendor):

        self.__vendor = vendor

    @property
    def pci_address(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.SBDF`
        """  # noqa: E501
        return self.__pci_address

    @pci_address.setter
    def pci_address(self, pci_address):

        self.__pci_address = pci_address

    @property
    def guest_driver_version(self):
        """
        Last determined guest driver version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__guest_driver_version

    @guest_driver_version.setter
    def guest_driver_version(self, guest_driver_version):
        if guest_driver_version is not None and len(guest_driver_version) > 128:
            raise ValueError("Invalid value for `guest_driver_version`, length must be less than or equal to `128`")  # noqa: E501

        self.__guest_driver_version = guest_driver_version

    @property
    def name(self):
        """
        Name of the GPU resource.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self.__name = name

    @property
    def frame_buffer_size_bytes(self):
        """
        GPU frame buffer size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__frame_buffer_size_bytes

    @frame_buffer_size_bytes.setter
    def frame_buffer_size_bytes(self, frame_buffer_size_bytes):

        self.__frame_buffer_size_bytes = frame_buffer_size_bytes

    @property
    def num_virtual_display_heads(self):
        """
        Number of supported virtual display heads.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_virtual_display_heads

    @num_virtual_display_heads.setter
    def num_virtual_display_heads(self, num_virtual_display_heads):

        self.__num_virtual_display_heads = num_virtual_display_heads

    @property
    def fraction(self):
        """
        Fraction of the physical GPU assigned.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__fraction

    @fraction.setter
    def fraction(self, fraction):

        self.__fraction = fraction

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Gpu, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


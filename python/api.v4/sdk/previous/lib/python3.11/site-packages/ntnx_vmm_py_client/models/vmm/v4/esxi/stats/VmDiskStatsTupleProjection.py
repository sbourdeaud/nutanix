# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.vmm.v4.esxi.stats.VmDiskStatsTuple import VmDiskStatsTuple  # noqa: F401,E501

class VmDiskStatsTupleProjection(VmDiskStatsTuple):

    """

    :param timestamp: (:attr:`timestamp`) The timestamp of a specific VM stats response data point.
    :type timestamp: 
    
    
    :param controller_num_iops: (:attr:`controller_num_iops`) The VM disk controller number of I/O operations per second.
    :type controller_num_iops: 
    
    
    :param controller_total_read_io_time_micros: (:attr:`controller_total_read_io_time_micros`) The VM disk controller total read I/O time in microseconds.
    :type controller_total_read_io_time_micros: 
    
    
    :param controller_num_write_io: (:attr:`controller_num_write_io`) The VM disk controller number of write I/O.
    :type controller_num_write_io: 
    
    
    :param controller_total_io_time_micros: (:attr:`controller_total_io_time_micros`) The VM disk controller total I/O time in microseconds.
    :type controller_total_io_time_micros: 
    
    
    :param controller_num_seq_io: (:attr:`controller_num_seq_io`) The VM disk controller number of sequential I/O.
    :type controller_num_seq_io: 
    
    
    :param controller_total_io_size_kb: (:attr:`controller_total_io_size_kb`) The VM disk controller total I/O size in kilobytes.
    :type controller_total_io_size_kb: 
    
    
    :param controller_num_io: (:attr:`controller_num_io`) The VM disk controller number of I/O.
    :type controller_num_io: 
    
    
    :param controller_write_io_ppm: (:attr:`controller_write_io_ppm`) The VM disk controller percentage of write I/O in parts per million.
    :type controller_write_io_ppm: 
    
    
    :param controller_num_write_iops: (:attr:`controller_num_write_iops`) The VM disk controller number of write I/O operations per second.
    :type controller_num_write_iops: 
    
    
    :param controller_avg_write_io_latency_micros: (:attr:`controller_avg_write_io_latency_micros`) The VM disk controller average write I/O latency in microseconds.
    :type controller_avg_write_io_latency_micros: 
    
    
    :param controller_num_read_iops: (:attr:`controller_num_read_iops`) The VM disk controller number of read I/O operations per second.
    :type controller_num_read_iops: 
    
    
    :param controller_total_read_io_size_kb: (:attr:`controller_total_read_io_size_kb`) The VM disk controller total read I/O size in kilobytes.
    :type controller_total_read_io_size_kb: 
    
    
    :param controller_read_io_ppm: (:attr:`controller_read_io_ppm`) The VM disk controller percentage of read I/O in parts per million.
    :type controller_read_io_ppm: 
    
    
    :param controller_avg_io_latency_micros: (:attr:`controller_avg_io_latency_micros`) The VM disk controller average I/O latency in microseconds.
    :type controller_avg_io_latency_micros: 
    
    
    :param controller_num_read_io: (:attr:`controller_num_read_io`) The VM disk controller number of read I/O.
    :type controller_num_read_io: 
    
    
    :param controller_seq_io_ppm: (:attr:`controller_seq_io_ppm`) The VM disk controller percentage of sequential I/O in parts per million.
    :type controller_seq_io_ppm: 
    
    
    :param controller_read_io_bandwidth_kbps: (:attr:`controller_read_io_bandwidth_kbps`) The VM disk controller number of read I/O bandwidth in kilobytes per second.
    :type controller_read_io_bandwidth_kbps: 
    
    
    :param controller_io_bandwidth_kbps: (:attr:`controller_io_bandwidth_kbps`) The VM disk controller number of I/O bandwidth in kilobytes per second.
    :type controller_io_bandwidth_kbps: 
    
    
    :param controller_write_io_bandwidth_kbps: (:attr:`controller_write_io_bandwidth_kbps`) The VM disk controller write I/O bandwidth in kilobytes per second.
    :type controller_write_io_bandwidth_kbps: 
    
    
    :param controller_user_bytes: (:attr:`controller_user_bytes`) The VM disk controller user bytes.
    :type controller_user_bytes: 
    
    
    :param controller_random_io_ppm: (:attr:`controller_random_io_ppm`) The VM disk controller percentage of random I/O in parts per million.
    :type controller_random_io_ppm: 
    
    
    :param controller_avg_read_io_size_kb: (:attr:`controller_avg_read_io_size_kb`) The VM disk controller average read I/O size in kilobytes.
    :type controller_avg_read_io_size_kb: 
    
    
    :param controller_avg_write_io_size_kb: (:attr:`controller_avg_write_io_size_kb`) The VM disk controller average write I/O size in kilobytes.
    :type controller_avg_write_io_size_kb: 
    
    
    :param controller_avg_read_io_latency_micros: (:attr:`controller_avg_read_io_latency_micros`) The VM disk controller average read I/O latency in microseconds.
    :type controller_avg_read_io_latency_micros: 
    
    
    :param controller_timespan_micros: (:attr:`controller_timespan_micros`) The VM disk controller timespan in microseconds.
    :type controller_timespan_micros: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'timestamp': 'datetime',
        'controller_num_iops': 'int',
        'controller_total_read_io_time_micros': 'int',
        'controller_num_write_io': 'int',
        'controller_total_io_time_micros': 'int',
        'controller_num_seq_io': 'int',
        'controller_total_io_size_kb': 'int',
        'controller_num_io': 'int',
        'controller_write_io_ppm': 'int',
        'controller_num_write_iops': 'int',
        'controller_avg_write_io_latency_micros': 'int',
        'controller_num_read_iops': 'int',
        'controller_total_read_io_size_kb': 'int',
        'controller_read_io_ppm': 'int',
        'controller_avg_io_latency_micros': 'int',
        'controller_num_read_io': 'int',
        'controller_seq_io_ppm': 'int',
        'controller_read_io_bandwidth_kbps': 'int',
        'controller_io_bandwidth_kbps': 'int',
        'controller_write_io_bandwidth_kbps': 'int',
        'controller_user_bytes': 'int',
        'controller_random_io_ppm': 'int',
        'controller_avg_read_io_size_kb': 'int',
        'controller_avg_write_io_size_kb': 'int',
        'controller_avg_read_io_latency_micros': 'int',
        'controller_timespan_micros': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'controller_num_iops': 'controllerNumIops',
        'controller_total_read_io_time_micros': 'controllerTotalReadIoTimeMicros',
        'controller_num_write_io': 'controllerNumWriteIo',
        'controller_total_io_time_micros': 'controllerTotalIoTimeMicros',
        'controller_num_seq_io': 'controllerNumSeqIo',
        'controller_total_io_size_kb': 'controllerTotalIoSizeKb',
        'controller_num_io': 'controllerNumIo',
        'controller_write_io_ppm': 'controllerWriteIoPpm',
        'controller_num_write_iops': 'controllerNumWriteIops',
        'controller_avg_write_io_latency_micros': 'controllerAvgWriteIoLatencyMicros',
        'controller_num_read_iops': 'controllerNumReadIops',
        'controller_total_read_io_size_kb': 'controllerTotalReadIoSizeKb',
        'controller_read_io_ppm': 'controllerReadIoPpm',
        'controller_avg_io_latency_micros': 'controllerAvgIoLatencyMicros',
        'controller_num_read_io': 'controllerNumReadIo',
        'controller_seq_io_ppm': 'controllerSeqIoPpm',
        'controller_read_io_bandwidth_kbps': 'controllerReadIoBandwidthKbps',
        'controller_io_bandwidth_kbps': 'controllerIoBandwidthKbps',
        'controller_write_io_bandwidth_kbps': 'controllerWriteIoBandwidthKbps',
        'controller_user_bytes': 'controllerUserBytes',
        'controller_random_io_ppm': 'controllerRandomIoPpm',
        'controller_avg_read_io_size_kb': 'controllerAvgReadIoSizeKb',
        'controller_avg_write_io_size_kb': 'controllerAvgWriteIoSizeKb',
        'controller_avg_read_io_latency_micros': 'controllerAvgReadIoLatencyMicros',
        'controller_timespan_micros': 'controllerTimespanMicros',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, timestamp=None, controller_num_iops=None, controller_total_read_io_time_micros=None, controller_num_write_io=None, controller_total_io_time_micros=None, controller_num_seq_io=None, controller_total_io_size_kb=None, controller_num_io=None, controller_write_io_ppm=None, controller_num_write_iops=None, controller_avg_write_io_latency_micros=None, controller_num_read_iops=None, controller_total_read_io_size_kb=None, controller_read_io_ppm=None, controller_avg_io_latency_micros=None, controller_num_read_io=None, controller_seq_io_ppm=None, controller_read_io_bandwidth_kbps=None, controller_io_bandwidth_kbps=None, controller_write_io_bandwidth_kbps=None, controller_user_bytes=None, controller_random_io_ppm=None, controller_avg_read_io_size_kb=None, controller_avg_write_io_size_kb=None, controller_avg_read_io_latency_micros=None, controller_timespan_micros=None, *args, **kwargs):  # noqa: E501
        VmDiskStatsTuple.__init__(self, timestamp, controller_num_iops, controller_total_read_io_time_micros, controller_num_write_io, controller_total_io_time_micros, controller_num_seq_io, controller_total_io_size_kb, controller_num_io, controller_write_io_ppm, controller_num_write_iops, controller_avg_write_io_latency_micros, controller_num_read_iops, controller_total_read_io_size_kb, controller_read_io_ppm, controller_avg_io_latency_micros, controller_num_read_io, controller_seq_io_ppm, controller_read_io_bandwidth_kbps, controller_io_bandwidth_kbps, controller_write_io_bandwidth_kbps, controller_user_bytes, controller_random_io_ppm, controller_avg_read_io_size_kb, controller_avg_write_io_size_kb, controller_avg_read_io_latency_micros, controller_timespan_micros, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'vmm.v4.esxi.stats.VmDiskStatsTupleProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmDiskStatsTupleProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmDiskStatsTupleProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


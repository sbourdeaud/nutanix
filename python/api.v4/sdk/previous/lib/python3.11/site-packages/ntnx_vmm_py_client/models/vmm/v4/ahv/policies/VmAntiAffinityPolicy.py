# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.policies.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.policies.UserReference import UserReference  # noqa: F401,E501

class VmAntiAffinityPolicy(ExternalizableAbstractModel):

    """VM-VM anti-affinity policy configuration.

    :param name: (:attr:`name`) VM-VM anti-affinity policy name.
    :type name: 
     min=1 chars, max=80 chars
    
    :param description: (:attr:`description`) VM-VM anti-affinity policy description.
    :type description: 
    
    
    :param create_time: (:attr:`create_time`) VM-VM anti-affinity policy creation time.
    :type create_time: 
    
    
    :param update_time: (:attr:`update_time`) VM-VM anti-affinity policy last updated time.
    :type update_time: 
    
    
    :param created_by: (:attr:`created_by`) 
    :type created_by: 
    
    
    :param updated_by: (:attr:`updated_by`) 
    :type updated_by: 
    
    
    :param categories: (:attr:`categories`) Categories configured for the VM-VM anti-affinity policy.
    :type categories: 
    
    
    :param num_compliant_vms: (:attr:`num_compliant_vms`) Number of compliant VMs which are part of the VM-VM anti-affinity policy.
    :type num_compliant_vms: 
    
    
    :param num_non_compliant_vms: (:attr:`num_non_compliant_vms`) Number of non-compliant VMs which are part of the VM-VM anti-affinity policy.
    :type num_non_compliant_vms: 
    
    
    :param num_pending_vms: (:attr:`num_pending_vms`) Number of VMs with compliance state as pending, which are part of the VM-VM anti-affinity policy.
    :type num_pending_vms: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'created_by': 'vmm.v4.ahv.policies.UserReference',
        'updated_by': 'vmm.v4.ahv.policies.UserReference',
        'categories': 'list[vmm.v4.ahv.policies.CategoryReference]',
        'num_compliant_vms': 'int',
        'num_non_compliant_vms': 'int',
        'num_pending_vms': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'categories': 'categories',
        'num_compliant_vms': 'numCompliantVms',
        'num_non_compliant_vms': 'numNonCompliantVms',
        'num_pending_vms': 'numPendingVms',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, create_time=None, update_time=None, created_by=None, updated_by=None, categories=None, num_compliant_vms=None, num_non_compliant_vms=None, num_pending_vms=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__create_time = None
        self.__update_time = None
        self.__created_by = None
        self.__updated_by = None
        self.__categories = None
        self.__num_compliant_vms = None
        self.__num_non_compliant_vms = None
        self.__num_pending_vms = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if create_time is not None:
            self.__create_time = create_time
        if update_time is not None:
            self.__update_time = update_time
        if created_by is not None:
            self.__created_by = created_by
        if updated_by is not None:
            self.__updated_by = updated_by
        if categories is not None:
            self.__categories = categories
        if num_compliant_vms is not None:
            self.__num_compliant_vms = num_compliant_vms
        if num_non_compliant_vms is not None:
            self.__num_non_compliant_vms = num_non_compliant_vms
        if num_pending_vms is not None:
            self.__num_pending_vms = num_pending_vms

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.policies.VmAntiAffinityPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        VM-VM anti-affinity policy name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        VM-VM anti-affinity policy description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def create_time(self):
        """
        VM-VM anti-affinity policy creation time.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def update_time(self):
        """
        VM-VM anti-affinity policy last updated time.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__update_time

    @update_time.setter
    def update_time(self, update_time):

        self.__update_time = update_time

    @property
    def created_by(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.policies.UserReference`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def updated_by(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.policies.UserReference`
        """  # noqa: E501
        return self.__updated_by

    @updated_by.setter
    def updated_by(self, updated_by):

        self.__updated_by = updated_by

    @property
    def categories(self):
        """
        Categories configured for the VM-VM anti-affinity policy.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.policies.CategoryReference` ]
        """  # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def num_compliant_vms(self):
        """
        Number of compliant VMs which are part of the VM-VM anti-affinity policy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_compliant_vms

    @num_compliant_vms.setter
    def num_compliant_vms(self, num_compliant_vms):

        self.__num_compliant_vms = num_compliant_vms

    @property
    def num_non_compliant_vms(self):
        """
        Number of non-compliant VMs which are part of the VM-VM anti-affinity policy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_non_compliant_vms

    @num_non_compliant_vms.setter
    def num_non_compliant_vms(self, num_non_compliant_vms):

        self.__num_non_compliant_vms = num_non_compliant_vms

    @property
    def num_pending_vms(self):
        """
        Number of VMs with compliance state as pending, which are part of the VM-VM anti-affinity policy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_pending_vms

    @num_pending_vms.setter
    def num_pending_vms(self, num_pending_vms):

        self.__num_pending_vms = num_pending_vms

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmAntiAffinityPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmAntiAffinityPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


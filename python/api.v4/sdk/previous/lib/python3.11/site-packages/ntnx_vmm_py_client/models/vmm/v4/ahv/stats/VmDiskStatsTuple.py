# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class VmDiskStatsTuple(object):

    """A collection of VM disk stats.

    :param timestamp: (:attr:`timestamp`) The timestamp of a specific VM stats response data point.
    :type timestamp: 
    
    
    :param controller_avg_io_latency_micros: (:attr:`controller_avg_io_latency_micros`) The VM disk controller average I/O latency in microseconds.
    :type controller_avg_io_latency_micros: 
    
    
    :param controller_avg_read_io_latency_micros: (:attr:`controller_avg_read_io_latency_micros`) The VM disk controller average read I/O latency in microseconds.
    :type controller_avg_read_io_latency_micros: 
    
    
    :param controller_avg_read_io_size_kb: (:attr:`controller_avg_read_io_size_kb`) The VM disk controller average read I/O size in kilobytes.
    :type controller_avg_read_io_size_kb: 
    
    
    :param controller_num_read_iops: (:attr:`controller_num_read_iops`) The VM disk controller number of read I/O operations per second.
    :type controller_num_read_iops: 
    
    
    :param controller_read_io_ppm: (:attr:`controller_read_io_ppm`) The VM disk controller percentage of read I/O in parts per million.
    :type controller_read_io_ppm: 
    
    
    :param controller_num_write_io: (:attr:`controller_num_write_io`) The VM disk controller number of write I/O.
    :type controller_num_write_io: 
    
    
    :param controller_avg_write_io_latency_micros: (:attr:`controller_avg_write_io_latency_micros`) The VM disk controller average write I/O latency in microseconds.
    :type controller_avg_write_io_latency_micros: 
    
    
    :param controller_avg_write_io_size_kb: (:attr:`controller_avg_write_io_size_kb`) The VM disk controller average write I/O size in kilobytes.
    :type controller_avg_write_io_size_kb: 
    
    
    :param controller_io_bandwidth_kbps: (:attr:`controller_io_bandwidth_kbps`) The VM disk controller number of I/O bandwidth in kilobytes per second.
    :type controller_io_bandwidth_kbps: 
    
    
    :param controller_frontend_read_ops: (:attr:`controller_frontend_read_ops`) The VM disk controller number of frontend read operations.
    :type controller_frontend_read_ops: 
    
    
    :param controller_frontend_write_ops: (:attr:`controller_frontend_write_ops`) The VM disk controller number of frontend write operations.
    :type controller_frontend_write_ops: 
    
    
    :param controller_num_io: (:attr:`controller_num_io`) The VM disk controller number of I/O.
    :type controller_num_io: 
    
    
    :param controller_num_iops: (:attr:`controller_num_iops`) The VM disk controller number of I/O operations per second.
    :type controller_num_iops: 
    
    
    :param controller_num_read_io: (:attr:`controller_num_read_io`) The VM disk controller number of read I/O.
    :type controller_num_read_io: 
    
    
    :param controller_random_read_ops: (:attr:`controller_random_read_ops`) The VM disk controller number of random read operations.
    :type controller_random_read_ops: 
    
    
    :param controller_random_write_ops: (:attr:`controller_random_write_ops`) The VM disk controller number of random write operations.
    :type controller_random_write_ops: 
    
    
    :param controller_read_io_bandwidth_kbps: (:attr:`controller_read_io_bandwidth_kbps`) The VM disk controller number of read I/O bandwidth in kilobytes per second.
    :type controller_read_io_bandwidth_kbps: 
    
    
    :param controller_seq_io_ppm: (:attr:`controller_seq_io_ppm`) The VM disk controller percentage of sequential I/O in parts per million.
    :type controller_seq_io_ppm: 
    
    
    :param controller_timespan_micros: (:attr:`controller_timespan_micros`) The VM disk controller timespan in microseconds.
    :type controller_timespan_micros: 
    
    
    :param controller_total_io_size_kb: (:attr:`controller_total_io_size_kb`) The VM disk controller total I/O size in kilobytes.
    :type controller_total_io_size_kb: 
    
    
    :param controller_total_io_time_micros: (:attr:`controller_total_io_time_micros`) The VM disk controller total I/O time in microseconds.
    :type controller_total_io_time_micros: 
    
    
    :param controller_total_read_io_size_kb: (:attr:`controller_total_read_io_size_kb`) The VM disk controller total read I/O size in kilobytes.
    :type controller_total_read_io_size_kb: 
    
    
    :param controller_total_read_io_time_micros: (:attr:`controller_total_read_io_time_micros`) The VM disk controller total read I/O time in microseconds.
    :type controller_total_read_io_time_micros: 
    
    
    :param controller_user_bytes: (:attr:`controller_user_bytes`) The VM disk controller user bytes.
    :type controller_user_bytes: 
    
    
    :param controller_vdisk_cpu_time_micros: (:attr:`controller_vdisk_cpu_time_micros`) The VM disk controller vDisk CPU time in microseconds.
    :type controller_vdisk_cpu_time_micros: 
    
    
    :param controller_write_io_bandwidth_kbps: (:attr:`controller_write_io_bandwidth_kbps`) The VM disk controller write I/O bandwidth in kilobytes per second.
    :type controller_write_io_bandwidth_kbps: 
    
    
    :param controller_write_io_ppm: (:attr:`controller_write_io_ppm`) The VM disk controller percentage of write I/O in parts per million.
    :type controller_write_io_ppm: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'timestamp': 'datetime',
        'controller_avg_io_latency_micros': 'int',
        'controller_avg_read_io_latency_micros': 'int',
        'controller_avg_read_io_size_kb': 'int',
        'controller_num_read_iops': 'int',
        'controller_read_io_ppm': 'int',
        'controller_num_write_io': 'int',
        'controller_avg_write_io_latency_micros': 'int',
        'controller_avg_write_io_size_kb': 'int',
        'controller_io_bandwidth_kbps': 'int',
        'controller_frontend_read_ops': 'int',
        'controller_frontend_write_ops': 'int',
        'controller_num_io': 'int',
        'controller_num_iops': 'int',
        'controller_num_read_io': 'int',
        'controller_random_read_ops': 'int',
        'controller_random_write_ops': 'int',
        'controller_read_io_bandwidth_kbps': 'int',
        'controller_seq_io_ppm': 'int',
        'controller_timespan_micros': 'int',
        'controller_total_io_size_kb': 'int',
        'controller_total_io_time_micros': 'int',
        'controller_total_read_io_size_kb': 'int',
        'controller_total_read_io_time_micros': 'int',
        'controller_user_bytes': 'int',
        'controller_vdisk_cpu_time_micros': 'int',
        'controller_write_io_bandwidth_kbps': 'int',
        'controller_write_io_ppm': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'controller_avg_io_latency_micros': 'controllerAvgIoLatencyMicros',
        'controller_avg_read_io_latency_micros': 'controllerAvgReadIoLatencyMicros',
        'controller_avg_read_io_size_kb': 'controllerAvgReadIoSizeKb',
        'controller_num_read_iops': 'controllerNumReadIops',
        'controller_read_io_ppm': 'controllerReadIoPpm',
        'controller_num_write_io': 'controllerNumWriteIo',
        'controller_avg_write_io_latency_micros': 'controllerAvgWriteIoLatencyMicros',
        'controller_avg_write_io_size_kb': 'controllerAvgWriteIoSizeKb',
        'controller_io_bandwidth_kbps': 'controllerIoBandwidthKbps',
        'controller_frontend_read_ops': 'controllerFrontendReadOps',
        'controller_frontend_write_ops': 'controllerFrontendWriteOps',
        'controller_num_io': 'controllerNumIo',
        'controller_num_iops': 'controllerNumIops',
        'controller_num_read_io': 'controllerNumReadIo',
        'controller_random_read_ops': 'controllerRandomReadOps',
        'controller_random_write_ops': 'controllerRandomWriteOps',
        'controller_read_io_bandwidth_kbps': 'controllerReadIoBandwidthKbps',
        'controller_seq_io_ppm': 'controllerSeqIoPpm',
        'controller_timespan_micros': 'controllerTimespanMicros',
        'controller_total_io_size_kb': 'controllerTotalIoSizeKb',
        'controller_total_io_time_micros': 'controllerTotalIoTimeMicros',
        'controller_total_read_io_size_kb': 'controllerTotalReadIoSizeKb',
        'controller_total_read_io_time_micros': 'controllerTotalReadIoTimeMicros',
        'controller_user_bytes': 'controllerUserBytes',
        'controller_vdisk_cpu_time_micros': 'controllerVdiskCpuTimeMicros',
        'controller_write_io_bandwidth_kbps': 'controllerWriteIoBandwidthKbps',
        'controller_write_io_ppm': 'controllerWriteIoPpm',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, timestamp=None, controller_avg_io_latency_micros=None, controller_avg_read_io_latency_micros=None, controller_avg_read_io_size_kb=None, controller_num_read_iops=None, controller_read_io_ppm=None, controller_num_write_io=None, controller_avg_write_io_latency_micros=None, controller_avg_write_io_size_kb=None, controller_io_bandwidth_kbps=None, controller_frontend_read_ops=None, controller_frontend_write_ops=None, controller_num_io=None, controller_num_iops=None, controller_num_read_io=None, controller_random_read_ops=None, controller_random_write_ops=None, controller_read_io_bandwidth_kbps=None, controller_seq_io_ppm=None, controller_timespan_micros=None, controller_total_io_size_kb=None, controller_total_io_time_micros=None, controller_total_read_io_size_kb=None, controller_total_read_io_time_micros=None, controller_user_bytes=None, controller_vdisk_cpu_time_micros=None, controller_write_io_bandwidth_kbps=None, controller_write_io_ppm=None, *args, **kwargs):  # noqa: E501
        self.__timestamp = None
        self.__controller_avg_io_latency_micros = None
        self.__controller_avg_read_io_latency_micros = None
        self.__controller_avg_read_io_size_kb = None
        self.__controller_num_read_iops = None
        self.__controller_read_io_ppm = None
        self.__controller_num_write_io = None
        self.__controller_avg_write_io_latency_micros = None
        self.__controller_avg_write_io_size_kb = None
        self.__controller_io_bandwidth_kbps = None
        self.__controller_frontend_read_ops = None
        self.__controller_frontend_write_ops = None
        self.__controller_num_io = None
        self.__controller_num_iops = None
        self.__controller_num_read_io = None
        self.__controller_random_read_ops = None
        self.__controller_random_write_ops = None
        self.__controller_read_io_bandwidth_kbps = None
        self.__controller_seq_io_ppm = None
        self.__controller_timespan_micros = None
        self.__controller_total_io_size_kb = None
        self.__controller_total_io_time_micros = None
        self.__controller_total_read_io_size_kb = None
        self.__controller_total_read_io_time_micros = None
        self.__controller_user_bytes = None
        self.__controller_vdisk_cpu_time_micros = None
        self.__controller_write_io_bandwidth_kbps = None
        self.__controller_write_io_ppm = None
        self.discriminator = None
        if timestamp is not None:
            self.__timestamp = timestamp
        if controller_avg_io_latency_micros is not None:
            self.__controller_avg_io_latency_micros = controller_avg_io_latency_micros
        if controller_avg_read_io_latency_micros is not None:
            self.__controller_avg_read_io_latency_micros = controller_avg_read_io_latency_micros
        if controller_avg_read_io_size_kb is not None:
            self.__controller_avg_read_io_size_kb = controller_avg_read_io_size_kb
        if controller_num_read_iops is not None:
            self.__controller_num_read_iops = controller_num_read_iops
        if controller_read_io_ppm is not None:
            self.__controller_read_io_ppm = controller_read_io_ppm
        if controller_num_write_io is not None:
            self.__controller_num_write_io = controller_num_write_io
        if controller_avg_write_io_latency_micros is not None:
            self.__controller_avg_write_io_latency_micros = controller_avg_write_io_latency_micros
        if controller_avg_write_io_size_kb is not None:
            self.__controller_avg_write_io_size_kb = controller_avg_write_io_size_kb
        if controller_io_bandwidth_kbps is not None:
            self.__controller_io_bandwidth_kbps = controller_io_bandwidth_kbps
        if controller_frontend_read_ops is not None:
            self.__controller_frontend_read_ops = controller_frontend_read_ops
        if controller_frontend_write_ops is not None:
            self.__controller_frontend_write_ops = controller_frontend_write_ops
        if controller_num_io is not None:
            self.__controller_num_io = controller_num_io
        if controller_num_iops is not None:
            self.__controller_num_iops = controller_num_iops
        if controller_num_read_io is not None:
            self.__controller_num_read_io = controller_num_read_io
        if controller_random_read_ops is not None:
            self.__controller_random_read_ops = controller_random_read_ops
        if controller_random_write_ops is not None:
            self.__controller_random_write_ops = controller_random_write_ops
        if controller_read_io_bandwidth_kbps is not None:
            self.__controller_read_io_bandwidth_kbps = controller_read_io_bandwidth_kbps
        if controller_seq_io_ppm is not None:
            self.__controller_seq_io_ppm = controller_seq_io_ppm
        if controller_timespan_micros is not None:
            self.__controller_timespan_micros = controller_timespan_micros
        if controller_total_io_size_kb is not None:
            self.__controller_total_io_size_kb = controller_total_io_size_kb
        if controller_total_io_time_micros is not None:
            self.__controller_total_io_time_micros = controller_total_io_time_micros
        if controller_total_read_io_size_kb is not None:
            self.__controller_total_read_io_size_kb = controller_total_read_io_size_kb
        if controller_total_read_io_time_micros is not None:
            self.__controller_total_read_io_time_micros = controller_total_read_io_time_micros
        if controller_user_bytes is not None:
            self.__controller_user_bytes = controller_user_bytes
        if controller_vdisk_cpu_time_micros is not None:
            self.__controller_vdisk_cpu_time_micros = controller_vdisk_cpu_time_micros
        if controller_write_io_bandwidth_kbps is not None:
            self.__controller_write_io_bandwidth_kbps = controller_write_io_bandwidth_kbps
        if controller_write_io_ppm is not None:
            self.__controller_write_io_ppm = controller_write_io_ppm
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.stats.VmDiskStatsTuple'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def timestamp(self):
        """
        The timestamp of a specific VM stats response data point.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, timestamp):

        self.__timestamp = timestamp

    @property
    def controller_avg_io_latency_micros(self):
        """
        The VM disk controller average I/O latency in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_io_latency_micros

    @controller_avg_io_latency_micros.setter
    def controller_avg_io_latency_micros(self, controller_avg_io_latency_micros):

        self.__controller_avg_io_latency_micros = controller_avg_io_latency_micros

    @property
    def controller_avg_read_io_latency_micros(self):
        """
        The VM disk controller average read I/O latency in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_read_io_latency_micros

    @controller_avg_read_io_latency_micros.setter
    def controller_avg_read_io_latency_micros(self, controller_avg_read_io_latency_micros):

        self.__controller_avg_read_io_latency_micros = controller_avg_read_io_latency_micros

    @property
    def controller_avg_read_io_size_kb(self):
        """
        The VM disk controller average read I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_read_io_size_kb

    @controller_avg_read_io_size_kb.setter
    def controller_avg_read_io_size_kb(self, controller_avg_read_io_size_kb):

        self.__controller_avg_read_io_size_kb = controller_avg_read_io_size_kb

    @property
    def controller_num_read_iops(self):
        """
        The VM disk controller number of read I/O operations per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_read_iops

    @controller_num_read_iops.setter
    def controller_num_read_iops(self, controller_num_read_iops):

        self.__controller_num_read_iops = controller_num_read_iops

    @property
    def controller_read_io_ppm(self):
        """
        The VM disk controller percentage of read I/O in parts per million.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_io_ppm

    @controller_read_io_ppm.setter
    def controller_read_io_ppm(self, controller_read_io_ppm):

        self.__controller_read_io_ppm = controller_read_io_ppm

    @property
    def controller_num_write_io(self):
        """
        The VM disk controller number of write I/O.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_write_io

    @controller_num_write_io.setter
    def controller_num_write_io(self, controller_num_write_io):

        self.__controller_num_write_io = controller_num_write_io

    @property
    def controller_avg_write_io_latency_micros(self):
        """
        The VM disk controller average write I/O latency in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_write_io_latency_micros

    @controller_avg_write_io_latency_micros.setter
    def controller_avg_write_io_latency_micros(self, controller_avg_write_io_latency_micros):

        self.__controller_avg_write_io_latency_micros = controller_avg_write_io_latency_micros

    @property
    def controller_avg_write_io_size_kb(self):
        """
        The VM disk controller average write I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_avg_write_io_size_kb

    @controller_avg_write_io_size_kb.setter
    def controller_avg_write_io_size_kb(self, controller_avg_write_io_size_kb):

        self.__controller_avg_write_io_size_kb = controller_avg_write_io_size_kb

    @property
    def controller_io_bandwidth_kbps(self):
        """
        The VM disk controller number of I/O bandwidth in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_io_bandwidth_kbps

    @controller_io_bandwidth_kbps.setter
    def controller_io_bandwidth_kbps(self, controller_io_bandwidth_kbps):

        self.__controller_io_bandwidth_kbps = controller_io_bandwidth_kbps

    @property
    def controller_frontend_read_ops(self):
        """
        The VM disk controller number of frontend read operations.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_frontend_read_ops

    @controller_frontend_read_ops.setter
    def controller_frontend_read_ops(self, controller_frontend_read_ops):

        self.__controller_frontend_read_ops = controller_frontend_read_ops

    @property
    def controller_frontend_write_ops(self):
        """
        The VM disk controller number of frontend write operations.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_frontend_write_ops

    @controller_frontend_write_ops.setter
    def controller_frontend_write_ops(self, controller_frontend_write_ops):

        self.__controller_frontend_write_ops = controller_frontend_write_ops

    @property
    def controller_num_io(self):
        """
        The VM disk controller number of I/O.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_io

    @controller_num_io.setter
    def controller_num_io(self, controller_num_io):

        self.__controller_num_io = controller_num_io

    @property
    def controller_num_iops(self):
        """
        The VM disk controller number of I/O operations per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_iops

    @controller_num_iops.setter
    def controller_num_iops(self, controller_num_iops):

        self.__controller_num_iops = controller_num_iops

    @property
    def controller_num_read_io(self):
        """
        The VM disk controller number of read I/O.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_num_read_io

    @controller_num_read_io.setter
    def controller_num_read_io(self, controller_num_read_io):

        self.__controller_num_read_io = controller_num_read_io

    @property
    def controller_random_read_ops(self):
        """
        The VM disk controller number of random read operations.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_random_read_ops

    @controller_random_read_ops.setter
    def controller_random_read_ops(self, controller_random_read_ops):

        self.__controller_random_read_ops = controller_random_read_ops

    @property
    def controller_random_write_ops(self):
        """
        The VM disk controller number of random write operations.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_random_write_ops

    @controller_random_write_ops.setter
    def controller_random_write_ops(self, controller_random_write_ops):

        self.__controller_random_write_ops = controller_random_write_ops

    @property
    def controller_read_io_bandwidth_kbps(self):
        """
        The VM disk controller number of read I/O bandwidth in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_read_io_bandwidth_kbps

    @controller_read_io_bandwidth_kbps.setter
    def controller_read_io_bandwidth_kbps(self, controller_read_io_bandwidth_kbps):

        self.__controller_read_io_bandwidth_kbps = controller_read_io_bandwidth_kbps

    @property
    def controller_seq_io_ppm(self):
        """
        The VM disk controller percentage of sequential I/O in parts per million.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_seq_io_ppm

    @controller_seq_io_ppm.setter
    def controller_seq_io_ppm(self, controller_seq_io_ppm):

        self.__controller_seq_io_ppm = controller_seq_io_ppm

    @property
    def controller_timespan_micros(self):
        """
        The VM disk controller timespan in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_timespan_micros

    @controller_timespan_micros.setter
    def controller_timespan_micros(self, controller_timespan_micros):

        self.__controller_timespan_micros = controller_timespan_micros

    @property
    def controller_total_io_size_kb(self):
        """
        The VM disk controller total I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_io_size_kb

    @controller_total_io_size_kb.setter
    def controller_total_io_size_kb(self, controller_total_io_size_kb):

        self.__controller_total_io_size_kb = controller_total_io_size_kb

    @property
    def controller_total_io_time_micros(self):
        """
        The VM disk controller total I/O time in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_io_time_micros

    @controller_total_io_time_micros.setter
    def controller_total_io_time_micros(self, controller_total_io_time_micros):

        self.__controller_total_io_time_micros = controller_total_io_time_micros

    @property
    def controller_total_read_io_size_kb(self):
        """
        The VM disk controller total read I/O size in kilobytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_read_io_size_kb

    @controller_total_read_io_size_kb.setter
    def controller_total_read_io_size_kb(self, controller_total_read_io_size_kb):

        self.__controller_total_read_io_size_kb = controller_total_read_io_size_kb

    @property
    def controller_total_read_io_time_micros(self):
        """
        The VM disk controller total read I/O time in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_total_read_io_time_micros

    @controller_total_read_io_time_micros.setter
    def controller_total_read_io_time_micros(self, controller_total_read_io_time_micros):

        self.__controller_total_read_io_time_micros = controller_total_read_io_time_micros

    @property
    def controller_user_bytes(self):
        """
        The VM disk controller user bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_user_bytes

    @controller_user_bytes.setter
    def controller_user_bytes(self, controller_user_bytes):

        self.__controller_user_bytes = controller_user_bytes

    @property
    def controller_vdisk_cpu_time_micros(self):
        """
        The VM disk controller vDisk CPU time in microseconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_vdisk_cpu_time_micros

    @controller_vdisk_cpu_time_micros.setter
    def controller_vdisk_cpu_time_micros(self, controller_vdisk_cpu_time_micros):

        self.__controller_vdisk_cpu_time_micros = controller_vdisk_cpu_time_micros

    @property
    def controller_write_io_bandwidth_kbps(self):
        """
        The VM disk controller write I/O bandwidth in kilobytes per second.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_write_io_bandwidth_kbps

    @controller_write_io_bandwidth_kbps.setter
    def controller_write_io_bandwidth_kbps(self, controller_write_io_bandwidth_kbps):

        self.__controller_write_io_bandwidth_kbps = controller_write_io_bandwidth_kbps

    @property
    def controller_write_io_ppm(self):
        """
        The VM disk controller percentage of write I/O in parts per million.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__controller_write_io_ppm

    @controller_write_io_ppm.setter
    def controller_write_io_ppm(self, controller_write_io_ppm):

        self.__controller_write_io_ppm = controller_write_io_ppm

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmDiskStatsTuple, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmDiskStatsTuple):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


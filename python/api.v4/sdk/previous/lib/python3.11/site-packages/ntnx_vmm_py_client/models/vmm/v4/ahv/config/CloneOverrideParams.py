# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_vmm_py_client.models
from ntnx_vmm_py_client.models.OneOfvmm.v4.ahv.config.CloneOverrideParamsboot_config import CloneOverrideParamsboot_config  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.GuestCustomizationParams import GuestCustomizationParams  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.Nic import Nic  # noqa: F401,E501

class CloneOverrideParams(object):

    """VM clone override specification.

    :param name: (:attr:`name`) VM name.
    :type name: 
     max=80 chars
    
    :param num_sockets: (:attr:`num_sockets`) Number of vCPU sockets.
    :type num_sockets: 
    
     min=1,
    :param num_cores_per_socket: (:attr:`num_cores_per_socket`) Number of cores per socket.
    :type num_cores_per_socket: 
    
     min=1,
    :param num_threads_per_core: (:attr:`num_threads_per_core`) Number of cores per socket.
    :type num_threads_per_core: 
    
     min=1,
    :param memory_size_bytes: (:attr:`memory_size_bytes`) Memory size in bytes.
    :type memory_size_bytes: 
    
     min=1,
    :param nics: (:attr:`nics`) NICs attached to the VM.
    :type nics: 
    
    
    :param boot_config: (:attr:`boot_config`) Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
    :type boot_config: 
    
    
    :param guest_customization: (:attr:`guest_customization`) 
    :type guest_customization: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'num_sockets': 'int',
        'num_cores_per_socket': 'int',
        'num_threads_per_core': 'int',
        'memory_size_bytes': 'int',
        'nics': 'list[vmm.v4.ahv.config.Nic]',
        'boot_config': 'OneOfvmm.v4.ahv.config.CloneOverrideParamsboot_config',
        'guest_customization': 'vmm.v4.ahv.config.GuestCustomizationParams',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'num_sockets': 'numSockets',
        'num_cores_per_socket': 'numCoresPerSocket',
        'num_threads_per_core': 'numThreadsPerCore',
        'memory_size_bytes': 'memorySizeBytes',
        'nics': 'nics',
        'boot_config': 'bootConfig',
        'guest_customization': 'guestCustomization',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, num_sockets=None, num_cores_per_socket=None, num_threads_per_core=None, memory_size_bytes=None, nics=None, boot_config=None, guest_customization=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__num_sockets = None
        self.__num_cores_per_socket = None
        self.__num_threads_per_core = None
        self.__memory_size_bytes = None
        self.__nics = None
        self.__boot_config = None
        self.__guest_customization = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if num_sockets is not None:
            self.__num_sockets = num_sockets
        if num_cores_per_socket is not None:
            self.__num_cores_per_socket = num_cores_per_socket
        if num_threads_per_core is not None:
            self.__num_threads_per_core = num_threads_per_core
        if memory_size_bytes is not None:
            self.__memory_size_bytes = memory_size_bytes
        if nics is not None:
            self.__nics = nics
        if boot_config is not None:
            self.__boot_config = boot_config
        if guest_customization is not None:
            self.__guest_customization = guest_customization
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.CloneOverrideParams'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        VM name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501

        self.__name = name

    @property
    def num_sockets(self):
        """
        Number of vCPU sockets.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_sockets

    @num_sockets.setter
    def num_sockets(self, num_sockets):
        if num_sockets is not None and num_sockets < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_sockets`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_sockets = num_sockets

    @property
    def num_cores_per_socket(self):
        """
        Number of cores per socket.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_cores_per_socket

    @num_cores_per_socket.setter
    def num_cores_per_socket(self, num_cores_per_socket):
        if num_cores_per_socket is not None and num_cores_per_socket < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_cores_per_socket`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_cores_per_socket = num_cores_per_socket

    @property
    def num_threads_per_core(self):
        """
        Number of cores per socket.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_threads_per_core

    @num_threads_per_core.setter
    def num_threads_per_core(self, num_threads_per_core):
        if num_threads_per_core is not None and num_threads_per_core < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_threads_per_core`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_threads_per_core = num_threads_per_core

    @property
    def memory_size_bytes(self):
        """
        Memory size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_size_bytes

    @memory_size_bytes.setter
    def memory_size_bytes(self, memory_size_bytes):
        if memory_size_bytes is not None and memory_size_bytes < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_size_bytes`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__memory_size_bytes = memory_size_bytes

    @property
    def nics(self):
        """
        NICs attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.Nic` ]
        """  # noqa: E501
        return self.__nics

    @nics.setter
    def nics(self, nics):

        self.__nics = nics

    @property
    def boot_config(self):
        """
        Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.

        :type:
                :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.LegacyBoot` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.UefiBoot`
        """  # noqa: E501
        return self.__boot_config

    @boot_config.setter
    def boot_config(self, boot_config):

        self.__boot_config = boot_config

    @property
    def guest_customization(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.GuestCustomizationParams`
        """  # noqa: E501
        return self.__guest_customization

    @guest_customization.setter
    def guest_customization(self, guest_customization):

        self.__guest_customization = guest_customization

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(CloneOverrideParams, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloneOverrideParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


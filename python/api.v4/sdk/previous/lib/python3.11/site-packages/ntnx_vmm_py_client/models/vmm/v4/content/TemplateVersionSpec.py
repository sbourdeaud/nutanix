# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_vmm_py_client.models
from ntnx_vmm_py_client.models.OneOfvmm.v4.content.TemplateVersionSpecversion_source import TemplateVersionSpecversion_source  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.Vm import Vm  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.content.TemplateUser import TemplateUser  # noqa: F401,E501

class TemplateVersionSpec(ExternalizableAbstractModel):

    """The template version model.

    :param version_name: (:attr:`version_name`) The user-defined name of a template version.
    :type version_name: 
     max=256 chars
    
    :param version_description: (:attr:`version_description`) The user-defined description of a template version.
    :type version_description: 
     min=1 chars, max=1000 chars
    
    :param vm_spec: (:attr:`vm_spec`) 
    :type vm_spec: 
    
    
    :param create_time: (:attr:`create_time`) Time when the template was created.
    :type create_time: 
    
    
    :param created_by: (:attr:`created_by`) 
    :type created_by: 
    
    
    :param version_source: (:attr:`version_source`) Source of the template version created. When creating a new template, the source must be a VM. When creating a new version, the source can be either a VM or an existing version within the template. 
    :type version_source: required
    
    
    :param version_source_discriminator: (:attr:`version_source_discriminator`) Source type of the template version created. It can be either a VM or a template version. 
    :type version_source_discriminator: 
    
    
    :param is_active_version: (:attr:`is_active_version`) Specify whether to mark the template version as active or not. The newly created version during template creation, update, or guest OS update is set to active by default unless specified otherwise.  (**Default** True)
    :type is_active_version: 
    
    
    :param is_gc_override_enabled: (:attr:`is_gc_override_enabled`) Allow or disallow overriding guest customization during template deployment.
    :type is_gc_override_enabled: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'version_name': 'str',
        'version_description': 'str',
        'vm_spec': 'vmm.v4.ahv.config.Vm',
        'create_time': 'datetime',
        'created_by': 'vmm.v4.content.TemplateUser',
        'version_source': 'OneOfvmm.v4.content.TemplateVersionSpecversion_source',
        'version_source_discriminator': 'str',
        'is_active_version': 'bool',
        'is_gc_override_enabled': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'version_name': 'versionName',
        'version_description': 'versionDescription',
        'vm_spec': 'vmSpec',
        'create_time': 'createTime',
        'created_by': 'createdBy',
        'version_source': 'versionSource',
        'version_source_discriminator': 'versionSourceDiscriminator',
        'is_active_version': 'isActiveVersion',
        'is_gc_override_enabled': 'isGcOverrideEnabled',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, version_name=None, version_description=None, vm_spec=None, create_time=None, created_by=None, version_source=None, version_source_discriminator=None, is_active_version=True, is_gc_override_enabled=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__version_name = None
        self.__version_description = None
        self.__vm_spec = None
        self.__create_time = None
        self.__created_by = None
        self.__version_source = None
        self.__version_source_discriminator = None
        self.__is_active_version = None
        self.__is_gc_override_enabled = None
        self.discriminator = None
        if version_name is not None:
            self.__version_name = version_name
        if version_description is not None:
            self.__version_description = version_description
        if vm_spec is not None:
            self.__vm_spec = vm_spec
        if create_time is not None:
            self.__create_time = create_time
        if created_by is not None:
            self.__created_by = created_by
        self.__version_source = version_source
        if version_source_discriminator is not None:
            self.__version_source_discriminator = version_source_discriminator
        if is_active_version is not None:
            self.__is_active_version = is_active_version
        if is_gc_override_enabled is not None:
            self.__is_gc_override_enabled = is_gc_override_enabled

    def _initialize_object_type(self):
        return 'vmm.v4.content.TemplateVersionSpec'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def version_name(self):
        """
        The user-defined name of a template version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version_name

    @version_name.setter
    def version_name(self, version_name):
        if version_name is not None and len(version_name) > 256:
            raise ValueError("Invalid value for `version_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__version_name = version_name

    @property
    def version_description(self):
        """
        The user-defined description of a template version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version_description

    @version_description.setter
    def version_description(self, version_description):
        if version_description is not None and len(version_description) > 1000:
            raise ValueError("Invalid value for `version_description`, length must be less than or equal to `1000`")  # noqa: E501
        if version_description is not None and len(version_description) < 1:
            raise ValueError("Invalid value for `version_description`, length must be greater than or equal to `1`")  # noqa: E501

        self.__version_description = version_description

    @property
    def vm_spec(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.Vm`
        """  # noqa: E501
        return self.__vm_spec

    @vm_spec.setter
    def vm_spec(self, vm_spec):

        self.__vm_spec = vm_spec

    @property
    def create_time(self):
        """
        Time when the template was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def created_by(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.content.TemplateUser`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def version_source(self):
        """
        Source of the template version created. When creating a new template, the source must be a VM. When creating a new version, the source can be either a VM or an existing version within the template. 

        :type:
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.TemplateVmReference` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.content.TemplateVersionReference`
        """  # noqa: E501
        return self.__version_source

    @version_source.setter
    def version_source(self, version_source):
        if version_source is None:
            raise ValueError("Invalid value for `version_source`, must not be `None`")  # noqa: E501

        self.__version_source = version_source

    @property
    def version_source_discriminator(self):
        """
        Source type of the template version created. It can be either a VM or a template version. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version_source_discriminator

    @version_source_discriminator.setter
    def version_source_discriminator(self, version_source_discriminator):

        self.__version_source_discriminator = version_source_discriminator

    @property
    def is_active_version(self):
        """
        Specify whether to mark the template version as active or not. The newly created version during template creation, update, or guest OS update is set to active by default unless specified otherwise. 

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_active_version

    @is_active_version.setter
    def is_active_version(self, is_active_version):

        self.__is_active_version = is_active_version

    @property
    def is_gc_override_enabled(self):
        """
        Allow or disallow overriding guest customization during template deployment.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_gc_override_enabled

    @is_gc_override_enabled.setter
    def is_gc_override_enabled(self, is_gc_override_enabled):

        self.__is_gc_override_enabled = is_gc_override_enabled

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TemplateVersionSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateVersionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


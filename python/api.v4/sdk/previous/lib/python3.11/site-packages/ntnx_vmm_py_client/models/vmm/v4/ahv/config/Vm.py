# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_vmm_py_client.models
from ntnx_vmm_py_client.models.OneOfvmm.v4.ahv.config.Vmboot_config import Vmboot_config  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.ADSFVmStorageConfig import ADSFVmStorageConfig  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.ApcConfig import ApcConfig  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.AvailabilityZoneReference import AvailabilityZoneReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.CdRom import CdRom  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.CpuFeature import CpuFeature  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.Disk import Disk  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.Gpu import Gpu  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.GuestCustomizationParams import GuestCustomizationParams  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.GuestTools import GuestTools  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.HostReference import HostReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.MachineType import MachineType  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.Nic import Nic  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.OwnershipInfo import OwnershipInfo  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.PcieDevice import PcieDevice  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.PowerState import PowerState  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.ProtectionPolicyState import ProtectionPolicyState  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.ProtectionType import ProtectionType  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.SerialPort import SerialPort  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.VmSourceReference import VmSourceReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.VtpmConfig import VtpmConfig  # noqa: F401,E501

class Vm(ExternalizableAbstractModel):

    """VM configuration.

    :param name: (:attr:`name`) VM name.
    :type name: 
     max=80 chars
    
    :param description: (:attr:`description`) VM description.
    :type description: 
    
    
    :param create_time: (:attr:`create_time`) VM creation time.
    :type create_time: 
    
    
    :param update_time: (:attr:`update_time`) VM last updated time.
    :type update_time: 
    
    
    :param source: (:attr:`source`) 
    :type source: 
    
    
    :param num_sockets: (:attr:`num_sockets`) Number of vCPU sockets.
    :type num_sockets: 
    
     min=1,
    :param num_cores_per_socket: (:attr:`num_cores_per_socket`) Number of cores per socket.
    :type num_cores_per_socket: 
    
     min=1,
    :param num_threads_per_core: (:attr:`num_threads_per_core`) Number of threads per core.
    :type num_threads_per_core: 
    
     min=1,
    :param num_numa_nodes: (:attr:`num_numa_nodes`) Number of NUMA nodes. 0 means NUMA is disabled.
    :type num_numa_nodes: 
    
    
    :param memory_size_bytes: (:attr:`memory_size_bytes`) Memory size in bytes.
    :type memory_size_bytes: 
    
     min=1,
    :param is_vcpu_hard_pinning_enabled: (:attr:`is_vcpu_hard_pinning_enabled`) Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
    :type is_vcpu_hard_pinning_enabled: 
    
    
    :param is_cpu_passthrough_enabled: (:attr:`is_cpu_passthrough_enabled`) Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
    :type is_cpu_passthrough_enabled: 
    
    
    :param enabled_cpu_features: (:attr:`enabled_cpu_features`) The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor.
    :type enabled_cpu_features: 
    
    
    :param is_memory_overcommit_enabled: (:attr:`is_memory_overcommit_enabled`) Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
    :type is_memory_overcommit_enabled: 
    
    
    :param is_gpu_console_enabled: (:attr:`is_gpu_console_enabled`) Indicates whether the vGPU console is enabled or not.
    :type is_gpu_console_enabled: 
    
    
    :param is_cpu_hotplug_enabled: (:attr:`is_cpu_hotplug_enabled`) Indicates whether the VM CPU hotplug is enabled.
    :type is_cpu_hotplug_enabled: 
    
    
    :param is_scsi_controller_enabled: (:attr:`is_scsi_controller_enabled`) Indicates whether the VM SCSI controller is enabled.
    :type is_scsi_controller_enabled: 
    
    
    :param generation_uuid: (:attr:`generation_uuid`) Generation UUID of the VM of type UUID.
    :type generation_uuid: 
    
    
    :param bios_uuid: (:attr:`bios_uuid`) BIOS UUID of the VM of type UUID.
    :type bios_uuid: 
    
    
    :param categories: (:attr:`categories`) Categories for the VM.
    :type categories: 
    
    
    :param ownership_info: (:attr:`ownership_info`) 
    :type ownership_info: 
    
    
    :param host: (:attr:`host`) 
    :type host: 
    
    
    :param cluster: (:attr:`cluster`) 
    :type cluster: 
    
    
    :param availability_zone: (:attr:`availability_zone`) 
    :type availability_zone: 
    
    
    :param guest_customization: (:attr:`guest_customization`) 
    :type guest_customization: 
    
    
    :param guest_tools: (:attr:`guest_tools`) 
    :type guest_tools: 
    
    
    :param hardware_clock_timezone: (:attr:`hardware_clock_timezone`) VM hardware clock timezone in IANA TZDB format (America/Los_Angeles). (**Default** 'UTC')
    :type hardware_clock_timezone: 
     max=64 chars
    
    :param is_branding_enabled: (:attr:`is_branding_enabled`) Indicates whether to remove AHV branding from VM firmware tables or not.
    :type is_branding_enabled: 
    
    
    :param boot_config: (:attr:`boot_config`) Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.
    :type boot_config: 
    
    
    :param is_vga_console_enabled: (:attr:`is_vga_console_enabled`) Indicates whether the VGA console should be disabled or not.
    :type is_vga_console_enabled: 
    
    
    :param machine_type: (:attr:`machine_type`) 
    :type machine_type: 
    
    
    :param power_state: (:attr:`power_state`) 
    :type power_state: 
    
    
    :param vtpm_config: (:attr:`vtpm_config`) 
    :type vtpm_config: 
    
    
    :param is_agent_vm: (:attr:`is_agent_vm`) Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
    :type is_agent_vm: 
    
    
    :param apc_config: (:attr:`apc_config`) 
    :type apc_config: 
    
    
    :param is_live_migrate_capable: (:attr:`is_live_migrate_capable`) Indicates whether the VM is capable of live migrating to another host or not, based on its configuration.
    :type is_live_migrate_capable: 
    
    
    :param is_cross_cluster_migration_in_progress: (:attr:`is_cross_cluster_migration_in_progress`) Indicates whether the VM is currently undergoing cross cluster migration.
    :type is_cross_cluster_migration_in_progress: 
    
    
    :param storage_config: (:attr:`storage_config`) 
    :type storage_config: 
    
    
    :param disks: (:attr:`disks`) Disks attached to the VM.
    :type disks: 
    
    
    :param cd_roms: (:attr:`cd_roms`) CD-ROMs attached to the VM.
    :type cd_roms: 
    
    
    :param nics: (:attr:`nics`) NICs attached to the VM.
    :type nics: 
    
    
    :param gpus: (:attr:`gpus`) GPUs attached to the VM.
    :type gpus: 
    
    
    :param serial_ports: (:attr:`serial_ports`) Serial ports configured on the VM.
    :type serial_ports: 
    
    
    :param protection_type: (:attr:`protection_type`) 
    :type protection_type: 
    
    
    :param protection_policy_state: (:attr:`protection_policy_state`) 
    :type protection_policy_state: 
    
    
    :param pcie_devices: (:attr:`pcie_devices`) PCIe devices attached to the VM.
    :type pcie_devices: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'source': 'vmm.v4.ahv.config.VmSourceReference',
        'num_sockets': 'int',
        'num_cores_per_socket': 'int',
        'num_threads_per_core': 'int',
        'num_numa_nodes': 'int',
        'memory_size_bytes': 'int',
        'is_vcpu_hard_pinning_enabled': 'bool',
        'is_cpu_passthrough_enabled': 'bool',
        'enabled_cpu_features': 'list[vmm.v4.ahv.config.CpuFeature]',
        'is_memory_overcommit_enabled': 'bool',
        'is_gpu_console_enabled': 'bool',
        'is_cpu_hotplug_enabled': 'bool',
        'is_scsi_controller_enabled': 'bool',
        'generation_uuid': 'str',
        'bios_uuid': 'str',
        'categories': 'list[vmm.v4.ahv.config.CategoryReference]',
        'ownership_info': 'vmm.v4.ahv.config.OwnershipInfo',
        'host': 'vmm.v4.ahv.config.HostReference',
        'cluster': 'vmm.v4.ahv.config.ClusterReference',
        'availability_zone': 'vmm.v4.ahv.config.AvailabilityZoneReference',
        'guest_customization': 'vmm.v4.ahv.config.GuestCustomizationParams',
        'guest_tools': 'vmm.v4.ahv.config.GuestTools',
        'hardware_clock_timezone': 'str',
        'is_branding_enabled': 'bool',
        'boot_config': 'OneOfvmm.v4.ahv.config.Vmboot_config',
        'is_vga_console_enabled': 'bool',
        'machine_type': 'vmm.v4.ahv.config.MachineType',
        'power_state': 'vmm.v4.ahv.config.PowerState',
        'vtpm_config': 'vmm.v4.ahv.config.VtpmConfig',
        'is_agent_vm': 'bool',
        'apc_config': 'vmm.v4.ahv.config.ApcConfig',
        'is_live_migrate_capable': 'bool',
        'is_cross_cluster_migration_in_progress': 'bool',
        'storage_config': 'vmm.v4.ahv.config.ADSFVmStorageConfig',
        'disks': 'list[vmm.v4.ahv.config.Disk]',
        'cd_roms': 'list[vmm.v4.ahv.config.CdRom]',
        'nics': 'list[vmm.v4.ahv.config.Nic]',
        'gpus': 'list[vmm.v4.ahv.config.Gpu]',
        'serial_ports': 'list[vmm.v4.ahv.config.SerialPort]',
        'protection_type': 'vmm.v4.ahv.config.ProtectionType',
        'protection_policy_state': 'vmm.v4.ahv.config.ProtectionPolicyState',
        'pcie_devices': 'list[vmm.v4.ahv.config.PcieDevice]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'source': 'source',
        'num_sockets': 'numSockets',
        'num_cores_per_socket': 'numCoresPerSocket',
        'num_threads_per_core': 'numThreadsPerCore',
        'num_numa_nodes': 'numNumaNodes',
        'memory_size_bytes': 'memorySizeBytes',
        'is_vcpu_hard_pinning_enabled': 'isVcpuHardPinningEnabled',
        'is_cpu_passthrough_enabled': 'isCpuPassthroughEnabled',
        'enabled_cpu_features': 'enabledCpuFeatures',
        'is_memory_overcommit_enabled': 'isMemoryOvercommitEnabled',
        'is_gpu_console_enabled': 'isGpuConsoleEnabled',
        'is_cpu_hotplug_enabled': 'isCpuHotplugEnabled',
        'is_scsi_controller_enabled': 'isScsiControllerEnabled',
        'generation_uuid': 'generationUuid',
        'bios_uuid': 'biosUuid',
        'categories': 'categories',
        'ownership_info': 'ownershipInfo',
        'host': 'host',
        'cluster': 'cluster',
        'availability_zone': 'availabilityZone',
        'guest_customization': 'guestCustomization',
        'guest_tools': 'guestTools',
        'hardware_clock_timezone': 'hardwareClockTimezone',
        'is_branding_enabled': 'isBrandingEnabled',
        'boot_config': 'bootConfig',
        'is_vga_console_enabled': 'isVgaConsoleEnabled',
        'machine_type': 'machineType',
        'power_state': 'powerState',
        'vtpm_config': 'vtpmConfig',
        'is_agent_vm': 'isAgentVm',
        'apc_config': 'apcConfig',
        'is_live_migrate_capable': 'isLiveMigrateCapable',
        'is_cross_cluster_migration_in_progress': 'isCrossClusterMigrationInProgress',
        'storage_config': 'storageConfig',
        'disks': 'disks',
        'cd_roms': 'cdRoms',
        'nics': 'nics',
        'gpus': 'gpus',
        'serial_ports': 'serialPorts',
        'protection_type': 'protectionType',
        'protection_policy_state': 'protectionPolicyState',
        'pcie_devices': 'pcieDevices',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, create_time=None, update_time=None, source=None, num_sockets=None, num_cores_per_socket=None, num_threads_per_core=None, num_numa_nodes=None, memory_size_bytes=None, is_vcpu_hard_pinning_enabled=None, is_cpu_passthrough_enabled=None, enabled_cpu_features=None, is_memory_overcommit_enabled=None, is_gpu_console_enabled=None, is_cpu_hotplug_enabled=None, is_scsi_controller_enabled=None, generation_uuid=None, bios_uuid=None, categories=None, ownership_info=None, host=None, cluster=None, availability_zone=None, guest_customization=None, guest_tools=None, hardware_clock_timezone='UTC', is_branding_enabled=None, boot_config=None, is_vga_console_enabled=None, machine_type=None, power_state=None, vtpm_config=None, is_agent_vm=None, apc_config=None, is_live_migrate_capable=None, is_cross_cluster_migration_in_progress=None, storage_config=None, disks=None, cd_roms=None, nics=None, gpus=None, serial_ports=None, protection_type=None, protection_policy_state=None, pcie_devices=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__create_time = None
        self.__update_time = None
        self.__source = None
        self.__num_sockets = None
        self.__num_cores_per_socket = None
        self.__num_threads_per_core = None
        self.__num_numa_nodes = None
        self.__memory_size_bytes = None
        self.__is_vcpu_hard_pinning_enabled = None
        self.__is_cpu_passthrough_enabled = None
        self.__enabled_cpu_features = None
        self.__is_memory_overcommit_enabled = None
        self.__is_gpu_console_enabled = None
        self.__is_cpu_hotplug_enabled = None
        self.__is_scsi_controller_enabled = None
        self.__generation_uuid = None
        self.__bios_uuid = None
        self.__categories = None
        self.__ownership_info = None
        self.__host = None
        self.__cluster = None
        self.__availability_zone = None
        self.__guest_customization = None
        self.__guest_tools = None
        self.__hardware_clock_timezone = None
        self.__is_branding_enabled = None
        self.__boot_config = None
        self.__is_vga_console_enabled = None
        self.__machine_type = None
        self.__power_state = None
        self.__vtpm_config = None
        self.__is_agent_vm = None
        self.__apc_config = None
        self.__is_live_migrate_capable = None
        self.__is_cross_cluster_migration_in_progress = None
        self.__storage_config = None
        self.__disks = None
        self.__cd_roms = None
        self.__nics = None
        self.__gpus = None
        self.__serial_ports = None
        self.__protection_type = None
        self.__protection_policy_state = None
        self.__pcie_devices = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if create_time is not None:
            self.__create_time = create_time
        if update_time is not None:
            self.__update_time = update_time
        if source is not None:
            self.__source = source
        if num_sockets is not None:
            self.__num_sockets = num_sockets
        if num_cores_per_socket is not None:
            self.__num_cores_per_socket = num_cores_per_socket
        if num_threads_per_core is not None:
            self.__num_threads_per_core = num_threads_per_core
        if num_numa_nodes is not None:
            self.__num_numa_nodes = num_numa_nodes
        if memory_size_bytes is not None:
            self.__memory_size_bytes = memory_size_bytes
        if is_vcpu_hard_pinning_enabled is not None:
            self.__is_vcpu_hard_pinning_enabled = is_vcpu_hard_pinning_enabled
        if is_cpu_passthrough_enabled is not None:
            self.__is_cpu_passthrough_enabled = is_cpu_passthrough_enabled
        if enabled_cpu_features is not None:
            self.__enabled_cpu_features = enabled_cpu_features
        if is_memory_overcommit_enabled is not None:
            self.__is_memory_overcommit_enabled = is_memory_overcommit_enabled
        if is_gpu_console_enabled is not None:
            self.__is_gpu_console_enabled = is_gpu_console_enabled
        if is_cpu_hotplug_enabled is not None:
            self.__is_cpu_hotplug_enabled = is_cpu_hotplug_enabled
        if is_scsi_controller_enabled is not None:
            self.__is_scsi_controller_enabled = is_scsi_controller_enabled
        if generation_uuid is not None:
            self.__generation_uuid = generation_uuid
        if bios_uuid is not None:
            self.__bios_uuid = bios_uuid
        if categories is not None:
            self.__categories = categories
        if ownership_info is not None:
            self.__ownership_info = ownership_info
        if host is not None:
            self.__host = host
        if cluster is not None:
            self.__cluster = cluster
        if availability_zone is not None:
            self.__availability_zone = availability_zone
        if guest_customization is not None:
            self.__guest_customization = guest_customization
        if guest_tools is not None:
            self.__guest_tools = guest_tools
        if hardware_clock_timezone is not None:
            self.__hardware_clock_timezone = hardware_clock_timezone
        if is_branding_enabled is not None:
            self.__is_branding_enabled = is_branding_enabled
        if boot_config is not None:
            self.__boot_config = boot_config
        if is_vga_console_enabled is not None:
            self.__is_vga_console_enabled = is_vga_console_enabled
        if machine_type is not None:
            self.__machine_type = machine_type
        if power_state is not None:
            self.__power_state = power_state
        if vtpm_config is not None:
            self.__vtpm_config = vtpm_config
        if is_agent_vm is not None:
            self.__is_agent_vm = is_agent_vm
        if apc_config is not None:
            self.__apc_config = apc_config
        if is_live_migrate_capable is not None:
            self.__is_live_migrate_capable = is_live_migrate_capable
        if is_cross_cluster_migration_in_progress is not None:
            self.__is_cross_cluster_migration_in_progress = is_cross_cluster_migration_in_progress
        if storage_config is not None:
            self.__storage_config = storage_config
        if disks is not None:
            self.__disks = disks
        if cd_roms is not None:
            self.__cd_roms = cd_roms
        if nics is not None:
            self.__nics = nics
        if gpus is not None:
            self.__gpus = gpus
        if serial_ports is not None:
            self.__serial_ports = serial_ports
        if protection_type is not None:
            self.__protection_type = protection_type
        if protection_policy_state is not None:
            self.__protection_policy_state = protection_policy_state
        if pcie_devices is not None:
            self.__pcie_devices = pcie_devices

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.Vm'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        VM name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        VM description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def create_time(self):
        """
        VM creation time.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__create_time

    @create_time.setter
    def create_time(self, create_time):

        self.__create_time = create_time

    @property
    def update_time(self):
        """
        VM last updated time.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__update_time

    @update_time.setter
    def update_time(self, update_time):

        self.__update_time = update_time

    @property
    def source(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.VmSourceReference`
        """  # noqa: E501
        return self.__source

    @source.setter
    def source(self, source):

        self.__source = source

    @property
    def num_sockets(self):
        """
        Number of vCPU sockets.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_sockets

    @num_sockets.setter
    def num_sockets(self, num_sockets):
        if num_sockets is not None and num_sockets < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_sockets`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_sockets = num_sockets

    @property
    def num_cores_per_socket(self):
        """
        Number of cores per socket.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_cores_per_socket

    @num_cores_per_socket.setter
    def num_cores_per_socket(self, num_cores_per_socket):
        if num_cores_per_socket is not None and num_cores_per_socket < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_cores_per_socket`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_cores_per_socket = num_cores_per_socket

    @property
    def num_threads_per_core(self):
        """
        Number of threads per core.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_threads_per_core

    @num_threads_per_core.setter
    def num_threads_per_core(self, num_threads_per_core):
        if num_threads_per_core is not None and num_threads_per_core < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_threads_per_core`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__num_threads_per_core = num_threads_per_core

    @property
    def num_numa_nodes(self):
        """
        Number of NUMA nodes. 0 means NUMA is disabled.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_numa_nodes

    @num_numa_nodes.setter
    def num_numa_nodes(self, num_numa_nodes):

        self.__num_numa_nodes = num_numa_nodes

    @property
    def memory_size_bytes(self):
        """
        Memory size in bytes.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__memory_size_bytes

    @memory_size_bytes.setter
    def memory_size_bytes(self, memory_size_bytes):
        if memory_size_bytes is not None and memory_size_bytes < 1:  # noqa: E501
            raise ValueError("Invalid value for `memory_size_bytes`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__memory_size_bytes = memory_size_bytes

    @property
    def is_vcpu_hard_pinning_enabled(self):
        """
        Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_vcpu_hard_pinning_enabled

    @is_vcpu_hard_pinning_enabled.setter
    def is_vcpu_hard_pinning_enabled(self, is_vcpu_hard_pinning_enabled):

        self.__is_vcpu_hard_pinning_enabled = is_vcpu_hard_pinning_enabled

    @property
    def is_cpu_passthrough_enabled(self):
        """
        Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cpu_passthrough_enabled

    @is_cpu_passthrough_enabled.setter
    def is_cpu_passthrough_enabled(self, is_cpu_passthrough_enabled):

        self.__is_cpu_passthrough_enabled = is_cpu_passthrough_enabled

    @property
    def enabled_cpu_features(self):
        """
        The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.CpuFeature` ]
        """  # noqa: E501
        return self.__enabled_cpu_features

    @enabled_cpu_features.setter
    def enabled_cpu_features(self, enabled_cpu_features):

        self.__enabled_cpu_features = enabled_cpu_features

    @property
    def is_memory_overcommit_enabled(self):
        """
        Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_memory_overcommit_enabled

    @is_memory_overcommit_enabled.setter
    def is_memory_overcommit_enabled(self, is_memory_overcommit_enabled):

        self.__is_memory_overcommit_enabled = is_memory_overcommit_enabled

    @property
    def is_gpu_console_enabled(self):
        """
        Indicates whether the vGPU console is enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_gpu_console_enabled

    @is_gpu_console_enabled.setter
    def is_gpu_console_enabled(self, is_gpu_console_enabled):

        self.__is_gpu_console_enabled = is_gpu_console_enabled

    @property
    def is_cpu_hotplug_enabled(self):
        """
        Indicates whether the VM CPU hotplug is enabled.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cpu_hotplug_enabled

    @is_cpu_hotplug_enabled.setter
    def is_cpu_hotplug_enabled(self, is_cpu_hotplug_enabled):

        self.__is_cpu_hotplug_enabled = is_cpu_hotplug_enabled

    @property
    def is_scsi_controller_enabled(self):
        """
        Indicates whether the VM SCSI controller is enabled.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_scsi_controller_enabled

    @is_scsi_controller_enabled.setter
    def is_scsi_controller_enabled(self, is_scsi_controller_enabled):

        self.__is_scsi_controller_enabled = is_scsi_controller_enabled

    @property
    def generation_uuid(self):
        """
        Generation UUID of the VM of type UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__generation_uuid

    @generation_uuid.setter
    def generation_uuid(self, generation_uuid):
        if generation_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', generation_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `generation_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__generation_uuid = generation_uuid

    @property
    def bios_uuid(self):
        """
        BIOS UUID of the VM of type UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__bios_uuid

    @bios_uuid.setter
    def bios_uuid(self, bios_uuid):
        if bios_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', bios_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `bios_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__bios_uuid = bios_uuid

    @property
    def categories(self):
        """
        Categories for the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.CategoryReference` ]
        """  # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def ownership_info(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.OwnershipInfo`
        """  # noqa: E501
        return self.__ownership_info

    @ownership_info.setter
    def ownership_info(self, ownership_info):

        self.__ownership_info = ownership_info

    @property
    def host(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.HostReference`
        """  # noqa: E501
        return self.__host

    @host.setter
    def host(self, host):

        self.__host = host

    @property
    def cluster(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.ClusterReference`
        """  # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def availability_zone(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.AvailabilityZoneReference`
        """  # noqa: E501
        return self.__availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):

        self.__availability_zone = availability_zone

    @property
    def guest_customization(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.GuestCustomizationParams`
        """  # noqa: E501
        return self.__guest_customization

    @guest_customization.setter
    def guest_customization(self, guest_customization):

        self.__guest_customization = guest_customization

    @property
    def guest_tools(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.GuestTools`
        """  # noqa: E501
        return self.__guest_tools

    @guest_tools.setter
    def guest_tools(self, guest_tools):

        self.__guest_tools = guest_tools

    @property
    def hardware_clock_timezone(self):
        """
        VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hardware_clock_timezone

    @hardware_clock_timezone.setter
    def hardware_clock_timezone(self, hardware_clock_timezone):
        if hardware_clock_timezone is not None and len(hardware_clock_timezone) > 64:
            raise ValueError("Invalid value for `hardware_clock_timezone`, length must be less than or equal to `64`")  # noqa: E501

        self.__hardware_clock_timezone = hardware_clock_timezone

    @property
    def is_branding_enabled(self):
        """
        Indicates whether to remove AHV branding from VM firmware tables or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_branding_enabled

    @is_branding_enabled.setter
    def is_branding_enabled(self, is_branding_enabled):

        self.__is_branding_enabled = is_branding_enabled

    @property
    def boot_config(self):
        """
        Indicates the order of device types in which the VM should try to boot from. If the boot device order is not provided the system will decide an appropriate boot device order.

        :type:
                :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.LegacyBoot` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.UefiBoot`
        """  # noqa: E501
        return self.__boot_config

    @boot_config.setter
    def boot_config(self, boot_config):

        self.__boot_config = boot_config

    @property
    def is_vga_console_enabled(self):
        """
        Indicates whether the VGA console should be disabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_vga_console_enabled

    @is_vga_console_enabled.setter
    def is_vga_console_enabled(self, is_vga_console_enabled):

        self.__is_vga_console_enabled = is_vga_console_enabled

    @property
    def machine_type(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.MachineType`
        """  # noqa: E501
        return self.__machine_type

    @machine_type.setter
    def machine_type(self, machine_type):

        self.__machine_type = machine_type

    @property
    def power_state(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.PowerState`
        """  # noqa: E501
        return self.__power_state

    @power_state.setter
    def power_state(self, power_state):

        self.__power_state = power_state

    @property
    def vtpm_config(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.VtpmConfig`
        """  # noqa: E501
        return self.__vtpm_config

    @vtpm_config.setter
    def vtpm_config(self, vtpm_config):

        self.__vtpm_config = vtpm_config

    @property
    def is_agent_vm(self):
        """
        Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_agent_vm

    @is_agent_vm.setter
    def is_agent_vm(self, is_agent_vm):

        self.__is_agent_vm = is_agent_vm

    @property
    def apc_config(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.ApcConfig`
        """  # noqa: E501
        return self.__apc_config

    @apc_config.setter
    def apc_config(self, apc_config):

        self.__apc_config = apc_config

    @property
    def is_live_migrate_capable(self):
        """
        Indicates whether the VM is capable of live migrating to another host or not, based on its configuration.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_live_migrate_capable

    @is_live_migrate_capable.setter
    def is_live_migrate_capable(self, is_live_migrate_capable):

        self.__is_live_migrate_capable = is_live_migrate_capable

    @property
    def is_cross_cluster_migration_in_progress(self):
        """
        Indicates whether the VM is currently undergoing cross cluster migration.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cross_cluster_migration_in_progress

    @is_cross_cluster_migration_in_progress.setter
    def is_cross_cluster_migration_in_progress(self, is_cross_cluster_migration_in_progress):

        self.__is_cross_cluster_migration_in_progress = is_cross_cluster_migration_in_progress

    @property
    def storage_config(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.ADSFVmStorageConfig`
        """  # noqa: E501
        return self.__storage_config

    @storage_config.setter
    def storage_config(self, storage_config):

        self.__storage_config = storage_config

    @property
    def disks(self):
        """
        Disks attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.Disk` ]
        """  # noqa: E501
        return self.__disks

    @disks.setter
    def disks(self, disks):

        self.__disks = disks

    @property
    def cd_roms(self):
        """
        CD-ROMs attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.CdRom` ]
        """  # noqa: E501
        return self.__cd_roms

    @cd_roms.setter
    def cd_roms(self, cd_roms):

        self.__cd_roms = cd_roms

    @property
    def nics(self):
        """
        NICs attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.Nic` ]
        """  # noqa: E501
        return self.__nics

    @nics.setter
    def nics(self, nics):

        self.__nics = nics

    @property
    def gpus(self):
        """
        GPUs attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.Gpu` ]
        """  # noqa: E501
        return self.__gpus

    @gpus.setter
    def gpus(self, gpus):

        self.__gpus = gpus

    @property
    def serial_ports(self):
        """
        Serial ports configured on the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.SerialPort` ]
        """  # noqa: E501
        return self.__serial_ports

    @serial_ports.setter
    def serial_ports(self, serial_ports):

        self.__serial_ports = serial_ports

    @property
    def protection_type(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.ProtectionType`
        """  # noqa: E501
        return self.__protection_type

    @protection_type.setter
    def protection_type(self, protection_type):

        self.__protection_type = protection_type

    @property
    def protection_policy_state(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.ProtectionPolicyState`
        """  # noqa: E501
        return self.__protection_policy_state

    @protection_policy_state.setter
    def protection_policy_state(self, protection_policy_state):

        self.__protection_policy_state = protection_policy_state

    @property
    def pcie_devices(self):
        """
        PCIe devices attached to the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.PcieDevice` ]
        """  # noqa: E501
        return self.__pcie_devices

    @pcie_devices.setter
    def pcie_devices(self, pcie_devices):

        self.__pcie_devices = pcie_devices

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.models, 'AhvConfigVm')
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Vm, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


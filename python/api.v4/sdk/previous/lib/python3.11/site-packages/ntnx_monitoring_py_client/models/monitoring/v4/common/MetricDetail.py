# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_monitoring_py_client.models
from ntnx_monitoring_py_client.models.OneOfmonitoring.v4.common.MetricDetailmetric_value import MetricDetailmetric_value  # noqa: F401,E501
from ntnx_monitoring_py_client.models.OneOfmonitoring.v4.common.MetricDetailthreshold_value import MetricDetailthreshold_value  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.ComparisonOperator import ComparisonOperator  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.ConditionType import ConditionType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.DataType import DataType  # noqa: F401,E501

class MetricDetail(object):

    """

    :param metric_name: (:attr:`metric_name`) The metric key. Allowed values of the metrics list can be found at https://portal.nutanix.com/page/documents/details?targetId=Prism-Central-Guide-vpc_2022_9:mul-alerts-user-created-metrics-r.html.
    :type metric_name: 
     max=1000 chars
    
    :param metric_display_name: (:attr:`metric_display_name`) Readable name of the metric in English.
    :type metric_display_name: 
     max=1000 chars
    
    :param unit: (:attr:`unit`) Unit of the metric. For example, percentage, ms or usecs.
    :type unit: 
    
    
    :param trigger_wait_time_seconds: (:attr:`trigger_wait_time_seconds`) How long the metric breached the given condition before raising an event.
    :type trigger_wait_time_seconds: 
    
    
    :param trigger_time: (:attr:`trigger_time`) The time in ISO 8601 format when the event was triggered.
    :type trigger_time: 
    
    
    :param comparison_operator: (:attr:`comparison_operator`) 
    :type comparison_operator: 
    
    
    :param condition_type: (:attr:`condition_type`) 
    :type condition_type: 
    
    
    :param metric_category: (:attr:`metric_category`) Broad category under which this metric falls. For example, disk, CPU, or memory.
    :type metric_category: 
    
    
    :param data_type: (:attr:`data_type`) 
    :type data_type: 
    
    
    :param threshold_value: (:attr:`threshold_value`) The threshold value that was used for the condition evaluation.
    :type threshold_value: 
    
    
    :param metric_value: (:attr:`metric_value`) The raw value of the metric when the condition threshold was exceeded.
    :type metric_value: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'metric_name': 'str',
        'metric_display_name': 'str',
        'unit': 'str',
        'trigger_wait_time_seconds': 'int',
        'trigger_time': 'datetime',
        'comparison_operator': 'monitoring.v4.common.ComparisonOperator',
        'condition_type': 'monitoring.v4.common.ConditionType',
        'metric_category': 'str',
        'data_type': 'monitoring.v4.common.DataType',
        'threshold_value': 'OneOfmonitoring.v4.common.MetricDetailthreshold_value',
        'metric_value': 'OneOfmonitoring.v4.common.MetricDetailmetric_value',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'metric_name': 'metricName',
        'metric_display_name': 'metricDisplayName',
        'unit': 'unit',
        'trigger_wait_time_seconds': 'triggerWaitTimeSeconds',
        'trigger_time': 'triggerTime',
        'comparison_operator': 'comparisonOperator',
        'condition_type': 'conditionType',
        'metric_category': 'metricCategory',
        'data_type': 'dataType',
        'threshold_value': 'thresholdValue',
        'metric_value': 'metricValue',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, metric_name=None, metric_display_name=None, unit=None, trigger_wait_time_seconds=None, trigger_time=None, comparison_operator=None, condition_type=None, metric_category=None, data_type=None, threshold_value=None, metric_value=None, *args, **kwargs):  # noqa: E501
        self.__metric_name = None
        self.__metric_display_name = None
        self.__unit = None
        self.__trigger_wait_time_seconds = None
        self.__trigger_time = None
        self.__comparison_operator = None
        self.__condition_type = None
        self.__metric_category = None
        self.__data_type = None
        self.__threshold_value = None
        self.__metric_value = None
        self.discriminator = None
        if metric_name is not None:
            self.__metric_name = metric_name
        if metric_display_name is not None:
            self.__metric_display_name = metric_display_name
        if unit is not None:
            self.__unit = unit
        if trigger_wait_time_seconds is not None:
            self.__trigger_wait_time_seconds = trigger_wait_time_seconds
        if trigger_time is not None:
            self.__trigger_time = trigger_time
        if comparison_operator is not None:
            self.__comparison_operator = comparison_operator
        if condition_type is not None:
            self.__condition_type = condition_type
        if metric_category is not None:
            self.__metric_category = metric_category
        if data_type is not None:
            self.__data_type = data_type
        if threshold_value is not None:
            self.__threshold_value = threshold_value
        if metric_value is not None:
            self.__metric_value = metric_value
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'monitoring.v4.common.MetricDetail'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def metric_name(self):
        """
        The metric key. Allowed values of the metrics list can be found at https://portal.nutanix.com/page/documents/details?targetId=Prism-Central-Guide-vpc_2022_9:mul-alerts-user-created-metrics-r.html.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        if metric_name is not None and len(metric_name) > 1000:
            raise ValueError("Invalid value for `metric_name`, length must be less than or equal to `1000`")  # noqa: E501

        self.__metric_name = metric_name

    @property
    def metric_display_name(self):
        """
        Readable name of the metric in English.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__metric_display_name

    @metric_display_name.setter
    def metric_display_name(self, metric_display_name):
        if metric_display_name is not None and len(metric_display_name) > 1000:
            raise ValueError("Invalid value for `metric_display_name`, length must be less than or equal to `1000`")  # noqa: E501

        self.__metric_display_name = metric_display_name

    @property
    def unit(self):
        """
        Unit of the metric. For example, percentage, ms or usecs.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__unit

    @unit.setter
    def unit(self, unit):

        self.__unit = unit

    @property
    def trigger_wait_time_seconds(self):
        """
        How long the metric breached the given condition before raising an event.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__trigger_wait_time_seconds

    @trigger_wait_time_seconds.setter
    def trigger_wait_time_seconds(self, trigger_wait_time_seconds):

        self.__trigger_wait_time_seconds = trigger_wait_time_seconds

    @property
    def trigger_time(self):
        """
        The time in ISO 8601 format when the event was triggered.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__trigger_time

    @trigger_time.setter
    def trigger_time(self, trigger_time):

        self.__trigger_time = trigger_time

    @property
    def comparison_operator(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.ComparisonOperator`
        """  # noqa: E501
        return self.__comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):

        self.__comparison_operator = comparison_operator

    @property
    def condition_type(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.ConditionType`
        """  # noqa: E501
        return self.__condition_type

    @condition_type.setter
    def condition_type(self, condition_type):

        self.__condition_type = condition_type

    @property
    def metric_category(self):
        """
        Broad category under which this metric falls. For example, disk, CPU, or memory.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__metric_category

    @metric_category.setter
    def metric_category(self, metric_category):

        self.__metric_category = metric_category

    @property
    def data_type(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.DataType`
        """  # noqa: E501
        return self.__data_type

    @data_type.setter
    def data_type(self, data_type):

        self.__data_type = data_type

    @property
    def threshold_value(self):
        """
        The threshold value that was used for the condition evaluation.

        :type:
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.StringValue` | 
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.BoolValue` | 
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.DoubleValue` | 
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.IntValue`
        """  # noqa: E501
        return self.__threshold_value

    @threshold_value.setter
    def threshold_value(self, threshold_value):

        self.__threshold_value = threshold_value

    @property
    def metric_value(self):
        """
        The raw value of the metric when the condition threshold was exceeded.

        :type:
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.StringValue` | 
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.BoolValue` | 
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.DoubleValue` | 
                :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.IntValue`
        """  # noqa: E501
        return self.__metric_value

    @metric_value.setter
    def metric_value(self, metric_value):

        self.__metric_value = metric_value

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_monitoring_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(MetricDetail, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


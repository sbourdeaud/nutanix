# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class OperationType(object):

    """The operation type associated with the audit. For example, create, update, or delete.


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - CREATE: Indicates an entity was created.
        - UPDATE: Indicates an entity was updated.
        - DELETE: Indicates an entity was deleted.
        - POWERSTATECHANGE: Indicates that the power state of an entity has changed.
        - HA: Indicates an operation related to HA (High Availability).
        - RESTORE: Indicates an entity/configuration was restored.
        - MIGRATE: Indicates an entity, like VM, was migrated from one host to another.
        - ENABLE: Indicates a feature/functionality was enabled.
        - DISABLE: Indicates a feature/functionality was disabled.
        - RESET: Indicates a reset operation on a configuration or entity.
        - LOGIN: Indicates a user/service account logged in to the system.
        - LOGOUT: Indicates a user/service account logged out of the system.
        - VALIDATE: Indicates a validation operation on a user request or entity/system state.
        - FAILOVER: Indicates an operation related to HA failover.
        - INPROGRESS: Indicates that a task is in progress.
        - ON: Indicates that an entity was powered on.
        - OFF: Indicates that an entity was powered off.
        - JOINED: Indicates that an entity, for example, a cluster has joined a domain.
        - UNJOINED: Indicates that an entity, for example, a cluster has unjoined from a domain.
        - PROTECTED: Indicates that an entity is protected or being protected in a Protection Domain.
        - UNPROTECTED: Indicates that an entity is now unprotected.
        - QUARENTINED: Indicates that an entity is quarantined.
        - UNQUARENTINED: Indicates that an entity is not quarantined.
        - START: Indicates an operation has started.
        - END: Indicates an operation ended.
        - TESTFAILOVER: Indicates an operation related to test failover.
        - IMPORT: Indicates an import of a policy, configuration, or any other entity.
        - EXPORT: Indicates an export of a policy, configuration, or any other entity.
        - IMAGEIMPORT: Indicates a CRUD operation on the images.
        - IMAGETRANSFER: Indicates an image was transferred to an entity.
        - IMAGEREMOVE: Indicates an image was removed from an entity.
        - IMAGEUPLOAD: Indicates an image was uploaded to an entity.
        - TEMPLATEGUESTUPDATEINITIATE: Indicates that the guest changes were initiated for a VM template.
        - TEMPLATEGUESTUPDATECANCEL: Indicates that the guest changes were cancelled for a VM template.
        - TEMPLATEGUESTUPDATECOMPLETE: Indicates that the guest changes were completed for a VM template.
        - TEMPLATEDEPLOY: Indicates that a VM template was deployed.
        - TEMPLATEVERSIONPUBLISH: Indicates that a version was published for a VM template.
        - CROSSCLUSTERMIGRATE: Indicates that an on-demand migration across clusters was done for a VM.
        - FLOWCONFIGMIGRATE: Indicates that flow configuration was migrated.
        - SUSPEND: Indicates that an image placement policy was suspended.
        - RESUME: Indicates that an image placement policy was resumed.
        - GENERATEURL: Indicates that a URL for downloading an image was generated.
        - DOWNLOAD: Indicates that an image was downloaded.
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    CREATE = "CREATE"
    UPDATE = "UPDATE"
    DELETE = "DELETE"
    POWERSTATECHANGE = "POWERSTATECHANGE"
    HA = "HA"
    RESTORE = "RESTORE"
    MIGRATE = "MIGRATE"
    ENABLE = "ENABLE"
    DISABLE = "DISABLE"
    RESET = "RESET"
    LOGIN = "LOGIN"
    LOGOUT = "LOGOUT"
    VALIDATE = "VALIDATE"
    FAILOVER = "FAILOVER"
    INPROGRESS = "INPROGRESS"
    ON = "ON"
    OFF = "OFF"
    JOINED = "JOINED"
    UNJOINED = "UNJOINED"
    PROTECTED = "PROTECTED"
    UNPROTECTED = "UNPROTECTED"
    QUARENTINED = "QUARENTINED"
    UNQUARENTINED = "UNQUARENTINED"
    START = "START"
    END = "END"
    TESTFAILOVER = "TESTFAILOVER"
    IMPORT = "IMPORT"
    EXPORT = "EXPORT"
    IMAGEIMPORT = "IMAGEIMPORT"
    IMAGETRANSFER = "IMAGETRANSFER"
    IMAGEREMOVE = "IMAGEREMOVE"
    IMAGEUPLOAD = "IMAGEUPLOAD"
    TEMPLATEGUESTUPDATEINITIATE = "TEMPLATEGUESTUPDATEINITIATE"
    TEMPLATEGUESTUPDATECANCEL = "TEMPLATEGUESTUPDATECANCEL"
    TEMPLATEGUESTUPDATECOMPLETE = "TEMPLATEGUESTUPDATECOMPLETE"
    TEMPLATEDEPLOY = "TEMPLATEDEPLOY"
    TEMPLATEVERSIONPUBLISH = "TEMPLATEVERSIONPUBLISH"
    CROSSCLUSTERMIGRATE = "CROSSCLUSTERMIGRATE"
    FLOWCONFIGMIGRATE = "FLOWCONFIGMIGRATE"
    SUSPEND = "SUSPEND"
    RESUME = "RESUME"
    GENERATEURL = "GENERATEURL"
    DOWNLOAD = "DOWNLOAD"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'monitoring.v4.common.OperationType'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr in vars(self):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(OperationType, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_monitoring_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.AlertConfig import AlertConfig  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.AlertPolicyConfigurableParameter import AlertPolicyConfigurableParameter  # noqa: F401,E501

class ClusterConfig(ExternalizableAbstractModel):

    """SDA policy parameters that may differ across clusters since each cluster can run on different NCC versions. Each cluster will have an individual entry.

    :param is_enabled: (:attr:`is_enabled`) Indicates whether the SDA policy is enabled or not on the cluster.
    :type is_enabled: 
    
    
    :param last_modified_by_user: (:attr:`last_modified_by_user`) Name of the user who made the latest update to this policy. Its value will be Nutanix if the last update is due to an upgrade event.
    :type last_modified_by_user: 
    
    
    :param last_modified_time: (:attr:`last_modified_time`) Time in ISO 8601 format when the SDA policy was last modified. It gets automatically updated by the Nutanix service from the user context during an update event.
    :type last_modified_time: 
    
    
    :param schedule_interval_seconds: (:attr:`schedule_interval_seconds`) Interval in seconds for periodically executing the SDA policy. This will not be set for policies with the type NOT_SCHEDULED & EVENT_DRIVEN.
    :type schedule_interval_seconds: 
    
    
    :param configurable_parameters: (:attr:`configurable_parameters`) Parameters of the SDA that are configurable by a user.
    :type configurable_parameters: 
    
    
    :param alert_config: (:attr:`alert_config`) 
    :type alert_config: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_enabled': 'bool',
        'last_modified_by_user': 'str',
        'last_modified_time': 'datetime',
        'schedule_interval_seconds': 'int',
        'configurable_parameters': 'list[monitoring.v4.serviceability.AlertPolicyConfigurableParameter]',
        'alert_config': 'monitoring.v4.serviceability.AlertConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'last_modified_by_user': 'lastModifiedByUser',
        'last_modified_time': 'lastModifiedTime',
        'schedule_interval_seconds': 'scheduleIntervalSeconds',
        'configurable_parameters': 'configurableParameters',
        'alert_config': 'alertConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_enabled=None, last_modified_by_user=None, last_modified_time=None, schedule_interval_seconds=None, configurable_parameters=None, alert_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__is_enabled = None
        self.__last_modified_by_user = None
        self.__last_modified_time = None
        self.__schedule_interval_seconds = None
        self.__configurable_parameters = None
        self.__alert_config = None
        self.discriminator = None
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        if last_modified_by_user is not None:
            self.__last_modified_by_user = last_modified_by_user
        if last_modified_time is not None:
            self.__last_modified_time = last_modified_time
        if schedule_interval_seconds is not None:
            self.__schedule_interval_seconds = schedule_interval_seconds
        if configurable_parameters is not None:
            self.__configurable_parameters = configurable_parameters
        if alert_config is not None:
            self.__alert_config = alert_config

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.ClusterConfig'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def is_enabled(self):
        """
        Indicates whether the SDA policy is enabled or not on the cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def last_modified_by_user(self):
        """
        Name of the user who made the latest update to this policy. Its value will be Nutanix if the last update is due to an upgrade event.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__last_modified_by_user

    @last_modified_by_user.setter
    def last_modified_by_user(self, last_modified_by_user):

        self.__last_modified_by_user = last_modified_by_user

    @property
    def last_modified_time(self):
        """
        Time in ISO 8601 format when the SDA policy was last modified. It gets automatically updated by the Nutanix service from the user context during an update event.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):

        self.__last_modified_time = last_modified_time

    @property
    def schedule_interval_seconds(self):
        """
        Interval in seconds for periodically executing the SDA policy. This will not be set for policies with the type NOT_SCHEDULED & EVENT_DRIVEN.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__schedule_interval_seconds

    @schedule_interval_seconds.setter
    def schedule_interval_seconds(self, schedule_interval_seconds):

        self.__schedule_interval_seconds = schedule_interval_seconds

    @property
    def configurable_parameters(self):
        """
        Parameters of the SDA that are configurable by a user.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.AlertPolicyConfigurableParameter` ]
        """  # noqa: E501
        return self.__configurable_parameters

    @configurable_parameters.setter
    def configurable_parameters(self, configurable_parameters):

        self.__configurable_parameters = configurable_parameters

    @property
    def alert_config(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.AlertConfig`
        """  # noqa: E501
        return self.__alert_config

    @alert_config.setter
    def alert_config(self, alert_config):

        self.__alert_config = alert_config

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_monitoring_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.EmailConfigurationRule import EmailConfigurationRule  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.EmailTemplate import EmailTemplate  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.RemoteTunnelDetails import RemoteTunnelDetails  # noqa: F401,E501

class AlertEmailConfiguration(ExternalizableAbstractModel):

    """

    :param default_nutanix_email: (:attr:`default_nutanix_email`) The default Nutanix email ID to which alert emails are sent.
    :type default_nutanix_email: 
    
    
    :param is_enabled: (:attr:`is_enabled`) Indicates whether alert emails are enabled or not. (**Default** False)
    :type is_enabled: 
    
    
    :param has_default_nutanix_email: (:attr:`has_default_nutanix_email`) Indicates whether alert emails are enabled or not on default Nutanix email ID. (**Default** False)
    :type has_default_nutanix_email: 
    
    
    :param is_email_digest_enabled: (:attr:`is_email_digest_enabled`) Indicates whether alert email digest is enabled or not. (**Default** False)
    :type is_email_digest_enabled: 
    
    
    :param is_empty_alert_email_digest_skipped: (:attr:`is_empty_alert_email_digest_skipped`) Send alert email digest only if there are one or more alerts. (**Default** False)
    :type is_empty_alert_email_digest_skipped: 
    
    
    :param email_config_rules: (:attr:`email_config_rules`) Rules for email configuration.
    :type email_config_rules: 
    
    
    :param email_contact_list: (:attr:`email_contact_list`) List of email contacts.
    :type email_contact_list: 
    
    
    :param email_template: (:attr:`email_template`) 
    :type email_template: 
    
    
    :param tunnel_details: (:attr:`tunnel_details`) 
    :type tunnel_details: 
    
    
    :param alert_email_digest_send_time: (:attr:`alert_email_digest_send_time`) Time in HH:mm format when the alert email digest is sent daily.
    :type alert_email_digest_send_time: 
    
    
    :param alert_email_digest_send_timezone: (:attr:`alert_email_digest_send_timezone`) Timezone for the time at which the alert email digest is sent daily.
    :type alert_email_digest_send_timezone: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'default_nutanix_email': 'str',
        'is_enabled': 'bool',
        'has_default_nutanix_email': 'bool',
        'is_email_digest_enabled': 'bool',
        'is_empty_alert_email_digest_skipped': 'bool',
        'email_config_rules': 'list[monitoring.v4.serviceability.EmailConfigurationRule]',
        'email_contact_list': 'list[str]',
        'email_template': 'monitoring.v4.serviceability.EmailTemplate',
        'tunnel_details': 'monitoring.v4.serviceability.RemoteTunnelDetails',
        'alert_email_digest_send_time': 'str',
        'alert_email_digest_send_timezone': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'default_nutanix_email': 'defaultNutanixEmail',
        'is_enabled': 'isEnabled',
        'has_default_nutanix_email': 'hasDefaultNutanixEmail',
        'is_email_digest_enabled': 'isEmailDigestEnabled',
        'is_empty_alert_email_digest_skipped': 'isEmptyAlertEmailDigestSkipped',
        'email_config_rules': 'emailConfigRules',
        'email_contact_list': 'emailContactList',
        'email_template': 'emailTemplate',
        'tunnel_details': 'tunnelDetails',
        'alert_email_digest_send_time': 'alertEmailDigestSendTime',
        'alert_email_digest_send_timezone': 'alertEmailDigestSendTimezone',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, default_nutanix_email=None, is_enabled=False, has_default_nutanix_email=False, is_email_digest_enabled=False, is_empty_alert_email_digest_skipped=False, email_config_rules=None, email_contact_list=None, email_template=None, tunnel_details=None, alert_email_digest_send_time=None, alert_email_digest_send_timezone=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__default_nutanix_email = None
        self.__is_enabled = None
        self.__has_default_nutanix_email = None
        self.__is_email_digest_enabled = None
        self.__is_empty_alert_email_digest_skipped = None
        self.__email_config_rules = None
        self.__email_contact_list = None
        self.__email_template = None
        self.__tunnel_details = None
        self.__alert_email_digest_send_time = None
        self.__alert_email_digest_send_timezone = None
        self.discriminator = None
        if default_nutanix_email is not None:
            self.__default_nutanix_email = default_nutanix_email
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        if has_default_nutanix_email is not None:
            self.__has_default_nutanix_email = has_default_nutanix_email
        if is_email_digest_enabled is not None:
            self.__is_email_digest_enabled = is_email_digest_enabled
        if is_empty_alert_email_digest_skipped is not None:
            self.__is_empty_alert_email_digest_skipped = is_empty_alert_email_digest_skipped
        if email_config_rules is not None:
            self.__email_config_rules = email_config_rules
        if email_contact_list is not None:
            self.__email_contact_list = email_contact_list
        if email_template is not None:
            self.__email_template = email_template
        if tunnel_details is not None:
            self.__tunnel_details = tunnel_details
        if alert_email_digest_send_time is not None:
            self.__alert_email_digest_send_time = alert_email_digest_send_time
        if alert_email_digest_send_timezone is not None:
            self.__alert_email_digest_send_timezone = alert_email_digest_send_timezone

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.AlertEmailConfiguration'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def default_nutanix_email(self):
        """
        The default Nutanix email ID to which alert emails are sent.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__default_nutanix_email

    @default_nutanix_email.setter
    def default_nutanix_email(self, default_nutanix_email):
        if default_nutanix_email is not None and not re.search('^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$', default_nutanix_email):  # noqa: E501
            raise ValueError(r"Invalid value for `default_nutanix_email`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/`")  # noqa: E501

        self.__default_nutanix_email = default_nutanix_email

    @property
    def is_enabled(self):
        """
        Indicates whether alert emails are enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def has_default_nutanix_email(self):
        """
        Indicates whether alert emails are enabled or not on default Nutanix email ID.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_default_nutanix_email

    @has_default_nutanix_email.setter
    def has_default_nutanix_email(self, has_default_nutanix_email):

        self.__has_default_nutanix_email = has_default_nutanix_email

    @property
    def is_email_digest_enabled(self):
        """
        Indicates whether alert email digest is enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_email_digest_enabled

    @is_email_digest_enabled.setter
    def is_email_digest_enabled(self, is_email_digest_enabled):

        self.__is_email_digest_enabled = is_email_digest_enabled

    @property
    def is_empty_alert_email_digest_skipped(self):
        """
        Send alert email digest only if there are one or more alerts.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_empty_alert_email_digest_skipped

    @is_empty_alert_email_digest_skipped.setter
    def is_empty_alert_email_digest_skipped(self, is_empty_alert_email_digest_skipped):

        self.__is_empty_alert_email_digest_skipped = is_empty_alert_email_digest_skipped

    @property
    def email_config_rules(self):
        """
        Rules for email configuration.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.EmailConfigurationRule` ]
        """  # noqa: E501
        return self.__email_config_rules

    @email_config_rules.setter
    def email_config_rules(self, email_config_rules):

        self.__email_config_rules = email_config_rules

    @property
    def email_contact_list(self):
        """
        List of email contacts.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__email_contact_list

    @email_contact_list.setter
    def email_contact_list(self, email_contact_list):

        self.__email_contact_list = email_contact_list

    @property
    def email_template(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.EmailTemplate`
        """  # noqa: E501
        return self.__email_template

    @email_template.setter
    def email_template(self, email_template):

        self.__email_template = email_template

    @property
    def tunnel_details(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.RemoteTunnelDetails`
        """  # noqa: E501
        return self.__tunnel_details

    @tunnel_details.setter
    def tunnel_details(self, tunnel_details):

        self.__tunnel_details = tunnel_details

    @property
    def alert_email_digest_send_time(self):
        """
        Time in HH:mm format when the alert email digest is sent daily.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__alert_email_digest_send_time

    @alert_email_digest_send_time.setter
    def alert_email_digest_send_time(self, alert_email_digest_send_time):

        self.__alert_email_digest_send_time = alert_email_digest_send_time

    @property
    def alert_email_digest_send_timezone(self):
        """
        Timezone for the time at which the alert email digest is sent daily.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__alert_email_digest_send_timezone

    @alert_email_digest_send_timezone.setter
    def alert_email_digest_send_timezone(self, alert_email_digest_send_timezone):

        self.__alert_email_digest_send_timezone = alert_email_digest_send_timezone

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AlertEmailConfiguration, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertEmailConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.monitoring.v4.common.ImpactType import ImpactType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.Severity import Severity  # noqa: F401,E501

class EmailConfigurationRule(object):

    """Status of the remote tunnel that is used to send alert emails.

    :param cluster_uuids: (:attr:`cluster_uuids`) Cluster UUIDs to which this rule applies.
    :type cluster_uuids: 
    
    
    :param impact_types: (:attr:`impact_types`) 
    :type impact_types: 
    
    
    :param has_global_email_contact_list: (:attr:`has_global_email_contact_list`) Indicates whether to include a global email contact list. (**Default** False)
    :type has_global_email_contact_list: 
    
    
    :param match_phrases: (:attr:`match_phrases`) List of phrases to match the alert.
    :type match_phrases: 
    
    
    :param recipients: (:attr:`recipients`) List of recipients who will receive emails.
    :type recipients: 
    
    
    :param severities: (:attr:`severities`) 
    :type severities: 
    
    
    :param is_enabled: (:attr:`is_enabled`) Indicates whether the configuration rule is enabled or not. (**Default** True)
    :type is_enabled: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_uuids': 'list[str]',
        'impact_types': 'list[monitoring.v4.common.ImpactType]',
        'has_global_email_contact_list': 'bool',
        'match_phrases': 'list[str]',
        'recipients': 'list[str]',
        'severities': 'list[monitoring.v4.common.Severity]',
        'is_enabled': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_uuids': 'clusterUuids',
        'impact_types': 'impactTypes',
        'has_global_email_contact_list': 'hasGlobalEmailContactList',
        'match_phrases': 'matchPhrases',
        'recipients': 'recipients',
        'severities': 'severities',
        'is_enabled': 'isEnabled',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_uuids=None, impact_types=None, has_global_email_contact_list=False, match_phrases=None, recipients=None, severities=None, is_enabled=True, *args, **kwargs):  # noqa: E501
        self.__cluster_uuids = None
        self.__impact_types = None
        self.__has_global_email_contact_list = None
        self.__match_phrases = None
        self.__recipients = None
        self.__severities = None
        self.__is_enabled = None
        self.discriminator = None
        if cluster_uuids is not None:
            self.__cluster_uuids = cluster_uuids
        if impact_types is not None:
            self.__impact_types = impact_types
        if has_global_email_contact_list is not None:
            self.__has_global_email_contact_list = has_global_email_contact_list
        if match_phrases is not None:
            self.__match_phrases = match_phrases
        if recipients is not None:
            self.__recipients = recipients
        if severities is not None:
            self.__severities = severities
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.EmailConfigurationRule'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def cluster_uuids(self):
        """
        Cluster UUIDs to which this rule applies.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__cluster_uuids

    @cluster_uuids.setter
    def cluster_uuids(self, cluster_uuids):

        self.__cluster_uuids = cluster_uuids

    @property
    def impact_types(self):
        """
        

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.ImpactType` ]
        """  # noqa: E501
        return self.__impact_types

    @impact_types.setter
    def impact_types(self, impact_types):

        self.__impact_types = impact_types

    @property
    def has_global_email_contact_list(self):
        """
        Indicates whether to include a global email contact list.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_global_email_contact_list

    @has_global_email_contact_list.setter
    def has_global_email_contact_list(self, has_global_email_contact_list):

        self.__has_global_email_contact_list = has_global_email_contact_list

    @property
    def match_phrases(self):
        """
        List of phrases to match the alert.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__match_phrases

    @match_phrases.setter
    def match_phrases(self, match_phrases):

        self.__match_phrases = match_phrases

    @property
    def recipients(self):
        """
        List of recipients who will receive emails.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__recipients

    @recipients.setter
    def recipients(self, recipients):

        self.__recipients = recipients

    @property
    def severities(self):
        """
        

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.Severity` ]
        """  # noqa: E501
        return self.__severities

    @severities.setter
    def severities(self, severities):

        self.__severities = severities

    @property
    def is_enabled(self):
        """
        Indicates whether the configuration rule is enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(EmailConfigurationRule, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailConfigurationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


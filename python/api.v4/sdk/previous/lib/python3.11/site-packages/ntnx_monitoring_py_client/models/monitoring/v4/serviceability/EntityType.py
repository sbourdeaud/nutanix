# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class EntityType(object):

    """Entity type against which the alert is raised.


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - DISK: Indicates that the disk is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - VIRTUAL_DISK: Indicates that the virtual disk is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - VM: Indicates that the VM is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - CONTAINER: Indicates that the container is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - HOST: Indicates that the host is the entity type against which the policy will be executed, and an alert  will be issued if applicable.
        - CLUSTER: Indicates that the cluster is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - VOLUME_GROUP: Indicates that the volume group is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - FILE_SERVER: Indicates that the file server is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - HOST_NIC: Indicates that the host nic is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - RECOVERY_PLAN: Indicates that the recovery plan is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - PROTECTION_DOMAIN: Indicates that the protection domain is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - PROTECTION_RULE: Indicates that the protection rule is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - ACTION_RULE_RESULT: Indicates that the action rule result is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - AVAILABILITY_ZONE_PHYSICAL: Indicates that the availability zone physical is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - CONSISTENCY_GROUP_CONFIG: Indicates that the consistency group config is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - OVA: Indicates that the ova is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - VOLUME_GROUP_CONFIG: Indicates that the volume group config is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - VPN_CONNECTION: Indicates that the VPN connection is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - REMOTE_SITE: Indicates that the remote site is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - STORAGE_POOL: Indicates that the storage pool is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - LAYER2_STRETCH: Indicates that the layer2_Stretch is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - ATLAS_VIRTUAL_NETWORK: Indicates that the atlas virtual network is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - IPFIX_EXPORTER: Indicates that the ipfix exporter is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - ATLAS_ROUTING_POLICY: Indicates that the routing policy is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - BGP_SESSION: Indicates that the BGP session is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - MSP: Indicates that the MSP is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - VPN_GATEWAY: Indicates that the VPN gateway is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - ATLAS_LOAD_BALANCER_SESSION: Indicates that the atlas load balancer session is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - ATLAS_FLOW_GATEWAY: Indicates that the atlas flow gateway is the entity type against which the policy will be executed, and an alert will be issued if applicable.
        - PRISM_CENTRAL: Indicates that the prism central is the entity type against which the policy will be executed, and an alert will be issued if applicable.
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    DISK = "DISK"
    VIRTUAL_DISK = "VIRTUAL_DISK"
    VM = "VM"
    CONTAINER = "CONTAINER"
    HOST = "HOST"
    CLUSTER = "CLUSTER"
    VOLUME_GROUP = "VOLUME_GROUP"
    FILE_SERVER = "FILE_SERVER"
    HOST_NIC = "HOST_NIC"
    RECOVERY_PLAN = "RECOVERY_PLAN"
    PROTECTION_DOMAIN = "PROTECTION_DOMAIN"
    PROTECTION_RULE = "PROTECTION_RULE"
    ACTION_RULE_RESULT = "ACTION_RULE_RESULT"
    AVAILABILITY_ZONE_PHYSICAL = "AVAILABILITY_ZONE_PHYSICAL"
    CONSISTENCY_GROUP_CONFIG = "CONSISTENCY_GROUP_CONFIG"
    OVA = "OVA"
    VOLUME_GROUP_CONFIG = "VOLUME_GROUP_CONFIG"
    VPN_CONNECTION = "VPN_CONNECTION"
    REMOTE_SITE = "REMOTE_SITE"
    STORAGE_POOL = "STORAGE_POOL"
    LAYER2_STRETCH = "LAYER2_STRETCH"
    ATLAS_VIRTUAL_NETWORK = "ATLAS_VIRTUAL_NETWORK"
    IPFIX_EXPORTER = "IPFIX_EXPORTER"
    ATLAS_ROUTING_POLICY = "ATLAS_ROUTING_POLICY"
    BGP_SESSION = "BGP_SESSION"
    MSP = "MSP"
    VPN_GATEWAY = "VPN_GATEWAY"
    ATLAS_LOAD_BALANCER_SESSION = "ATLAS_LOAD_BALANCER_SESSION"
    ATLAS_FLOW_GATEWAY = "ATLAS_FLOW_GATEWAY"
    PRISM_CENTRAL = "PRISM_CENTRAL"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.EntityType'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr in vars(self):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(EntityType, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.common.v1.config.TenantAwareModel import TenantAwareModel  # noqa: F401,E501
from ntnx_monitoring_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.ImpactType import ImpactType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.ClusterConfig import ClusterConfig  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.ClusterType import ClusterType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.EntityType import EntityType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.Scope import Scope  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.SdaSubType import SdaSubType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.SdaType import SdaType  # noqa: F401,E501

class SystemDefinedPolicy(TenantAwareModel):

    """Attributes of System-Defined Alert Policy across all clusters.

    :param ext_id: (:attr:`ext_id`) Unique ID of the System-Defined Alert Policy.
    :type ext_id: 
     max=100 chars
    
    :param links: (:attr:`links`) A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.
    :type links: 
    
    
    :param name: (:attr:`name`) Name of the System-Defined Alert Policy.
    :type name: 
     max=1000 chars
    
    :param description: (:attr:`description`) System-defined alert policy description.
    :type description: 
     max=400 chars
    
    :param policy_id: (:attr:`policy_id`) Unique ID associated with the policy.
    :type policy_id: 
    
    
    :param title: (:attr:`title`) Title of a System-Defined Alert Policy.
    :type title: 
     max=250 chars
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param sub_type: (:attr:`sub_type`) 
    :type sub_type: 
    
    
    :param scope: (:attr:`scope`) 
    :type scope: 
    
    
    :param entity_type: (:attr:`entity_type`) 
    :type entity_type: 
    
    
    :param classifications: (:attr:`classifications`) Various categories into which this alert type can be classified. For example, hardware, storage, or license.
    :type classifications: 
    
    
    :param impact_types: (:attr:`impact_types`) Impact types to which this rule applies.
    :type impact_types: 
    
    
    :param kb_articles: (:attr:`kb_articles`) List of knowledge base article numbers.
    :type kb_articles: 
    
    
    :param target_clusters: (:attr:`target_clusters`) Indicates the cluster type against which this policy can be executed.
    :type target_clusters: 
    
    
    :param publisher: (:attr:`publisher`) Publisher of the policy. For example, NCC for all health check policies. (**Default** 'NCC')
    :type publisher: 
     min=1 chars,
    
    :param cluster_configs: (:attr:`cluster_configs`) SDA policy parameters that may differ across clusters since each cluster can run on different NCC versions. Each cluster will have an individual entry.
    :type cluster_configs: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'name': 'str',
        'description': 'str',
        'policy_id': 'str',
        'title': 'str',
        'type': 'monitoring.v4.serviceability.SdaType',
        'sub_type': 'monitoring.v4.serviceability.SdaSubType',
        'scope': 'monitoring.v4.serviceability.Scope',
        'entity_type': 'monitoring.v4.serviceability.EntityType',
        'classifications': 'list[str]',
        'impact_types': 'list[monitoring.v4.common.ImpactType]',
        'kb_articles': 'list[str]',
        'target_clusters': 'list[monitoring.v4.serviceability.ClusterType]',
        'publisher': 'str',
        'cluster_configs': 'list[monitoring.v4.serviceability.ClusterConfig]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'links': 'links',
        'name': 'name',
        'description': 'description',
        'policy_id': 'policyId',
        'title': 'title',
        'type': 'type',
        'sub_type': 'subType',
        'scope': 'scope',
        'entity_type': 'entityType',
        'classifications': 'classifications',
        'impact_types': 'impactTypes',
        'kb_articles': 'kbArticles',
        'target_clusters': 'targetClusters',
        'publisher': 'publisher',
        'cluster_configs': 'clusterConfigs',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, links=None, name=None, description=None, policy_id=None, title=None, type=None, sub_type=None, scope=None, entity_type=None, classifications=None, impact_types=None, kb_articles=None, target_clusters=None, publisher='NCC', cluster_configs=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        TenantAwareModel.__init__(self, tenant_id, *args, **kwargs)
        self.__ext_id = None
        self.__links = None
        self.__name = None
        self.__description = None
        self.__policy_id = None
        self.__title = None
        self.__type = None
        self.__sub_type = None
        self.__scope = None
        self.__entity_type = None
        self.__classifications = None
        self.__impact_types = None
        self.__kb_articles = None
        self.__target_clusters = None
        self.__publisher = None
        self.__cluster_configs = None
        self.discriminator = None
        if ext_id is not None:
            self.__ext_id = ext_id
        if links is not None:
            self.__links = links
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if policy_id is not None:
            self.__policy_id = policy_id
        if title is not None:
            self.__title = title
        if type is not None:
            self.__type = type
        if sub_type is not None:
            self.__sub_type = sub_type
        if scope is not None:
            self.__scope = scope
        if entity_type is not None:
            self.__entity_type = entity_type
        if classifications is not None:
            self.__classifications = classifications
        if impact_types is not None:
            self.__impact_types = impact_types
        if kb_articles is not None:
            self.__kb_articles = kb_articles
        if target_clusters is not None:
            self.__target_clusters = target_clusters
        if publisher is not None:
            self.__publisher = publisher
        if cluster_configs is not None:
            self.__cluster_configs = cluster_configs

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.SystemDefinedPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def ext_id(self):
        """
        Unique ID of the System-Defined Alert Policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        if ext_id is not None and len(ext_id) > 100:
            raise ValueError("Invalid value for `ext_id`, length must be less than or equal to `100`")  # noqa: E501
        if ext_id is not None and not re.search('^\\d+$', ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `ext_id`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self.__ext_id = ext_id

    @property
    def links(self):
        """
        A HATEOAS style link for the response. Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.common.v1.response.ApiLink` ]
        """  # noqa: E501
        return self.__links

    @links.setter
    def links(self, links):

        self.__links = links

    @property
    def name(self):
        """
        Name of the System-Defined Alert Policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 1000:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1000`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        System-defined alert policy description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 400:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `400`")  # noqa: E501

        self.__description = description

    @property
    def policy_id(self):
        """
        Unique ID associated with the policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        if policy_id is not None and not re.search('^{A}\\d+$', policy_id):  # noqa: E501
            raise ValueError(r"Invalid value for `policy_id`, must be a follow pattern or equal to `/^{A}\\d+$/`")  # noqa: E501

        self.__policy_id = policy_id

    @property
    def title(self):
        """
        Title of a System-Defined Alert Policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__title

    @title.setter
    def title(self, title):
        if title is not None and len(title) > 250:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `250`")  # noqa: E501

        self.__title = title

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.SdaType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def sub_type(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.SdaSubType`
        """  # noqa: E501
        return self.__sub_type

    @sub_type.setter
    def sub_type(self, sub_type):

        self.__sub_type = sub_type

    @property
    def scope(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.Scope`
        """  # noqa: E501
        return self.__scope

    @scope.setter
    def scope(self, scope):

        self.__scope = scope

    @property
    def entity_type(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.EntityType`
        """  # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def classifications(self):
        """
        Various categories into which this alert type can be classified. For example, hardware, storage, or license.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__classifications

    @classifications.setter
    def classifications(self, classifications):

        self.__classifications = classifications

    @property
    def impact_types(self):
        """
        Impact types to which this rule applies.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.ImpactType` ]
        """  # noqa: E501
        return self.__impact_types

    @impact_types.setter
    def impact_types(self, impact_types):

        self.__impact_types = impact_types

    @property
    def kb_articles(self):
        """
        List of knowledge base article numbers.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__kb_articles

    @kb_articles.setter
    def kb_articles(self, kb_articles):

        self.__kb_articles = kb_articles

    @property
    def target_clusters(self):
        """
        Indicates the cluster type against which this policy can be executed.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.ClusterType` ]
        """  # noqa: E501
        return self.__target_clusters

    @target_clusters.setter
    def target_clusters(self, target_clusters):

        self.__target_clusters = target_clusters

    @property
    def publisher(self):
        """
        Publisher of the policy. For example, NCC for all health check policies.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__publisher

    @publisher.setter
    def publisher(self, publisher):
        if publisher is not None and len(publisher) < 1:
            raise ValueError("Invalid value for `publisher`, length must be greater than or equal to `1`")  # noqa: E501

        self.__publisher = publisher

    @property
    def cluster_configs(self):
        """
        SDA policy parameters that may differ across clusters since each cluster can run on different NCC versions. Each cluster will have an individual entry.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.ClusterConfig` ]
        """  # noqa: E501
        return self.__cluster_configs

    @cluster_configs.setter
    def cluster_configs(self, cluster_configs):

        self.__cluster_configs = cluster_configs

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SystemDefinedPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemDefinedPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


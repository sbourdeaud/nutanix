# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_monitoring_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.AlertEntityReference import AlertEntityReference  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.EntityReference import EntityReference  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.ImpactType import ImpactType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.MetricDetail import MetricDetail  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.Parameter import Parameter  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.common.Severity import Severity  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.RootCauseAnalysis import RootCauseAnalysis  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.SeverityTrail import SeverityTrail  # noqa: F401,E501

class Alert(ExternalizableAbstractModel):

    """

    :param is_acknowledged: (:attr:`is_acknowledged`) Indicates whether the alert is acknowledged or not. (**Default** False)
    :type is_acknowledged: 
    
    
    :param acknowledged_by_username: (:attr:`acknowledged_by_username`) Name of the user who acknowledged this alert.
    :type acknowledged_by_username: 
     max=255 chars
    
    :param acknowledged_time: (:attr:`acknowledged_time`) The time in ISO 8601 format when the alert was acknowledged.
    :type acknowledged_time: 
    
    
    :param is_auto_resolved: (:attr:`is_auto_resolved`) Indicates whether the alert is auto-resolved or not. (**Default** False)
    :type is_auto_resolved: 
    
    
    :param is_resolved: (:attr:`is_resolved`) Indicates whether the alert is resolved or not. (**Default** False)
    :type is_resolved: 
    
    
    :param resolved_by_username: (:attr:`resolved_by_username`) Name of the user who resolved this alert.
    :type resolved_by_username: 
     max=255 chars
    
    :param resolved_time: (:attr:`resolved_time`) The time in ISO 8601 format when the alert was resolved.
    :type resolved_time: 
    
    
    :param source_entity: (:attr:`source_entity`) 
    :type source_entity: 
    
    
    :param affected_entities: (:attr:`affected_entities`) List of all the entities that are affected by the alert.
    :type affected_entities: 
    
    
    :param severity_trails: (:attr:`severity_trails`) Contains information on the severity change history for alerts. If an alert was de-duplicated without change in severity, then no trail will be present.
    :type severity_trails: 
    
    
    :param metric_details: (:attr:`metric_details`) Details of the metric for a metric-based event.
    :type metric_details: 
    
    
    :param title: (:attr:`title`) Title of the alert.
    :type title: 
    
    
    :param alert_type: (:attr:`alert_type`) A preconfigured or dynamically generated unique value for each alert type. For example, A1128  for storage pool space exceeded alerts.
    :type alert_type: 
    
    
    :param classifications: (:attr:`classifications`) Various categories into which this alert type can be classified. For example, hardware, storage, or license.
    :type classifications: 
    
    
    :param cluster_uuid: (:attr:`cluster_uuid`) Cluster UUID associated with the source entity of the alert.
    :type cluster_uuid: 
    
    
    :param creation_time: (:attr:`creation_time`) Time in ISO 8601 format when the alert was created.
    :type creation_time: 
    
    
    :param impact_types: (:attr:`impact_types`) The impact this alert or event will have on the system. For example, availability, performance, or capacity.
    :type impact_types: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) Time in ISO 8601 format when the alert was last updated.
    :type last_updated_time: 
    
    
    :param message: (:attr:`message`) Additional message associated with the alert.
    :type message: 
    
    
    :param originating_cluster_uuid: (:attr:`originating_cluster_uuid`) Cluster UUID associated with the cluster where the alert was first raised.
    :type originating_cluster_uuid: 
    
    
    :param severity: (:attr:`severity`) 
    :type severity: 
    
    
    :param is_user_defined: (:attr:`is_user_defined`) Flag to indicate if the alert was generated from a User-Defined Alert policy. (**Default** False)
    :type is_user_defined: 
    
    
    :param parameters: (:attr:`parameters`) Additional parameters associated with the alert. These parameters can be used to indicate custom key-value pairs for a given alert instance. For example, a service down in Prism Central alert can have the service name as a parameter.
    :type parameters: 
    
    
    :param service_name: (:attr:`service_name`) The service that raised the alert.
    :type service_name: 
     max=50 chars
    
    :param root_cause_analysis: (:attr:`root_cause_analysis`) Possible causes, resolutions and additional details to troubleshoot this alert.
    :type root_cause_analysis: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_acknowledged': 'bool',
        'acknowledged_by_username': 'str',
        'acknowledged_time': 'datetime',
        'is_auto_resolved': 'bool',
        'is_resolved': 'bool',
        'resolved_by_username': 'str',
        'resolved_time': 'datetime',
        'source_entity': 'monitoring.v4.common.AlertEntityReference',
        'affected_entities': 'list[monitoring.v4.common.EntityReference]',
        'severity_trails': 'list[monitoring.v4.serviceability.SeverityTrail]',
        'metric_details': 'list[monitoring.v4.common.MetricDetail]',
        'title': 'str',
        'alert_type': 'str',
        'classifications': 'list[str]',
        'cluster_uuid': 'str',
        'creation_time': 'datetime',
        'impact_types': 'list[monitoring.v4.common.ImpactType]',
        'last_updated_time': 'datetime',
        'message': 'str',
        'originating_cluster_uuid': 'str',
        'severity': 'monitoring.v4.common.Severity',
        'is_user_defined': 'bool',
        'parameters': 'list[monitoring.v4.common.Parameter]',
        'service_name': 'str',
        'root_cause_analysis': 'list[monitoring.v4.serviceability.RootCauseAnalysis]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_acknowledged': 'isAcknowledged',
        'acknowledged_by_username': 'acknowledgedByUsername',
        'acknowledged_time': 'acknowledgedTime',
        'is_auto_resolved': 'isAutoResolved',
        'is_resolved': 'isResolved',
        'resolved_by_username': 'resolvedByUsername',
        'resolved_time': 'resolvedTime',
        'source_entity': 'sourceEntity',
        'affected_entities': 'affectedEntities',
        'severity_trails': 'severityTrails',
        'metric_details': 'metricDetails',
        'title': 'title',
        'alert_type': 'alertType',
        'classifications': 'classifications',
        'cluster_uuid': 'clusterUUID',
        'creation_time': 'creationTime',
        'impact_types': 'impactTypes',
        'last_updated_time': 'lastUpdatedTime',
        'message': 'message',
        'originating_cluster_uuid': 'originatingClusterUUID',
        'severity': 'severity',
        'is_user_defined': 'isUserDefined',
        'parameters': 'parameters',
        'service_name': 'serviceName',
        'root_cause_analysis': 'rootCauseAnalysis',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_acknowledged=False, acknowledged_by_username=None, acknowledged_time=None, is_auto_resolved=False, is_resolved=False, resolved_by_username=None, resolved_time=None, source_entity=None, affected_entities=None, severity_trails=None, metric_details=None, title=None, alert_type=None, classifications=None, cluster_uuid=None, creation_time=None, impact_types=None, last_updated_time=None, message=None, originating_cluster_uuid=None, severity=None, is_user_defined=False, parameters=None, service_name=None, root_cause_analysis=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__is_acknowledged = None
        self.__acknowledged_by_username = None
        self.__acknowledged_time = None
        self.__is_auto_resolved = None
        self.__is_resolved = None
        self.__resolved_by_username = None
        self.__resolved_time = None
        self.__source_entity = None
        self.__affected_entities = None
        self.__severity_trails = None
        self.__metric_details = None
        self.__title = None
        self.__alert_type = None
        self.__classifications = None
        self.__cluster_uuid = None
        self.__creation_time = None
        self.__impact_types = None
        self.__last_updated_time = None
        self.__message = None
        self.__originating_cluster_uuid = None
        self.__severity = None
        self.__is_user_defined = None
        self.__parameters = None
        self.__service_name = None
        self.__root_cause_analysis = None
        self.discriminator = None
        if is_acknowledged is not None:
            self.__is_acknowledged = is_acknowledged
        if acknowledged_by_username is not None:
            self.__acknowledged_by_username = acknowledged_by_username
        if acknowledged_time is not None:
            self.__acknowledged_time = acknowledged_time
        if is_auto_resolved is not None:
            self.__is_auto_resolved = is_auto_resolved
        if is_resolved is not None:
            self.__is_resolved = is_resolved
        if resolved_by_username is not None:
            self.__resolved_by_username = resolved_by_username
        if resolved_time is not None:
            self.__resolved_time = resolved_time
        if source_entity is not None:
            self.__source_entity = source_entity
        if affected_entities is not None:
            self.__affected_entities = affected_entities
        if severity_trails is not None:
            self.__severity_trails = severity_trails
        if metric_details is not None:
            self.__metric_details = metric_details
        if title is not None:
            self.__title = title
        if alert_type is not None:
            self.__alert_type = alert_type
        if classifications is not None:
            self.__classifications = classifications
        if cluster_uuid is not None:
            self.__cluster_uuid = cluster_uuid
        if creation_time is not None:
            self.__creation_time = creation_time
        if impact_types is not None:
            self.__impact_types = impact_types
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if message is not None:
            self.__message = message
        if originating_cluster_uuid is not None:
            self.__originating_cluster_uuid = originating_cluster_uuid
        if severity is not None:
            self.__severity = severity
        if is_user_defined is not None:
            self.__is_user_defined = is_user_defined
        if parameters is not None:
            self.__parameters = parameters
        if service_name is not None:
            self.__service_name = service_name
        if root_cause_analysis is not None:
            self.__root_cause_analysis = root_cause_analysis

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.Alert'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def is_acknowledged(self):
        """
        Indicates whether the alert is acknowledged or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_acknowledged

    @is_acknowledged.setter
    def is_acknowledged(self, is_acknowledged):

        self.__is_acknowledged = is_acknowledged

    @property
    def acknowledged_by_username(self):
        """
        Name of the user who acknowledged this alert.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__acknowledged_by_username

    @acknowledged_by_username.setter
    def acknowledged_by_username(self, acknowledged_by_username):
        if acknowledged_by_username is not None and len(acknowledged_by_username) > 255:
            raise ValueError("Invalid value for `acknowledged_by_username`, length must be less than or equal to `255`")  # noqa: E501

        self.__acknowledged_by_username = acknowledged_by_username

    @property
    def acknowledged_time(self):
        """
        The time in ISO 8601 format when the alert was acknowledged.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__acknowledged_time

    @acknowledged_time.setter
    def acknowledged_time(self, acknowledged_time):

        self.__acknowledged_time = acknowledged_time

    @property
    def is_auto_resolved(self):
        """
        Indicates whether the alert is auto-resolved or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_auto_resolved

    @is_auto_resolved.setter
    def is_auto_resolved(self, is_auto_resolved):

        self.__is_auto_resolved = is_auto_resolved

    @property
    def is_resolved(self):
        """
        Indicates whether the alert is resolved or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_resolved

    @is_resolved.setter
    def is_resolved(self, is_resolved):

        self.__is_resolved = is_resolved

    @property
    def resolved_by_username(self):
        """
        Name of the user who resolved this alert.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__resolved_by_username

    @resolved_by_username.setter
    def resolved_by_username(self, resolved_by_username):
        if resolved_by_username is not None and len(resolved_by_username) > 255:
            raise ValueError("Invalid value for `resolved_by_username`, length must be less than or equal to `255`")  # noqa: E501

        self.__resolved_by_username = resolved_by_username

    @property
    def resolved_time(self):
        """
        The time in ISO 8601 format when the alert was resolved.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__resolved_time

    @resolved_time.setter
    def resolved_time(self, resolved_time):

        self.__resolved_time = resolved_time

    @property
    def source_entity(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.AlertEntityReference`
        """  # noqa: E501
        return self.__source_entity

    @source_entity.setter
    def source_entity(self, source_entity):

        self.__source_entity = source_entity

    @property
    def affected_entities(self):
        """
        List of all the entities that are affected by the alert.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.EntityReference` ]
        """  # noqa: E501
        return self.__affected_entities

    @affected_entities.setter
    def affected_entities(self, affected_entities):

        self.__affected_entities = affected_entities

    @property
    def severity_trails(self):
        """
        Contains information on the severity change history for alerts. If an alert was de-duplicated without change in severity, then no trail will be present.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.SeverityTrail` ]
        """  # noqa: E501
        return self.__severity_trails

    @severity_trails.setter
    def severity_trails(self, severity_trails):

        self.__severity_trails = severity_trails

    @property
    def metric_details(self):
        """
        Details of the metric for a metric-based event.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.MetricDetail` ]
        """  # noqa: E501
        return self.__metric_details

    @metric_details.setter
    def metric_details(self, metric_details):

        self.__metric_details = metric_details

    @property
    def title(self):
        """
        Title of the alert.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__title

    @title.setter
    def title(self, title):

        self.__title = title

    @property
    def alert_type(self):
        """
        A preconfigured or dynamically generated unique value for each alert type. For example, A1128  for storage pool space exceeded alerts.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__alert_type

    @alert_type.setter
    def alert_type(self, alert_type):

        self.__alert_type = alert_type

    @property
    def classifications(self):
        """
        Various categories into which this alert type can be classified. For example, hardware, storage, or license.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__classifications

    @classifications.setter
    def classifications(self, classifications):

        self.__classifications = classifications

    @property
    def cluster_uuid(self):
        """
        Cluster UUID associated with the source entity of the alert.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        if cluster_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_uuid = cluster_uuid

    @property
    def creation_time(self):
        """
        Time in ISO 8601 format when the alert was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__creation_time

    @creation_time.setter
    def creation_time(self, creation_time):

        self.__creation_time = creation_time

    @property
    def impact_types(self):
        """
        The impact this alert or event will have on the system. For example, availability, performance, or capacity.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.ImpactType` ]
        """  # noqa: E501
        return self.__impact_types

    @impact_types.setter
    def impact_types(self, impact_types):

        self.__impact_types = impact_types

    @property
    def last_updated_time(self):
        """
        Time in ISO 8601 format when the alert was last updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def message(self):
        """
        Additional message associated with the alert.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__message

    @message.setter
    def message(self, message):

        self.__message = message

    @property
    def originating_cluster_uuid(self):
        """
        Cluster UUID associated with the cluster where the alert was first raised.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__originating_cluster_uuid

    @originating_cluster_uuid.setter
    def originating_cluster_uuid(self, originating_cluster_uuid):
        if originating_cluster_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', originating_cluster_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `originating_cluster_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__originating_cluster_uuid = originating_cluster_uuid

    @property
    def severity(self):
        """
        

        :type:
            :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.Severity`
        """  # noqa: E501
        return self.__severity

    @severity.setter
    def severity(self, severity):

        self.__severity = severity

    @property
    def is_user_defined(self):
        """
        Flag to indicate if the alert was generated from a User-Defined Alert policy.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):

        self.__is_user_defined = is_user_defined

    @property
    def parameters(self):
        """
        Additional parameters associated with the alert. These parameters can be used to indicate custom key-value pairs for a given alert instance. For example, a service down in Prism Central alert can have the service name as a parameter.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.common.Parameter` ]
        """  # noqa: E501
        return self.__parameters

    @parameters.setter
    def parameters(self, parameters):

        self.__parameters = parameters

    @property
    def service_name(self):
        """
        The service that raised the alert.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__service_name

    @service_name.setter
    def service_name(self, service_name):
        if service_name is not None and len(service_name) > 50:
            raise ValueError("Invalid value for `service_name`, length must be less than or equal to `50`")  # noqa: E501

        self.__service_name = service_name

    @property
    def root_cause_analysis(self):
        """
        Possible causes, resolutions and additional details to troubleshoot this alert.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.monitoring.v4.serviceability.RootCauseAnalysis` ]
        """  # noqa: E501
        return self.__root_cause_analysis

    @root_cause_analysis.setter
    def root_cause_analysis(self, root_cause_analysis):

        self.__root_cause_analysis = root_cause_analysis

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Alert, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


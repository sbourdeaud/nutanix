# coding: utf-8


"""
IGNORE:
    Nutanix Flow Management APIs

    Manage Network Security Policy configuration of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class UpgradeSpec(object):

    """__Request body for Actual Config Upgrade__  It contains two required fields: - forceMonitor - upgradeSecuredSubnets 

    :param should_set_monitor_mode: (:attr:`should_set_monitor_mode`) If set to true, it forces all the policies to be in monitor mode after the upgrade completes. For the default false case, all the policies would remain in the same pre-upgrade state. 
    :type should_set_monitor_mode: required
    
    
    :param should_upgrade_secured_subnets_only: (:attr:`should_upgrade_secured_subnets_only`) If set to true, only the subnets with NSP secured VMs are upgraded. For the value set to false, all the subnets are upgraded. 
    :type should_upgrade_secured_subnets_only: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'should_set_monitor_mode': 'bool',
        'should_upgrade_secured_subnets_only': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'should_set_monitor_mode': 'shouldSetMonitorMode',
        'should_upgrade_secured_subnets_only': 'shouldUpgradeSecuredSubnetsOnly',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, should_set_monitor_mode=None, should_upgrade_secured_subnets_only=None, *args, **kwargs):  # noqa: E501
        self.__should_set_monitor_mode = None
        self.__should_upgrade_secured_subnets_only = None
        self.discriminator = None
        self.__should_set_monitor_mode = should_set_monitor_mode
        if should_upgrade_secured_subnets_only is not None:
            self.__should_upgrade_secured_subnets_only = should_upgrade_secured_subnets_only
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'microseg.v4.operation.UpgradeSpec'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def should_set_monitor_mode(self):
        """
        If set to true, it forces all the policies to be in monitor mode after the upgrade completes. For the default false case, all the policies would remain in the same pre-upgrade state. 

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_set_monitor_mode

    @should_set_monitor_mode.setter
    def should_set_monitor_mode(self, should_set_monitor_mode):
        if should_set_monitor_mode is None:
            raise ValueError("Invalid value for `should_set_monitor_mode`, must not be `None`")  # noqa: E501

        self.__should_set_monitor_mode = should_set_monitor_mode

    @property
    def should_upgrade_secured_subnets_only(self):
        """
        If set to true, only the subnets with NSP secured VMs are upgraded. For the value set to false, all the subnets are upgraded. 

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_upgrade_secured_subnets_only

    @should_upgrade_secured_subnets_only.setter
    def should_upgrade_secured_subnets_only(self, should_upgrade_secured_subnets_only):

        self.__should_upgrade_secured_subnets_only = should_upgrade_secured_subnets_only

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(UpgradeSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Flow Management APIs

    Manage Network Security Policy configuration of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_microseg_py_client.models.common.v1.config.Message import Message  # noqa: F401,E501
from ntnx_microseg_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_microseg_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.operation.PolicyUpgradeSummary import PolicyUpgradeSummary  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.operation.SubnetUpgradeSummary import SubnetUpgradeSummary  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.operation.TotalPolicyCount import TotalPolicyCount  # noqa: F401,E501

class DryRunSummary(ExternalizableAbstractModel):

    """

    :param policy_summaries: (:attr:`policy_summaries`) 
    :type policy_summaries: 
    
    
    :param count_summary: (:attr:`count_summary`) 
    :type count_summary: 
    
    
    :param subnet_summaries: (:attr:`subnet_summaries`) 
    :type subnet_summaries: 
    
    
    :param summary_failures: (:attr:`summary_failures`) Summary of failures from the flow upgrade dry-run summary report.
    :type summary_failures: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'policy_summaries': 'list[microseg.v4.operation.PolicyUpgradeSummary]',
        'count_summary': 'microseg.v4.operation.TotalPolicyCount',
        'subnet_summaries': 'list[microseg.v4.operation.SubnetUpgradeSummary]',
        'summary_failures': 'list[common.v1.config.Message]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'policy_summaries': 'policySummaries',
        'count_summary': 'countSummary',
        'subnet_summaries': 'subnetSummaries',
        'summary_failures': 'summaryFailures',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, policy_summaries=None, count_summary=None, subnet_summaries=None, summary_failures=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__policy_summaries = None
        self.__count_summary = None
        self.__subnet_summaries = None
        self.__summary_failures = None
        self.discriminator = None
        if policy_summaries is not None:
            self.__policy_summaries = policy_summaries
        if count_summary is not None:
            self.__count_summary = count_summary
        if subnet_summaries is not None:
            self.__subnet_summaries = subnet_summaries
        if summary_failures is not None:
            self.__summary_failures = summary_failures

    def _initialize_object_type(self):
        return 'microseg.v4.operation.DryRunSummary'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def policy_summaries(self):
        """
        

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.operation.PolicyUpgradeSummary` ]
        """  # noqa: E501
        return self.__policy_summaries

    @policy_summaries.setter
    def policy_summaries(self, policy_summaries):

        self.__policy_summaries = policy_summaries

    @property
    def count_summary(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.microseg.v4.operation.TotalPolicyCount`
        """  # noqa: E501
        return self.__count_summary

    @count_summary.setter
    def count_summary(self, count_summary):

        self.__count_summary = count_summary

    @property
    def subnet_summaries(self):
        """
        

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.operation.SubnetUpgradeSummary` ]
        """  # noqa: E501
        return self.__subnet_summaries

    @subnet_summaries.setter
    def subnet_summaries(self, subnet_summaries):

        self.__subnet_summaries = subnet_summaries

    @property
    def summary_failures(self):
        """
        Summary of failures from the flow upgrade dry-run summary report.

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.common.v1.config.Message` ]
        """  # noqa: E501
        return self.__summary_failures

    @summary_failures.setter
    def summary_failures(self, summary_failures):

        self.__summary_failures = summary_failures

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DryRunSummary, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DryRunSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


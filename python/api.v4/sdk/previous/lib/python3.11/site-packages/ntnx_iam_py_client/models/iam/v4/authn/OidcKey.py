# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.iam.v4.authn.AlgoType import AlgoType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.KeyType import KeyType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.UseType import UseType  # noqa: F401,E501

class OidcKey(object):

    """JSON Web Key that can be used to verify the signature of tokens issued by IAM.

    :param alg: (:attr:`alg`) 
    :type alg: required
    
    
    :param use: (:attr:`use`) 
    :type use: required
    
    
    :param kty: (:attr:`kty`) 
    :type kty: required
    
    
    :param kid: (:attr:`kid`) Unique identifier of the key.
    :type kid: required
    
    
    :param x5_c: (:attr:`x5_c`) x509 certificate chain of the key.
    :type x5_c: required
    
    
    :param n: (:attr:`n`) Modulus for a standard PEM.
    :type n: required
    
    
    :param e: (:attr:`e`) Exponent for a standard PEM.
    :type e: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'alg': 'iam.v4.authn.AlgoType',
        'use': 'iam.v4.authn.UseType',
        'kty': 'iam.v4.authn.KeyType',
        'kid': 'str',
        'x5_c': 'str',
        'n': 'str',
        'e': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'alg': 'alg',
        'use': 'use',
        'kty': 'kty',
        'kid': 'kid',
        'x5_c': 'x5c',
        'n': 'n',
        'e': 'e',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, alg=None, use=None, kty=None, kid=None, x5_c=None, n=None, e=None, *args, **kwargs):  # noqa: E501
        self.__alg = None
        self.__use = None
        self.__kty = None
        self.__kid = None
        self.__x5_c = None
        self.__n = None
        self.__e = None
        self.discriminator = None
        self.__alg = alg
        self.__use = use
        self.__kty = kty
        self.__kid = kid
        self.__x5_c = x5_c
        self.__n = n
        self.__e = e
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'iam.v4.authn.OidcKey'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def alg(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.AlgoType`
        """  # noqa: E501
        return self.__alg

    @alg.setter
    def alg(self, alg):
        if alg is None:
            raise ValueError("Invalid value for `alg`, must not be `None`")  # noqa: E501

        self.__alg = alg

    @property
    def use(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.UseType`
        """  # noqa: E501
        return self.__use

    @use.setter
    def use(self, use):
        if use is None:
            raise ValueError("Invalid value for `use`, must not be `None`")  # noqa: E501

        self.__use = use

    @property
    def kty(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.KeyType`
        """  # noqa: E501
        return self.__kty

    @kty.setter
    def kty(self, kty):
        if kty is None:
            raise ValueError("Invalid value for `kty`, must not be `None`")  # noqa: E501

        self.__kty = kty

    @property
    def kid(self):
        """
        Unique identifier of the key.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__kid

    @kid.setter
    def kid(self, kid):
        if kid is None:
            raise ValueError("Invalid value for `kid`, must not be `None`")  # noqa: E501

        self.__kid = kid

    @property
    def x5_c(self):
        """
        x509 certificate chain of the key.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__x5_c

    @x5_c.setter
    def x5_c(self, x5_c):
        if x5_c is None:
            raise ValueError("Invalid value for `x5_c`, must not be `None`")  # noqa: E501

        self.__x5_c = x5_c

    @property
    def n(self):
        """
        Modulus for a standard PEM.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__n

    @n.setter
    def n(self, n):
        if n is None:
            raise ValueError("Invalid value for `n`, must not be `None`")  # noqa: E501

        self.__n = n

    @property
    def e(self):
        """
        Exponent for a standard PEM.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__e

    @e.setter
    def e(self, e):
        if e is None:
            raise ValueError("Invalid value for `e`, must not be `None`")  # noqa: E501

        self.__e = e

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(OidcKey, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OidcKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


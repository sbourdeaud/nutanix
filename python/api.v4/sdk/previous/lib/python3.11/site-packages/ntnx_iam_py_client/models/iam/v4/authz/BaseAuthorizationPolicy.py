# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authz.EntityFilter import EntityFilter  # noqa: F401,E501

class BaseAuthorizationPolicy(ExternalizableAbstractModel):

    """An authorization policy that defines who can perform what operation on which entity, without including identity details.

    :param display_name: (:attr:`display_name`) The display name for the authorization policy.
    :type display_name: 
     min=1 chars, max=255 chars
    
    :param description: (:attr:`description`) Description of the authorization policy.
    :type description: 
     max=1000 chars
    
    :param client_name: (:attr:`client_name`) Client that created the entity.
    :type client_name: 
     max=255 chars
    
    :param entities: (:attr:`entities`) The entities being qualified by the authorization policy.
    :type entities: 
    
    
    :param role: (:attr:`role`) The role associated with the authorization policy.
    :type role: 
     max=255 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'display_name': 'str',
        'description': 'str',
        'client_name': 'str',
        'entities': 'list[iam.v4.authz.EntityFilter]',
        'role': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'display_name': 'displayName',
        'description': 'description',
        'client_name': 'clientName',
        'entities': 'entities',
        'role': 'role',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, display_name=None, description=None, client_name=None, entities=None, role=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__display_name = None
        self.__description = None
        self.__client_name = None
        self.__entities = None
        self.__role = None
        self.discriminator = None
        if display_name is not None:
            self.__display_name = display_name
        if description is not None:
            self.__description = description
        if client_name is not None:
            self.__client_name = client_name
        if entities is not None:
            self.__entities = entities
        if role is not None:
            self.__role = role

    def _initialize_object_type(self):
        return 'iam.v4.authz.BaseAuthorizationPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def display_name(self):
        """
        The display name for the authorization policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__display_name

    @display_name.setter
    def display_name(self, display_name):
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501
        if display_name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', display_name):  # noqa: E501
            raise ValueError(r"Invalid value for `display_name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__display_name = display_name

    @property
    def description(self):
        """
        Description of the authorization policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501
        if description is not None and not re.search('^[^<>;()&+%\/\\\\\"`]*$', description):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^[^<>;()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__description = description

    @property
    def client_name(self):
        """
        Client that created the entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_name

    @client_name.setter
    def client_name(self, client_name):
        if client_name is not None and len(client_name) > 255:
            raise ValueError("Invalid value for `client_name`, length must be less than or equal to `255`")  # noqa: E501
        if client_name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', client_name):  # noqa: E501
            raise ValueError(r"Invalid value for `client_name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__client_name = client_name

    @property
    def entities(self):
        """
        The entities being qualified by the authorization policy.

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authz.EntityFilter` ]
        """  # noqa: E501
        return self.__entities

    @entities.setter
    def entities(self, entities):

        self.__entities = entities

    @property
    def role(self):
        """
        The role associated with the authorization policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__role

    @role.setter
    def role(self, role):
        if role is not None and len(role) > 255:
            raise ValueError("Invalid value for `role`, length must be less than or equal to `255`")  # noqa: E501
        if role is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', role):  # noqa: E501
            raise ValueError(r"Invalid value for `role`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__role = role

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(BaseAuthorizationPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseAuthorizationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


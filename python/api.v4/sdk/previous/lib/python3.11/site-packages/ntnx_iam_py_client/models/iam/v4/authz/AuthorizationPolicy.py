# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.iam.v4.authz.AuthorizationPolicyType import AuthorizationPolicyType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authz.BaseAuthorizationPolicy import BaseAuthorizationPolicy  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authz.EntityFilter import EntityFilter  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authz.IdentityFilter import IdentityFilter  # noqa: F401,E501

class AuthorizationPolicy(BaseAuthorizationPolicy):

    """An authorization policy that defines who can perform what operation on which entity.

    :param identities: (:attr:`identities`) The identities for which the authorization policy is created.
    :type identities: 
    
    
    :param created_time: (:attr:`created_time`) The creation time of the authorization policy.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) The time when the authorization policy was last updated.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or Service Name that created the authorization policy.
    :type created_by: 
    
    
    :param is_system_defined: (:attr:`is_system_defined`) Flag identifying if the authorization policy is system-defined or not. (**Default** True)
    :type is_system_defined: 
    
    
    :param authorization_policy_type: (:attr:`authorization_policy_type`) 
    :type authorization_policy_type: 
    
    
    :param assigned_users_count: (:attr:`assigned_users_count`) Number of users assigned to the authorization policy.
    :type assigned_users_count: 
    
    
    :param assigned_user_groups_count: (:attr:`assigned_user_groups_count`) Number of user groups assigned to the authorization policy.
    :type assigned_user_groups_count: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'identities': 'list[iam.v4.authz.IdentityFilter]',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'is_system_defined': 'bool',
        'authorization_policy_type': 'iam.v4.authz.AuthorizationPolicyType',
        'assigned_users_count': 'int',
        'assigned_user_groups_count': 'int',
        'display_name': 'str',
        'description': 'str',
        'client_name': 'str',
        'entities': 'list[iam.v4.authz.EntityFilter]',
        'role': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'identities': 'identities',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'is_system_defined': 'isSystemDefined',
        'authorization_policy_type': 'authorizationPolicyType',
        'assigned_users_count': 'assignedUsersCount',
        'assigned_user_groups_count': 'assignedUserGroupsCount',
        'display_name': 'displayName',
        'description': 'description',
        'client_name': 'clientName',
        'entities': 'entities',
        'role': 'role',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, identities=None, created_time=None, last_updated_time=None, created_by=None, is_system_defined=True, authorization_policy_type=None, assigned_users_count=None, assigned_user_groups_count=None, display_name=None, description=None, client_name=None, entities=None, role=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        BaseAuthorizationPolicy.__init__(self, display_name, description, client_name, entities, role, ext_id, links, tenant_id, *args, **kwargs)
        self.__identities = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.__is_system_defined = None
        self.__authorization_policy_type = None
        self.__assigned_users_count = None
        self.__assigned_user_groups_count = None
        self.discriminator = None
        if identities is not None:
            self.__identities = identities
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by
        if is_system_defined is not None:
            self.__is_system_defined = is_system_defined
        if authorization_policy_type is not None:
            self.__authorization_policy_type = authorization_policy_type
        if assigned_users_count is not None:
            self.__assigned_users_count = assigned_users_count
        if assigned_user_groups_count is not None:
            self.__assigned_user_groups_count = assigned_user_groups_count

    def _initialize_object_type(self):
        return 'iam.v4.authz.AuthorizationPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def identities(self):
        """
        The identities for which the authorization policy is created.

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authz.IdentityFilter` ]
        """  # noqa: E501
        return self.__identities

    @identities.setter
    def identities(self, identities):

        self.__identities = identities

    @property
    def created_time(self):
        """
        The creation time of the authorization policy.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        The time when the authorization policy was last updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """
        User or Service Name that created the authorization policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def is_system_defined(self):
        """
        Flag identifying if the authorization policy is system-defined or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_system_defined

    @is_system_defined.setter
    def is_system_defined(self, is_system_defined):

        self.__is_system_defined = is_system_defined

    @property
    def authorization_policy_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authz.AuthorizationPolicyType`
        """  # noqa: E501
        return self.__authorization_policy_type

    @authorization_policy_type.setter
    def authorization_policy_type(self, authorization_policy_type):

        self.__authorization_policy_type = authorization_policy_type

    @property
    def assigned_users_count(self):
        """
        Number of users assigned to the authorization policy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__assigned_users_count

    @assigned_users_count.setter
    def assigned_users_count(self, assigned_users_count):

        self.__assigned_users_count = assigned_users_count

    @property
    def assigned_user_groups_count(self):
        """
        Number of user groups assigned to the authorization policy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__assigned_user_groups_count

    @assigned_user_groups_count.setter
    def assigned_user_groups_count(self, assigned_user_groups_count):

        self.__assigned_user_groups_count = assigned_user_groups_count

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AuthorizationPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.iam.v4.authz.Role import Role  # noqa: F401,E501

class RoleProjection(Role):

    """

    :param description: (:attr:`description`) Description of the role.
    :type description: 
     max=1000 chars
    
    :param operations: (:attr:`operations`) List of operations for the role.
    :type operations: 
    
    
    :param accessible_clients: (:attr:`accessible_clients`) List of acessible clients for the role.
    :type accessible_clients: 
    
    
    :param accessible_entity_types: (:attr:`accessible_entity_types`) List of accessible entity types for the role.
    :type accessible_entity_types: 
    
    
    :param accessible_clients_count: (:attr:`accessible_clients_count`) Count of accessible clients for the role.
    :type accessible_clients_count: 
    
    
    :param accessible_entity_types_count: (:attr:`accessible_entity_types_count`) Count of accessible entity types for the role.
    :type accessible_entity_types_count: 
    
    
    :param assigned_users_count: (:attr:`assigned_users_count`) Number of users assigned to the given role.
    :type assigned_users_count: 
    
    
    :param assigned_user_groups_count: (:attr:`assigned_user_groups_count`) Number of user groups assigned to the given role.
    :type assigned_user_groups_count: 
    
    
    :param created_time: (:attr:`created_time`) The creation time of the role.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) The time when the role was last updated.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or Service Name that created the role.
    :type created_by: 
    
    
    :param is_system_defined: (:attr:`is_system_defined`) Flag identifying if the role is system-defined or not. (**Default** True)
    :type is_system_defined: 
    
    
    :param display_name: (:attr:`display_name`) The display name of the role.
    :type display_name: 
     min=1 chars, max=255 chars
    
    :param client_name: (:attr:`client_name`) Client that created the entity.
    :type client_name: 
     max=255 chars
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'description': 'str',
        'operations': 'list[str]',
        'accessible_clients': 'list[str]',
        'accessible_entity_types': 'list[str]',
        'accessible_clients_count': 'int',
        'accessible_entity_types_count': 'int',
        'assigned_users_count': 'int',
        'assigned_user_groups_count': 'int',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'is_system_defined': 'bool',
        'display_name': 'str',
        'client_name': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'description': 'description',
        'operations': 'operations',
        'accessible_clients': 'accessibleClients',
        'accessible_entity_types': 'accessibleEntityTypes',
        'accessible_clients_count': 'accessibleClientsCount',
        'accessible_entity_types_count': 'accessibleEntityTypesCount',
        'assigned_users_count': 'assignedUsersCount',
        'assigned_user_groups_count': 'assignedUserGroupsCount',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'is_system_defined': 'isSystemDefined',
        'display_name': 'displayName',
        'client_name': 'clientName',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, description=None, operations=None, accessible_clients=None, accessible_entity_types=None, accessible_clients_count=None, accessible_entity_types_count=None, assigned_users_count=None, assigned_user_groups_count=None, created_time=None, last_updated_time=None, created_by=None, is_system_defined=True, display_name=None, client_name=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        Role.__init__(self, description, operations, accessible_clients, accessible_entity_types, accessible_clients_count, accessible_entity_types_count, assigned_users_count, assigned_user_groups_count, created_time, last_updated_time, created_by, is_system_defined, display_name, client_name, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'iam.v4.authz.RoleProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RoleProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


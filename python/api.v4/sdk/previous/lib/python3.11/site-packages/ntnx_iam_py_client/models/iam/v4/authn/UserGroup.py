# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.GroupType import GroupType  # noqa: F401,E501

class UserGroup(ExternalizableAbstractModel):

    """Information of the user group.

    :param group_type: (:attr:`group_type`) 
    :type group_type: 
    
    
    :param idp_id: (:attr:`idp_id`) Identifier of the IDP for the user group.
    :type idp_id: 
    
    
    :param name: (:attr:`name`) Common Name of the user group.
    :type name: 
     max=255 chars
    
    :param distinguished_name: (:attr:`distinguished_name`) Identifier for the user group in the form of a distinguished name.
    :type distinguished_name: 
     max=255 chars
    
    :param created_time: (:attr:`created_time`) Creation time of the user group.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) Last updated time of the user group.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or Service who created the user group.
    :type created_by: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'group_type': 'iam.v4.authn.GroupType',
        'idp_id': 'str',
        'name': 'str',
        'distinguished_name': 'str',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'group_type': 'groupType',
        'idp_id': 'idpId',
        'name': 'name',
        'distinguished_name': 'distinguishedName',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, group_type=None, idp_id=None, name=None, distinguished_name=None, created_time=None, last_updated_time=None, created_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__group_type = None
        self.__idp_id = None
        self.__name = None
        self.__distinguished_name = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.discriminator = None
        if group_type is not None:
            self.__group_type = group_type
        if idp_id is not None:
            self.__idp_id = idp_id
        if name is not None:
            self.__name = name
        if distinguished_name is not None:
            self.__distinguished_name = distinguished_name
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by

    def _initialize_object_type(self):
        return 'iam.v4.authn.UserGroup'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def group_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.GroupType`
        """  # noqa: E501
        return self.__group_type

    @group_type.setter
    def group_type(self, group_type):

        self.__group_type = group_type

    @property
    def idp_id(self):
        """
        Identifier of the IDP for the user group.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__idp_id

    @idp_id.setter
    def idp_id(self, idp_id):
        if idp_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', idp_id):  # noqa: E501
            raise ValueError(r"Invalid value for `idp_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__idp_id = idp_id

    @property
    def name(self):
        """
        Common Name of the user group.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__name = name

    @property
    def distinguished_name(self):
        """
        Identifier for the user group in the form of a distinguished name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__distinguished_name

    @distinguished_name.setter
    def distinguished_name(self, distinguished_name):
        if distinguished_name is not None and len(distinguished_name) > 255:
            raise ValueError("Invalid value for `distinguished_name`, length must be less than or equal to `255`")  # noqa: E501

        self.__distinguished_name = distinguished_name

    @property
    def created_time(self):
        """
        Creation time of the user group.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        Last updated time of the user group.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """
        User or Service who created the user group.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(UserGroup, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.DirectoryType import DirectoryType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.DsServiceAccount import DsServiceAccount  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.GroupSearchType import GroupSearchType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.OpenLdapConfig import OpenLdapConfig  # noqa: F401,E501

class DirectoryService(ExternalizableAbstractModel):

    """Information of a directory service.

    :param name: (:attr:`name`) Name for the directory service.
    :type name: 
     min=1 chars, max=255 chars
    
    :param url: (:attr:`url`) URL for the directory service.
    :type url: 
     min=3 chars, max=2000 chars
    
    :param secondary_urls: (:attr:`secondary_urls`) Secondary URL for the directory service.
    :type secondary_urls: 
    
    
    :param domain_name: (:attr:`domain_name`) Domain name for the directory service.
    :type domain_name: 
     min=3 chars, max=255 chars
    
    :param directory_type: (:attr:`directory_type`) 
    :type directory_type: 
    
    
    :param service_account: (:attr:`service_account`) 
    :type service_account: 
    
    
    :param open_ldap_configuration: (:attr:`open_ldap_configuration`) 
    :type open_ldap_configuration: 
    
    
    :param group_search_type: (:attr:`group_search_type`) 
    :type group_search_type: 
    
    
    :param white_listed_groups: (:attr:`white_listed_groups`) List of allowed user groups for the directory service.
    :type white_listed_groups: 
    
    
    :param created_time: (:attr:`created_time`) Creation time of the directory service.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) Last updated time of the directory service.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or service who created the directory service.
    :type created_by: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'secondary_urls': 'list[str]',
        'domain_name': 'str',
        'directory_type': 'iam.v4.authn.DirectoryType',
        'service_account': 'iam.v4.authn.DsServiceAccount',
        'open_ldap_configuration': 'iam.v4.authn.OpenLdapConfig',
        'group_search_type': 'iam.v4.authn.GroupSearchType',
        'white_listed_groups': 'list[str]',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'secondary_urls': 'secondaryUrls',
        'domain_name': 'domainName',
        'directory_type': 'directoryType',
        'service_account': 'serviceAccount',
        'open_ldap_configuration': 'openLdapConfiguration',
        'group_search_type': 'groupSearchType',
        'white_listed_groups': 'whiteListedGroups',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, url=None, secondary_urls=None, domain_name=None, directory_type=None, service_account=None, open_ldap_configuration=None, group_search_type=None, white_listed_groups=None, created_time=None, last_updated_time=None, created_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__url = None
        self.__secondary_urls = None
        self.__domain_name = None
        self.__directory_type = None
        self.__service_account = None
        self.__open_ldap_configuration = None
        self.__group_search_type = None
        self.__white_listed_groups = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if url is not None:
            self.__url = url
        if secondary_urls is not None:
            self.__secondary_urls = secondary_urls
        if domain_name is not None:
            self.__domain_name = domain_name
        if directory_type is not None:
            self.__directory_type = directory_type
        if service_account is not None:
            self.__service_account = service_account
        if open_ldap_configuration is not None:
            self.__open_ldap_configuration = open_ldap_configuration
        if group_search_type is not None:
            self.__group_search_type = group_search_type
        if white_listed_groups is not None:
            self.__white_listed_groups = white_listed_groups
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by

    def _initialize_object_type(self):
        return 'iam.v4.authn.DirectoryService'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name for the directory service.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__name = name

    @property
    def url(self):
        """
        URL for the directory service.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__url

    @url.setter
    def url(self, url):
        if url is not None and len(url) > 2000:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501
        if url is not None and len(url) < 3:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `3`")  # noqa: E501

        self.__url = url

    @property
    def secondary_urls(self):
        """
        Secondary URL for the directory service.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__secondary_urls

    @secondary_urls.setter
    def secondary_urls(self, secondary_urls):

        self.__secondary_urls = secondary_urls

    @property
    def domain_name(self):
        """
        Domain name for the directory service.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        if domain_name is not None and len(domain_name) > 255:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `255`")  # noqa: E501
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")  # noqa: E501
        if domain_name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', domain_name):  # noqa: E501
            raise ValueError(r"Invalid value for `domain_name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__domain_name = domain_name

    @property
    def directory_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.DirectoryType`
        """  # noqa: E501
        return self.__directory_type

    @directory_type.setter
    def directory_type(self, directory_type):

        self.__directory_type = directory_type

    @property
    def service_account(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.DsServiceAccount`
        """  # noqa: E501
        return self.__service_account

    @service_account.setter
    def service_account(self, service_account):

        self.__service_account = service_account

    @property
    def open_ldap_configuration(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.OpenLdapConfig`
        """  # noqa: E501
        return self.__open_ldap_configuration

    @open_ldap_configuration.setter
    def open_ldap_configuration(self, open_ldap_configuration):

        self.__open_ldap_configuration = open_ldap_configuration

    @property
    def group_search_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.GroupSearchType`
        """  # noqa: E501
        return self.__group_search_type

    @group_search_type.setter
    def group_search_type(self, group_search_type):

        self.__group_search_type = group_search_type

    @property
    def white_listed_groups(self):
        """
        List of allowed user groups for the directory service.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__white_listed_groups

    @white_listed_groups.setter
    def white_listed_groups(self, white_listed_groups):

        self.__white_listed_groups = white_listed_groups

    @property
    def created_time(self):
        """
        Creation time of the directory service.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        Last updated time of the directory service.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """
        User or service who created the directory service.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DirectoryService, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


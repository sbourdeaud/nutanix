# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.IdpMetadata import IdpMetadata  # noqa: F401,E501

class SamlIdentityProvider(ExternalizableAbstractModel):

    """Information of SAML IDP.

    :param idp_metadata_url: (:attr:`idp_metadata_url`) Metadata URL that provides IDP details.
    :type idp_metadata_url: 
     min=3 chars, max=2000 chars
    
    :param idp_metadata_xml: (:attr:`idp_metadata_xml`) Base64 encoded metadata in XML format with IDP details.
    :type idp_metadata_xml: 
     min=3 chars,
    
    :param idp_metadata: (:attr:`idp_metadata`) 
    :type idp_metadata: 
    
    
    :param name: (:attr:`name`) Unique name of the IDP.
    :type name: 
     min=1 chars, max=255 chars
    
    :param username_attribute: (:attr:`username_attribute`) SAML assertion username attribute element. (**Default** 'name')
    :type username_attribute: 
     min=1 chars, max=256 chars
    
    :param email_attribute: (:attr:`email_attribute`) SAML assertion email attribute element. (**Default** 'email')
    :type email_attribute: 
     min=3 chars, max=256 chars
    
    :param groups_attribute: (:attr:`groups_attribute`) SAML assertion groups attribute element.
    :type groups_attribute: 
     min=3 chars, max=256 chars
    
    :param groups_delim: (:attr:`groups_delim`) Delimiter is used to split the value of an attribute into multiple groups.
    :type groups_delim: 
     min=1 chars, max=3 chars
    
    :param custom_attributes: (:attr:`custom_attributes`) SAML assertions for a list of custom attribute elements.
    :type custom_attributes: 
    
    
    :param entity_issuer: (:attr:`entity_issuer`) It will be used as an issuer in SAML authnRequest.
    :type entity_issuer: 
     min=3 chars, max=2000 chars
    
    :param is_signed_authn_req_enabled: (:attr:`is_signed_authn_req_enabled`) Flag indicating signing of SAML authnRequests.
    :type is_signed_authn_req_enabled: 
    
    
    :param created_time: (:attr:`created_time`) Creation time of the SAML identity provider.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) Last updated time of the SAML identity provider.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or service who created the SAML identity provider.
    :type created_by: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'idp_metadata_url': 'str',
        'idp_metadata_xml': 'str',
        'idp_metadata': 'iam.v4.authn.IdpMetadata',
        'name': 'str',
        'username_attribute': 'str',
        'email_attribute': 'str',
        'groups_attribute': 'str',
        'groups_delim': 'str',
        'custom_attributes': 'list[str]',
        'entity_issuer': 'str',
        'is_signed_authn_req_enabled': 'bool',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'idp_metadata_url': 'idpMetadataUrl',
        'idp_metadata_xml': 'idpMetadataXml',
        'idp_metadata': 'idpMetadata',
        'name': 'name',
        'username_attribute': 'usernameAttribute',
        'email_attribute': 'emailAttribute',
        'groups_attribute': 'groupsAttribute',
        'groups_delim': 'groupsDelim',
        'custom_attributes': 'customAttributes',
        'entity_issuer': 'entityIssuer',
        'is_signed_authn_req_enabled': 'isSignedAuthnReqEnabled',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, idp_metadata_url=None, idp_metadata_xml=None, idp_metadata=None, name=None, username_attribute='name', email_attribute='email', groups_attribute=None, groups_delim=None, custom_attributes=None, entity_issuer=None, is_signed_authn_req_enabled=None, created_time=None, last_updated_time=None, created_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__idp_metadata_url = None
        self.__idp_metadata_xml = None
        self.__idp_metadata = None
        self.__name = None
        self.__username_attribute = None
        self.__email_attribute = None
        self.__groups_attribute = None
        self.__groups_delim = None
        self.__custom_attributes = None
        self.__entity_issuer = None
        self.__is_signed_authn_req_enabled = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.discriminator = None
        if idp_metadata_url is not None:
            self.__idp_metadata_url = idp_metadata_url
        if idp_metadata_xml is not None:
            self.__idp_metadata_xml = idp_metadata_xml
        if idp_metadata is not None:
            self.__idp_metadata = idp_metadata
        if name is not None:
            self.__name = name
        if username_attribute is not None:
            self.__username_attribute = username_attribute
        if email_attribute is not None:
            self.__email_attribute = email_attribute
        if groups_attribute is not None:
            self.__groups_attribute = groups_attribute
        if groups_delim is not None:
            self.__groups_delim = groups_delim
        if custom_attributes is not None:
            self.__custom_attributes = custom_attributes
        if entity_issuer is not None:
            self.__entity_issuer = entity_issuer
        if is_signed_authn_req_enabled is not None:
            self.__is_signed_authn_req_enabled = is_signed_authn_req_enabled
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by

    def _initialize_object_type(self):
        return 'iam.v4.authn.SamlIdentityProvider'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def idp_metadata_url(self):
        """
        Metadata URL that provides IDP details.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__idp_metadata_url

    @idp_metadata_url.setter
    def idp_metadata_url(self, idp_metadata_url):
        if idp_metadata_url is not None and len(idp_metadata_url) > 2000:
            raise ValueError("Invalid value for `idp_metadata_url`, length must be less than or equal to `2000`")  # noqa: E501
        if idp_metadata_url is not None and len(idp_metadata_url) < 3:
            raise ValueError("Invalid value for `idp_metadata_url`, length must be greater than or equal to `3`")  # noqa: E501
        if idp_metadata_url is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', idp_metadata_url):  # noqa: E501
            raise ValueError(r"Invalid value for `idp_metadata_url`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__idp_metadata_url = idp_metadata_url

    @property
    def idp_metadata_xml(self):
        """
        Base64 encoded metadata in XML format with IDP details.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__idp_metadata_xml

    @idp_metadata_xml.setter
    def idp_metadata_xml(self, idp_metadata_xml):
        if idp_metadata_xml is not None and len(idp_metadata_xml) < 3:
            raise ValueError("Invalid value for `idp_metadata_xml`, length must be greater than or equal to `3`")  # noqa: E501

        self.__idp_metadata_xml = idp_metadata_xml

    @property
    def idp_metadata(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.IdpMetadata`
        """  # noqa: E501
        return self.__idp_metadata

    @idp_metadata.setter
    def idp_metadata(self, idp_metadata):

        self.__idp_metadata = idp_metadata

    @property
    def name(self):
        """
        Unique name of the IDP.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__name = name

    @property
    def username_attribute(self):
        """
        SAML assertion username attribute element.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__username_attribute

    @username_attribute.setter
    def username_attribute(self, username_attribute):
        if username_attribute is not None and len(username_attribute) > 256:
            raise ValueError("Invalid value for `username_attribute`, length must be less than or equal to `256`")  # noqa: E501
        if username_attribute is not None and len(username_attribute) < 1:
            raise ValueError("Invalid value for `username_attribute`, length must be greater than or equal to `1`")  # noqa: E501
        if username_attribute is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', username_attribute):  # noqa: E501
            raise ValueError(r"Invalid value for `username_attribute`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__username_attribute = username_attribute

    @property
    def email_attribute(self):
        """
        SAML assertion email attribute element.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__email_attribute

    @email_attribute.setter
    def email_attribute(self, email_attribute):
        if email_attribute is not None and len(email_attribute) > 256:
            raise ValueError("Invalid value for `email_attribute`, length must be less than or equal to `256`")  # noqa: E501
        if email_attribute is not None and len(email_attribute) < 3:
            raise ValueError("Invalid value for `email_attribute`, length must be greater than or equal to `3`")  # noqa: E501

        self.__email_attribute = email_attribute

    @property
    def groups_attribute(self):
        """
        SAML assertion groups attribute element.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__groups_attribute

    @groups_attribute.setter
    def groups_attribute(self, groups_attribute):
        if groups_attribute is not None and len(groups_attribute) > 256:
            raise ValueError("Invalid value for `groups_attribute`, length must be less than or equal to `256`")  # noqa: E501
        if groups_attribute is not None and len(groups_attribute) < 3:
            raise ValueError("Invalid value for `groups_attribute`, length must be greater than or equal to `3`")  # noqa: E501

        self.__groups_attribute = groups_attribute

    @property
    def groups_delim(self):
        """
        Delimiter is used to split the value of an attribute into multiple groups.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__groups_delim

    @groups_delim.setter
    def groups_delim(self, groups_delim):
        if groups_delim is not None and len(groups_delim) > 3:
            raise ValueError("Invalid value for `groups_delim`, length must be less than or equal to `3`")  # noqa: E501
        if groups_delim is not None and len(groups_delim) < 1:
            raise ValueError("Invalid value for `groups_delim`, length must be greater than or equal to `1`")  # noqa: E501

        self.__groups_delim = groups_delim

    @property
    def custom_attributes(self):
        """
        SAML assertions for a list of custom attribute elements.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):

        self.__custom_attributes = custom_attributes

    @property
    def entity_issuer(self):
        """
        It will be used as an issuer in SAML authnRequest.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_issuer

    @entity_issuer.setter
    def entity_issuer(self, entity_issuer):
        if entity_issuer is not None and len(entity_issuer) > 2000:
            raise ValueError("Invalid value for `entity_issuer`, length must be less than or equal to `2000`")  # noqa: E501
        if entity_issuer is not None and len(entity_issuer) < 3:
            raise ValueError("Invalid value for `entity_issuer`, length must be greater than or equal to `3`")  # noqa: E501

        self.__entity_issuer = entity_issuer

    @property
    def is_signed_authn_req_enabled(self):
        """
        Flag indicating signing of SAML authnRequests.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_signed_authn_req_enabled

    @is_signed_authn_req_enabled.setter
    def is_signed_authn_req_enabled(self, is_signed_authn_req_enabled):

        self.__is_signed_authn_req_enabled = is_signed_authn_req_enabled

    @property
    def created_time(self):
        """
        Creation time of the SAML identity provider.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        Last updated time of the SAML identity provider.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """
        User or service who created the SAML identity provider.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SamlIdentityProvider, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlIdentityProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


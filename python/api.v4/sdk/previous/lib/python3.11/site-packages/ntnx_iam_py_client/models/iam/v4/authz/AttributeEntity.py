# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authz.EntityOperators import EntityOperators  # noqa: F401,E501

class AttributeEntity(ExternalizableAbstractModel):

    """List of attributes supported for access control on this entity.

    :param display_name: (:attr:`display_name`) UI display name of the entity.
    :type display_name: 
     min=1 chars, max=255 chars
    
    :param supported_operators: (:attr:`supported_operators`) List of supported operators for this entity.
    :type supported_operators: 
    
    
    :param attribute_values: (:attr:`attribute_values`) List of attributes supported for access control on this entity.
    :type attribute_values: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'display_name': 'str',
        'supported_operators': 'list[iam.v4.authz.EntityOperators]',
        'attribute_values': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'display_name': 'displayName',
        'supported_operators': 'supportedOperators',
        'attribute_values': 'attributeValues',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, display_name=None, supported_operators=None, attribute_values=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__display_name = None
        self.__supported_operators = None
        self.__attribute_values = None
        self.discriminator = None
        if display_name is not None:
            self.__display_name = display_name
        if supported_operators is not None:
            self.__supported_operators = supported_operators
        if attribute_values is not None:
            self.__attribute_values = attribute_values

    def _initialize_object_type(self):
        return 'iam.v4.authz.AttributeEntity'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def display_name(self):
        """
        UI display name of the entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__display_name

    @display_name.setter
    def display_name(self, display_name):
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501
        if display_name is not None and not re.search('^[^\\\"]*$', display_name):  # noqa: E501
            raise ValueError(r"Invalid value for `display_name`, must be a follow pattern or equal to `/^[^\\\"]*$/`")  # noqa: E501

        self.__display_name = display_name

    @property
    def supported_operators(self):
        """
        List of supported operators for this entity.

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authz.EntityOperators` ]
        """  # noqa: E501
        return self.__supported_operators

    @supported_operators.setter
    def supported_operators(self, supported_operators):

        self.__supported_operators = supported_operators

    @property
    def attribute_values(self):
        """
        List of attributes supported for access control on this entity.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__attribute_values

    @attribute_values.setter
    def attribute_values(self, attribute_values):

        self.__attribute_values = attribute_values

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AttributeEntity, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


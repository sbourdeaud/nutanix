# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.Group import Group  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.OidcSubjectType import OidcSubjectType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.Tenant import Tenant  # noqa: F401,E501

class OidcUserinfo(ExternalizableAbstractModel):

    """IAM OpenID userinfo response.

    :param iss: (:attr:`iss`) Base URL of the identity service which it asserts as its issuer identifier.
    :type iss: 
    
    
    :param sub: (:attr:`sub`) Subject identifier. A locally unique identifier for the end user.
    :type sub: 
    
    
    :param sub_type: (:attr:`sub_type`) 
    :type sub_type: 
    
    
    :param exp: (:attr:`exp`) Expiration time for the identity claims in seconds since epoch.
    :type exp: 
    
    
    :param iat: (:attr:`iat`) Time at which the identity claims were issued in seconds since epoch.
    :type iat: 
    
    
    :param email: (:attr:`email`) Email address of the subject.
    :type email: 
     max=255 chars
    
    :param is_email_verified: (:attr:`is_email_verified`) Boolean to indicate if the email address of end user has been verified by IAM.
    :type is_email_verified: 
    
    
    :param name: (:attr:`name`) Display name of the user including the first and last name.
    :type name: 
     min=1 chars, max=255 chars
    
    :param user_id: (:attr:`user_id`) UUID V5 created for the user by IAM.
    :type user_id: 
    
    
    :param connector_id: (:attr:`connector_id`) UUID V5 of the authentication connector that was used to verify the credentials of the user.
    :type connector_id: 
    
    
    :param groups: (:attr:`groups`) List of groups obtained from the authentication provider for the user.
    :type groups: 
    
    
    :param tenant: (:attr:`tenant`) 
    :type tenant: 
    
    
    :param custom_claims: (:attr:`custom_claims`) Any additional user attributes obtained from the authentication provider in the form of key/value pairs.
    :type custom_claims: 
    
    
    :param legacy_roles: (:attr:`legacy_roles`) List of legacy Prism roles for the user.
    :type legacy_roles: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'iss': 'str',
        'sub': 'str',
        'sub_type': 'iam.v4.authn.OidcSubjectType',
        'exp': 'int',
        'iat': 'int',
        'email': 'str',
        'is_email_verified': 'bool',
        'name': 'str',
        'user_id': 'str',
        'connector_id': 'str',
        'groups': 'list[iam.v4.authn.Group]',
        'tenant': 'iam.v4.authn.Tenant',
        'custom_claims': 'dict(str, str)',
        'legacy_roles': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'iss': 'iss',
        'sub': 'sub',
        'sub_type': 'subType',
        'exp': 'exp',
        'iat': 'iat',
        'email': 'email',
        'is_email_verified': 'isEmailVerified',
        'name': 'name',
        'user_id': 'userId',
        'connector_id': 'connectorId',
        'groups': 'groups',
        'tenant': 'tenant',
        'custom_claims': 'customClaims',
        'legacy_roles': 'legacyRoles',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, iss=None, sub=None, sub_type=None, exp=None, iat=None, email=None, is_email_verified=None, name=None, user_id=None, connector_id=None, groups=None, tenant=None, custom_claims=None, legacy_roles=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__iss = None
        self.__sub = None
        self.__sub_type = None
        self.__exp = None
        self.__iat = None
        self.__email = None
        self.__is_email_verified = None
        self.__name = None
        self.__user_id = None
        self.__connector_id = None
        self.__groups = None
        self.__tenant = None
        self.__custom_claims = None
        self.__legacy_roles = None
        self.discriminator = None
        if iss is not None:
            self.__iss = iss
        if sub is not None:
            self.__sub = sub
        if sub_type is not None:
            self.__sub_type = sub_type
        if exp is not None:
            self.__exp = exp
        if iat is not None:
            self.__iat = iat
        if email is not None:
            self.__email = email
        if is_email_verified is not None:
            self.__is_email_verified = is_email_verified
        if name is not None:
            self.__name = name
        if user_id is not None:
            self.__user_id = user_id
        if connector_id is not None:
            self.__connector_id = connector_id
        if groups is not None:
            self.__groups = groups
        if tenant is not None:
            self.__tenant = tenant
        if custom_claims is not None:
            self.__custom_claims = custom_claims
        if legacy_roles is not None:
            self.__legacy_roles = legacy_roles

    def _initialize_object_type(self):
        return 'iam.v4.authn.OidcUserinfo'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def iss(self):
        """
        Base URL of the identity service which it asserts as its issuer identifier.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__iss

    @iss.setter
    def iss(self, iss):
        if iss is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', iss):  # noqa: E501
            raise ValueError(r"Invalid value for `iss`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__iss = iss

    @property
    def sub(self):
        """
        Subject identifier. A locally unique identifier for the end user.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__sub

    @sub.setter
    def sub(self, sub):

        self.__sub = sub

    @property
    def sub_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.OidcSubjectType`
        """  # noqa: E501
        return self.__sub_type

    @sub_type.setter
    def sub_type(self, sub_type):

        self.__sub_type = sub_type

    @property
    def exp(self):
        """
        Expiration time for the identity claims in seconds since epoch.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__exp

    @exp.setter
    def exp(self, exp):

        self.__exp = exp

    @property
    def iat(self):
        """
        Time at which the identity claims were issued in seconds since epoch.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__iat

    @iat.setter
    def iat(self, iat):

        self.__iat = iat

    @property
    def email(self):
        """
        Email address of the subject.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__email

    @email.setter
    def email(self, email):
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")  # noqa: E501
        if email is not None and not re.search('^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$', email):  # noqa: E501
            raise ValueError(r"Invalid value for `email`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/`")  # noqa: E501

        self.__email = email

    @property
    def is_email_verified(self):
        """
        Boolean to indicate if the email address of end user has been verified by IAM.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_email_verified

    @is_email_verified.setter
    def is_email_verified(self, is_email_verified):

        self.__is_email_verified = is_email_verified

    @property
    def name(self):
        """
        Display name of the user including the first and last name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__name = name

    @property
    def user_id(self):
        """
        UUID V5 created for the user by IAM.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__user_id

    @user_id.setter
    def user_id(self, user_id):
        if user_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', user_id):  # noqa: E501
            raise ValueError(r"Invalid value for `user_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__user_id = user_id

    @property
    def connector_id(self):
        """
        UUID V5 of the authentication connector that was used to verify the credentials of the user.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        if connector_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', connector_id):  # noqa: E501
            raise ValueError(r"Invalid value for `connector_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__connector_id = connector_id

    @property
    def groups(self):
        """
        List of groups obtained from the authentication provider for the user.

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.Group` ]
        """  # noqa: E501
        return self.__groups

    @groups.setter
    def groups(self, groups):

        self.__groups = groups

    @property
    def tenant(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.Tenant`
        """  # noqa: E501
        return self.__tenant

    @tenant.setter
    def tenant(self, tenant):

        self.__tenant = tenant

    @property
    def custom_claims(self):
        """
        Any additional user attributes obtained from the authentication provider in the form of key/value pairs.

        :type:
            dict(str, :class:`~str`)
        """  # noqa: E501
        return self.__custom_claims

    @custom_claims.setter
    def custom_claims(self, custom_claims):

        self.__custom_claims = custom_claims

    @property
    def legacy_roles(self):
        """
        List of legacy Prism roles for the user.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__legacy_roles

    @legacy_roles.setter
    def legacy_roles(self, legacy_roles):

        self.__legacy_roles = legacy_roles

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(OidcUserinfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OidcUserinfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


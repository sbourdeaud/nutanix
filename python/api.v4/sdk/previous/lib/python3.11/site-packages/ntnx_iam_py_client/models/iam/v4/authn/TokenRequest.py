# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.iam.v4.authn.GrantType import GrantType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.ScopesType import ScopesType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.SubjectType import SubjectType  # noqa: F401,E501

class TokenRequest(object):

    """Information of the OIDC Token request.

    :param grant_type: (:attr:`grant_type`) 
    :type grant_type: required
    
    
    :param code: (:attr:`code`) Code for the OIDC token.
    :type code: 
    
    
    :param connector_id: (:attr:`connector_id`) Connector identifier for the connector of a user.
    :type connector_id: 
    
    
    :param scope: (:attr:`scope`) 
    :type scope: required
    
    
    :param refresh_token: (:attr:`refresh_token`) Request token to get the OIDC token.
    :type refresh_token: 
    
    
    :param client_id: (:attr:`client_id`) Client identifier for the OIDC token request.
    :type client_id: required
    
    
    :param client_assertion_type: (:attr:`client_assertion_type`) Client assertion type for the OIDC token request.
    :type client_assertion_type: 
    
    
    :param client_assertion: (:attr:`client_assertion`) Client assertion for the OIDC token request.
    :type client_assertion: 
    
    
    :param redirect_uri: (:attr:`redirect_uri`) Redirect URI for the OIDC token request.
    :type redirect_uri: 
    
    
    :param audience: (:attr:`audience`) Audience for the OIDC token request.
    :type audience: 
    
    
    :param subject_token: (:attr:`subject_token`) Subject token for the OIDC token request.
    :type subject_token: 
    
    
    :param subject_token_type: (:attr:`subject_token_type`) 
    :type subject_token_type: 
    
    
    :param non_tenant_issuer: (:attr:`non_tenant_issuer`) Non-tenant issuer for the OIDC token request.
    :type non_tenant_issuer: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'grant_type': 'iam.v4.authn.GrantType',
        'code': 'str',
        'connector_id': 'str',
        'scope': 'iam.v4.authn.ScopesType',
        'refresh_token': 'str',
        'client_id': 'str',
        'client_assertion_type': 'str',
        'client_assertion': 'str',
        'redirect_uri': 'str',
        'audience': 'str',
        'subject_token': 'str',
        'subject_token_type': 'iam.v4.authn.SubjectType',
        'non_tenant_issuer': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'grant_type': 'grant_type',
        'code': 'code',
        'connector_id': 'connector_id',
        'scope': 'scope',
        'refresh_token': 'refresh_token',
        'client_id': 'client_id',
        'client_assertion_type': 'client_assertion_type',
        'client_assertion': 'client_assertion',
        'redirect_uri': 'redirect_uri',
        'audience': 'audience',
        'subject_token': 'subject_token',
        'subject_token_type': 'subject_token_type',
        'non_tenant_issuer': 'non_tenant_issuer',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, grant_type=None, code=None, connector_id=None, scope=None, refresh_token=None, client_id=None, client_assertion_type=None, client_assertion=None, redirect_uri=None, audience=None, subject_token=None, subject_token_type=None, non_tenant_issuer=None, *args, **kwargs):  # noqa: E501
        self.__grant_type = None
        self.__code = None
        self.__connector_id = None
        self.__scope = None
        self.__refresh_token = None
        self.__client_id = None
        self.__client_assertion_type = None
        self.__client_assertion = None
        self.__redirect_uri = None
        self.__audience = None
        self.__subject_token = None
        self.__subject_token_type = None
        self.__non_tenant_issuer = None
        self.discriminator = None
        self.__grant_type = grant_type
        if code is not None:
            self.__code = code
        if connector_id is not None:
            self.__connector_id = connector_id
        self.__scope = scope
        if refresh_token is not None:
            self.__refresh_token = refresh_token
        self.__client_id = client_id
        if client_assertion_type is not None:
            self.__client_assertion_type = client_assertion_type
        if client_assertion is not None:
            self.__client_assertion = client_assertion
        if redirect_uri is not None:
            self.__redirect_uri = redirect_uri
        if audience is not None:
            self.__audience = audience
        if subject_token is not None:
            self.__subject_token = subject_token
        if subject_token_type is not None:
            self.__subject_token_type = subject_token_type
        if non_tenant_issuer is not None:
            self.__non_tenant_issuer = non_tenant_issuer
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'iam.v4.authn.TokenRequest'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def grant_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.GrantType`
        """  # noqa: E501
        return self.__grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")  # noqa: E501

        self.__grant_type = grant_type

    @property
    def code(self):
        """
        Code for the OIDC token.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__code

    @code.setter
    def code(self, code):

        self.__code = code

    @property
    def connector_id(self):
        """
        Connector identifier for the connector of a user.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__connector_id

    @connector_id.setter
    def connector_id(self, connector_id):

        self.__connector_id = connector_id

    @property
    def scope(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.ScopesType`
        """  # noqa: E501
        return self.__scope

    @scope.setter
    def scope(self, scope):
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self.__scope = scope

    @property
    def refresh_token(self):
        """
        Request token to get the OIDC token.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):

        self.__refresh_token = refresh_token

    @property
    def client_id(self):
        """
        Client identifier for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_id

    @client_id.setter
    def client_id(self, client_id):
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self.__client_id = client_id

    @property
    def client_assertion_type(self):
        """
        Client assertion type for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_assertion_type

    @client_assertion_type.setter
    def client_assertion_type(self, client_assertion_type):

        self.__client_assertion_type = client_assertion_type

    @property
    def client_assertion(self):
        """
        Client assertion for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_assertion

    @client_assertion.setter
    def client_assertion(self, client_assertion):

        self.__client_assertion = client_assertion

    @property
    def redirect_uri(self):
        """
        Redirect URI for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        if redirect_uri is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', redirect_uri):  # noqa: E501
            raise ValueError(r"Invalid value for `redirect_uri`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__redirect_uri = redirect_uri

    @property
    def audience(self):
        """
        Audience for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__audience

    @audience.setter
    def audience(self, audience):

        self.__audience = audience

    @property
    def subject_token(self):
        """
        Subject token for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__subject_token

    @subject_token.setter
    def subject_token(self, subject_token):

        self.__subject_token = subject_token

    @property
    def subject_token_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.SubjectType`
        """  # noqa: E501
        return self.__subject_token_type

    @subject_token_type.setter
    def subject_token_type(self, subject_token_type):

        self.__subject_token_type = subject_token_type

    @property
    def non_tenant_issuer(self):
        """
        Non-tenant issuer for the OIDC token request.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__non_tenant_issuer

    @non_tenant_issuer.setter
    def non_tenant_issuer(self, non_tenant_issuer):

        self.__non_tenant_issuer = non_tenant_issuer

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TokenRequest, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.FederationClaims import FederationClaims  # noqa: F401,E501

class Federation(ExternalizableAbstractModel):

    """Description of the OIDC provider.

    :param well_known_config: (:attr:`well_known_config`) Well known URL of the OIDC provider.
    :type well_known_config: 
     min=3 chars, max=2000 chars
    
    :param idp_id: (:attr:`idp_id`) IDP attached to the users of the OIDC provider.
    :type idp_id: 
    
    
    :param cloud_tenant: (:attr:`cloud_tenant`) Provider side tenant that is registering domain.
    :type cloud_tenant: 
    
    
    :param cloud_api_key: (:attr:`cloud_api_key`) API key for authenticating to the OIDC provider.
    :type cloud_api_key: 
     max=128 chars
    
    :param claim_map: (:attr:`claim_map`) 
    :type claim_map: 
    
    
    :param created_time: (:attr:`created_time`) Creation time of the OIDC provider.
    :type created_time: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) Last updated time of the OIDC provider.
    :type last_updated_time: 
    
    
    :param created_by: (:attr:`created_by`) User or service who created the OIDC provider.
    :type created_by: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'well_known_config': 'str',
        'idp_id': 'str',
        'cloud_tenant': 'str',
        'cloud_api_key': 'str',
        'claim_map': 'iam.v4.authn.FederationClaims',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'well_known_config': 'wellKnownConfig',
        'idp_id': 'idpId',
        'cloud_tenant': 'cloudTenant',
        'cloud_api_key': 'cloudApiKey',
        'claim_map': 'claimMap',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, well_known_config=None, idp_id=None, cloud_tenant=None, cloud_api_key=None, claim_map=None, created_time=None, last_updated_time=None, created_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__well_known_config = None
        self.__idp_id = None
        self.__cloud_tenant = None
        self.__cloud_api_key = None
        self.__claim_map = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.discriminator = None
        if well_known_config is not None:
            self.__well_known_config = well_known_config
        if idp_id is not None:
            self.__idp_id = idp_id
        if cloud_tenant is not None:
            self.__cloud_tenant = cloud_tenant
        if cloud_api_key is not None:
            self.__cloud_api_key = cloud_api_key
        if claim_map is not None:
            self.__claim_map = claim_map
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by

    def _initialize_object_type(self):
        return 'iam.v4.authn.Federation'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def well_known_config(self):
        """
        Well known URL of the OIDC provider.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__well_known_config

    @well_known_config.setter
    def well_known_config(self, well_known_config):
        if well_known_config is not None and len(well_known_config) > 2000:
            raise ValueError("Invalid value for `well_known_config`, length must be less than or equal to `2000`")  # noqa: E501
        if well_known_config is not None and len(well_known_config) < 3:
            raise ValueError("Invalid value for `well_known_config`, length must be greater than or equal to `3`")  # noqa: E501
        if well_known_config is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', well_known_config):  # noqa: E501
            raise ValueError(r"Invalid value for `well_known_config`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__well_known_config = well_known_config

    @property
    def idp_id(self):
        """
        IDP attached to the users of the OIDC provider.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__idp_id

    @idp_id.setter
    def idp_id(self, idp_id):
        if idp_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', idp_id):  # noqa: E501
            raise ValueError(r"Invalid value for `idp_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__idp_id = idp_id

    @property
    def cloud_tenant(self):
        """
        Provider side tenant that is registering domain.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cloud_tenant

    @cloud_tenant.setter
    def cloud_tenant(self, cloud_tenant):
        if cloud_tenant is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cloud_tenant):  # noqa: E501
            raise ValueError(r"Invalid value for `cloud_tenant`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cloud_tenant = cloud_tenant

    @property
    def cloud_api_key(self):
        """
        API key for authenticating to the OIDC provider.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cloud_api_key

    @cloud_api_key.setter
    def cloud_api_key(self, cloud_api_key):
        if cloud_api_key is not None and len(cloud_api_key) > 128:
            raise ValueError("Invalid value for `cloud_api_key`, length must be less than or equal to `128`")  # noqa: E501

        self.__cloud_api_key = cloud_api_key

    @property
    def claim_map(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.FederationClaims`
        """  # noqa: E501
        return self.__claim_map

    @claim_map.setter
    def claim_map(self, claim_map):

        self.__claim_map = claim_map

    @property
    def created_time(self):
        """
        Creation time of the OIDC provider.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        Last updated time of the OIDC provider.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """
        User or service who created the OIDC provider.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Federation, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Federation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_iam_py_client.models
from ntnx_iam_py_client.models.OneOfiam.v4.authn.Keykey_details import Keykey_details  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.CreationType import CreationType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.KeyKind import KeyKind  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.KeyStatus import KeyStatus  # noqa: F401,E501

class Key(ExternalizableAbstractModel):

    """Credentials in the form of a unique random key for the users.

    :param name: (:attr:`name`) Identifier for the key in the form of a name.
    :type name: required
     min=1 chars, max=255 chars
    
    :param description: (:attr:`description`) Brief description of the key.
    :type description: 
     max=1000 chars
    
    :param key_type: (:attr:`key_type`) 
    :type key_type: required
    
    
    :param created_time: (:attr:`created_time`) The creation time of the key.
    :type created_time: 
    
    
    :param last_updated_by: (:attr:`last_updated_by`) User who updated the key.
    :type last_updated_by: 
    
    
    :param creation_type: (:attr:`creation_type`) 
    :type creation_type: 
    
    
    :param expiry_time: (:attr:`expiry_time`) The time when the key will expire.
    :type expiry_time: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param created_by: (:attr:`created_by`) User or service who created the key.
    :type created_by: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) The time when the key was updated.
    :type last_updated_time: 
    
    
    :param assigned_to: (:attr:`assigned_to`) External client to whom the given key is allocated.
    :type assigned_to: 
     min=3 chars, max=255 chars
    
    :param last_used_time: (:attr:`last_used_time`) The time when the key was last used.
    :type last_used_time: 
    
    
    :param key_details: (:attr:`key_details`) Details specific to type of the key.
    :type key_details: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'key_type': 'iam.v4.authn.KeyKind',
        'created_time': 'datetime',
        'last_updated_by': 'str',
        'creation_type': 'iam.v4.authn.CreationType',
        'expiry_time': 'datetime',
        'status': 'iam.v4.authn.KeyStatus',
        'created_by': 'str',
        'last_updated_time': 'datetime',
        'assigned_to': 'str',
        'last_used_time': 'datetime',
        'key_details': 'OneOfiam.v4.authn.Keykey_details',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'key_type': 'keyType',
        'created_time': 'createdTime',
        'last_updated_by': 'lastUpdatedBy',
        'creation_type': 'creationType',
        'expiry_time': 'expiryTime',
        'status': 'status',
        'created_by': 'createdBy',
        'last_updated_time': 'lastUpdatedTime',
        'assigned_to': 'assignedTo',
        'last_used_time': 'lastUsedTime',
        'key_details': 'keyDetails',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, key_type=None, created_time=None, last_updated_by=None, creation_type=None, expiry_time=None, status=None, created_by=None, last_updated_time=None, assigned_to=None, last_used_time=None, key_details=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__key_type = None
        self.__created_time = None
        self.__last_updated_by = None
        self.__creation_type = None
        self.__expiry_time = None
        self.__status = None
        self.__created_by = None
        self.__last_updated_time = None
        self.__assigned_to = None
        self.__last_used_time = None
        self.__key_details = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__key_type = key_type
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_by is not None:
            self.__last_updated_by = last_updated_by
        if creation_type is not None:
            self.__creation_type = creation_type
        if expiry_time is not None:
            self.__expiry_time = expiry_time
        if status is not None:
            self.__status = status
        if created_by is not None:
            self.__created_by = created_by
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if assigned_to is not None:
            self.__assigned_to = assigned_to
        if last_used_time is not None:
            self.__last_used_time = last_used_time
        if key_details is not None:
            self.__key_details = key_details

    def _initialize_object_type(self):
        return 'iam.v4.authn.Key'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Identifier for the key in the form of a name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Brief description of the key.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def key_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.KeyKind`
        """  # noqa: E501
        return self.__key_type

    @key_type.setter
    def key_type(self, key_type):
        if key_type is None:
            raise ValueError("Invalid value for `key_type`, must not be `None`")  # noqa: E501

        self.__key_type = key_type

    @property
    def created_time(self):
        """
        The creation time of the key.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_by(self):
        """
        User who updated the key.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        if last_updated_by is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', last_updated_by):  # noqa: E501
            raise ValueError(r"Invalid value for `last_updated_by`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__last_updated_by = last_updated_by

    @property
    def creation_type(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.CreationType`
        """  # noqa: E501
        return self.__creation_type

    @creation_type.setter
    def creation_type(self, creation_type):

        self.__creation_type = creation_type

    @property
    def expiry_time(self):
        """
        The time when the key will expire.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):

        self.__expiry_time = expiry_time

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_iam_py_client.models.iam.v4.authn.KeyStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def created_by(self):
        """
        User or service who created the key.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):
        if created_by is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', created_by):  # noqa: E501
            raise ValueError(r"Invalid value for `created_by`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__created_by = created_by

    @property
    def last_updated_time(self):
        """
        The time when the key was updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def assigned_to(self):
        """
        External client to whom the given key is allocated.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        if assigned_to is not None and len(assigned_to) > 255:
            raise ValueError("Invalid value for `assigned_to`, length must be less than or equal to `255`")  # noqa: E501
        if assigned_to is not None and len(assigned_to) < 3:
            raise ValueError("Invalid value for `assigned_to`, length must be greater than or equal to `3`")  # noqa: E501

        self.__assigned_to = assigned_to

    @property
    def last_used_time(self):
        """
        The time when the key was last used.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_used_time

    @last_used_time.setter
    def last_used_time(self, last_used_time):

        self.__last_used_time = last_used_time

    @property
    def key_details(self):
        """
        Details specific to type of the key.

        :type:
                :class:`~ntnx_iam_py_client.models.iam.v4.authn.ApiKeyDetails` | 
                :class:`~ntnx_iam_py_client.models.iam.v4.authn.ObjectKeyDetails`
        """  # noqa: E501
        return self.__key_details

    @key_details.setter
    def key_details(self, key_details):

        self.__key_details = key_details

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_iam_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Key, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Key):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


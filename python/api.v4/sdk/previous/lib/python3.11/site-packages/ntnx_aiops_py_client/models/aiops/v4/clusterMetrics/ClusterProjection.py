# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.clusterMetrics.Cluster import Cluster  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.clusterMetrics.NodeProjection import NodeProjection  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.clusterMetrics.VmProjection import VmProjection  # noqa: F401,E501

class ClusterProjection(Cluster):

    """

    :param vm_projection: (:attr:`vm_projection`) 
    :type vm_projection: 
    
    
    :param node_projection: (:attr:`node_projection`) 
    :type node_projection: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vm_projection': 'list[aiops.v4.clusterMetrics.VmProjection]',
        'node_projection': 'list[aiops.v4.clusterMetrics.NodeProjection]',
        'name': 'str',
        'uuid': 'str',
        'external_ip_address': 'str',
        'memory_capacity_bytes': 'str',
        'num_cpus': 'str',
        'hypervisor_memory_usage_ppm': 'str',
        'hypervisor_cpu_usage_ppm': 'str',
        'rf': 'str',
        'capacity_bytes': 'str',
        'free_bytes': 'str',
        'usage_bytes': 'str',
        'saved_bytes': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vm_projection': 'vmProjection',
        'node_projection': 'nodeProjection',
        'name': 'name',
        'uuid': 'uuid',
        'external_ip_address': 'externalIpAddress',
        'memory_capacity_bytes': 'memoryCapacityBytes',
        'num_cpus': 'numCpus',
        'hypervisor_memory_usage_ppm': 'hypervisorMemoryUsagePpm',
        'hypervisor_cpu_usage_ppm': 'hypervisorCpuUsagePpm',
        'rf': 'rf',
        'capacity_bytes': 'capacityBytes',
        'free_bytes': 'freeBytes',
        'usage_bytes': 'usageBytes',
        'saved_bytes': 'savedBytes',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vm_projection=None, node_projection=None, name=None, uuid=None, external_ip_address=None, memory_capacity_bytes=None, num_cpus=None, hypervisor_memory_usage_ppm=None, hypervisor_cpu_usage_ppm=None, rf=None, capacity_bytes=None, free_bytes=None, usage_bytes=None, saved_bytes=None, *args, **kwargs):  # noqa: E501
        Cluster.__init__(self, name, uuid, external_ip_address, memory_capacity_bytes, num_cpus, hypervisor_memory_usage_ppm, hypervisor_cpu_usage_ppm, rf, capacity_bytes, free_bytes, usage_bytes, saved_bytes, *args, **kwargs)
        self.__vm_projection = None
        self.__node_projection = None
        self.discriminator = None
        if vm_projection is not None:
            self.__vm_projection = vm_projection
        if node_projection is not None:
            self.__node_projection = node_projection

    def _initialize_object_type(self):
        return 'aiops.v4.clusterMetrics.ClusterProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def vm_projection(self):
        """
        

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.clusterMetrics.VmProjection` ]
        """  # noqa: E501
        return self.__vm_projection

    @vm_projection.setter
    def vm_projection(self, vm_projection):

        self.__vm_projection = vm_projection

    @property
    def node_projection(self):
        """
        

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.clusterMetrics.NodeProjection` ]
        """  # noqa: E501
        return self.__node_projection

    @node_projection.setter
    def node_projection(self, node_projection):

        self.__node_projection = node_projection

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


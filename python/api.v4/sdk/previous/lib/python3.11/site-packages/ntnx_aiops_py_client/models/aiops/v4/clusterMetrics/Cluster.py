# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class Cluster(object):

    """

    :param name: (:attr:`name`) 
    :type name: 
    
    
    :param uuid: (:attr:`uuid`) 
    :type uuid: 
    
    
    :param external_ip_address: (:attr:`external_ip_address`) 
    :type external_ip_address: 
    
    
    :param memory_capacity_bytes: (:attr:`memory_capacity_bytes`) 
    :type memory_capacity_bytes: 
    
    
    :param num_cpus: (:attr:`num_cpus`) 
    :type num_cpus: 
    
    
    :param hypervisor_memory_usage_ppm: (:attr:`hypervisor_memory_usage_ppm`) 
    :type hypervisor_memory_usage_ppm: 
    
    
    :param hypervisor_cpu_usage_ppm: (:attr:`hypervisor_cpu_usage_ppm`) 
    :type hypervisor_cpu_usage_ppm: 
    
    
    :param rf: (:attr:`rf`) 
    :type rf: 
    
    
    :param capacity_bytes: (:attr:`capacity_bytes`) 
    :type capacity_bytes: 
    
    
    :param free_bytes: (:attr:`free_bytes`) 
    :type free_bytes: 
    
    
    :param usage_bytes: (:attr:`usage_bytes`) 
    :type usage_bytes: 
    
    
    :param saved_bytes: (:attr:`saved_bytes`) 
    :type saved_bytes: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'external_ip_address': 'str',
        'memory_capacity_bytes': 'str',
        'num_cpus': 'str',
        'hypervisor_memory_usage_ppm': 'str',
        'hypervisor_cpu_usage_ppm': 'str',
        'rf': 'str',
        'capacity_bytes': 'str',
        'free_bytes': 'str',
        'usage_bytes': 'str',
        'saved_bytes': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'external_ip_address': 'externalIpAddress',
        'memory_capacity_bytes': 'memoryCapacityBytes',
        'num_cpus': 'numCpus',
        'hypervisor_memory_usage_ppm': 'hypervisorMemoryUsagePpm',
        'hypervisor_cpu_usage_ppm': 'hypervisorCpuUsagePpm',
        'rf': 'rf',
        'capacity_bytes': 'capacityBytes',
        'free_bytes': 'freeBytes',
        'usage_bytes': 'usageBytes',
        'saved_bytes': 'savedBytes',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, uuid=None, external_ip_address=None, memory_capacity_bytes=None, num_cpus=None, hypervisor_memory_usage_ppm=None, hypervisor_cpu_usage_ppm=None, rf=None, capacity_bytes=None, free_bytes=None, usage_bytes=None, saved_bytes=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__uuid = None
        self.__external_ip_address = None
        self.__memory_capacity_bytes = None
        self.__num_cpus = None
        self.__hypervisor_memory_usage_ppm = None
        self.__hypervisor_cpu_usage_ppm = None
        self.__rf = None
        self.__capacity_bytes = None
        self.__free_bytes = None
        self.__usage_bytes = None
        self.__saved_bytes = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if uuid is not None:
            self.__uuid = uuid
        if external_ip_address is not None:
            self.__external_ip_address = external_ip_address
        if memory_capacity_bytes is not None:
            self.__memory_capacity_bytes = memory_capacity_bytes
        if num_cpus is not None:
            self.__num_cpus = num_cpus
        if hypervisor_memory_usage_ppm is not None:
            self.__hypervisor_memory_usage_ppm = hypervisor_memory_usage_ppm
        if hypervisor_cpu_usage_ppm is not None:
            self.__hypervisor_cpu_usage_ppm = hypervisor_cpu_usage_ppm
        if rf is not None:
            self.__rf = rf
        if capacity_bytes is not None:
            self.__capacity_bytes = capacity_bytes
        if free_bytes is not None:
            self.__free_bytes = free_bytes
        if usage_bytes is not None:
            self.__usage_bytes = usage_bytes
        if saved_bytes is not None:
            self.__saved_bytes = saved_bytes
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.clusterMetrics.Cluster'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def uuid(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__uuid

    @uuid.setter
    def uuid(self, uuid):
        if uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__uuid = uuid

    @property
    def external_ip_address(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__external_ip_address

    @external_ip_address.setter
    def external_ip_address(self, external_ip_address):

        self.__external_ip_address = external_ip_address

    @property
    def memory_capacity_bytes(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__memory_capacity_bytes

    @memory_capacity_bytes.setter
    def memory_capacity_bytes(self, memory_capacity_bytes):

        self.__memory_capacity_bytes = memory_capacity_bytes

    @property
    def num_cpus(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__num_cpus

    @num_cpus.setter
    def num_cpus(self, num_cpus):

        self.__num_cpus = num_cpus

    @property
    def hypervisor_memory_usage_ppm(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hypervisor_memory_usage_ppm

    @hypervisor_memory_usage_ppm.setter
    def hypervisor_memory_usage_ppm(self, hypervisor_memory_usage_ppm):

        self.__hypervisor_memory_usage_ppm = hypervisor_memory_usage_ppm

    @property
    def hypervisor_cpu_usage_ppm(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hypervisor_cpu_usage_ppm

    @hypervisor_cpu_usage_ppm.setter
    def hypervisor_cpu_usage_ppm(self, hypervisor_cpu_usage_ppm):

        self.__hypervisor_cpu_usage_ppm = hypervisor_cpu_usage_ppm

    @property
    def rf(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__rf

    @rf.setter
    def rf(self, rf):

        self.__rf = rf

    @property
    def capacity_bytes(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):

        self.__capacity_bytes = capacity_bytes

    @property
    def free_bytes(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__free_bytes

    @free_bytes.setter
    def free_bytes(self, free_bytes):

        self.__free_bytes = free_bytes

    @property
    def usage_bytes(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__usage_bytes

    @usage_bytes.setter
    def usage_bytes(self, usage_bytes):

        self.__usage_bytes = usage_bytes

    @property
    def saved_bytes(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__saved_bytes

    @saved_bytes.setter
    def saved_bytes(self, saved_bytes):

        self.__saved_bytes = saved_bytes

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


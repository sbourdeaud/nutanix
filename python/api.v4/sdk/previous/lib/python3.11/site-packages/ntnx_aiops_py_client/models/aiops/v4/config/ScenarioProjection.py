# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.ClusterConfig import ClusterConfig  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Runway import Runway  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Scenario import Scenario  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Vendor import Vendor  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Workload import Workload  # noqa: F401,E501

class ScenarioProjection(Scenario):

    """

    :param name: (:attr:`name`) Name of capacity planning scenario.
    :type name: 
     min=1 chars, max=256 chars
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the cluster for which Whatif analysis is being performed.
    :type cluster_ext_id: 
    
    
    :param vendors: (:attr:`vendors`) A list of allowed vendors whose model can be requested to sustain the workload in a capacity planning scenario.
    :type vendors: 
    
    
    :param updated_time: (:attr:`updated_time`) Timestamp when the capacity planning scenario is updated. The value should be in ISO-8601 format. For example, 2022-02-20T00:00:00.458Z.
    :type updated_time: 
    
    
    :param target_runway_days: (:attr:`target_runway_days`) Number of days a cluster is expected to sustain the workload in a capacity planning scenario.
    :type target_runway_days: 
    
     min=30, max=360
    :param runway: (:attr:`runway`) 
    :type runway: 
    
    
    :param workloads: (:attr:`workloads`) List of workloads for which runway analysis is being done. It can be considered an additional resource requirement required to run a specific use case. For example, a SQL server.
    :type workloads: 
    
    
    :param cluster_config: (:attr:`cluster_config`) 
    :type cluster_config: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'cluster_ext_id': 'str',
        'vendors': 'list[aiops.v4.config.Vendor]',
        'updated_time': 'datetime',
        'target_runway_days': 'int',
        'runway': 'aiops.v4.config.Runway',
        'workloads': 'list[aiops.v4.config.Workload]',
        'cluster_config': 'aiops.v4.config.ClusterConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'cluster_ext_id': 'clusterExtId',
        'vendors': 'vendors',
        'updated_time': 'updatedTime',
        'target_runway_days': 'targetRunwayDays',
        'runway': 'runway',
        'workloads': 'workloads',
        'cluster_config': 'clusterConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, cluster_ext_id=None, vendors=None, updated_time=None, target_runway_days=None, runway=None, workloads=None, cluster_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        Scenario.__init__(self, name, cluster_ext_id, vendors, updated_time, target_runway_days, runway, workloads, cluster_config, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'aiops.v4.config.ScenarioProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ScenarioProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


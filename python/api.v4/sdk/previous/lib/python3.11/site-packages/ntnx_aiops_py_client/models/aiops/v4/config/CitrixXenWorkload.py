# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.CitrixXenProvisionType import CitrixXenProvisionType  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.CitrixXenWorkloadVendor import CitrixXenWorkloadVendor  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.XenOperatingSystem import XenOperatingSystem  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.XenWorkload import XenWorkload  # noqa: F401,E501

class CitrixXenWorkload(XenWorkload):

    """Xen workload with Citrix as a vendor.

    :param vendor: (:attr:`vendor`) 
    :type vendor: required
    
    
    :param provision_type: (:attr:`provision_type`) 
    :type provision_type: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vendor': 'aiops.v4.config.CitrixXenWorkloadVendor',
        'provision_type': 'aiops.v4.config.CitrixXenProvisionType',
        'operating_system': 'aiops.v4.config.XenOperatingSystem',
        'system_data_gb': 'int',
        'user_count': 'int',
        'mcs_diff_size_gb': 'int',
        'user_profile_data_mb': 'int',
        'pvs_write_cache_size_gb': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vendor': 'vendor',
        'provision_type': 'provisionType',
        'operating_system': 'operatingSystem',
        'system_data_gb': 'systemDataGb',
        'user_count': 'userCount',
        'mcs_diff_size_gb': 'mcsDiffSizeGb',
        'user_profile_data_mb': 'userProfileDataMb',
        'pvs_write_cache_size_gb': 'pvsWriteCacheSizeGb',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vendor=None, provision_type=None, operating_system=None, system_data_gb=None, user_count=None, mcs_diff_size_gb=None, user_profile_data_mb=None, pvs_write_cache_size_gb=None, *args, **kwargs):  # noqa: E501
        XenWorkload.__init__(self, operating_system, system_data_gb, user_count, mcs_diff_size_gb, user_profile_data_mb, pvs_write_cache_size_gb, *args, **kwargs)
        self.__vendor = None
        self.__provision_type = None
        self.discriminator = None
        self.__vendor = vendor
        self.__provision_type = provision_type

    def _initialize_object_type(self):
        return 'aiops.v4.config.CitrixXenWorkload'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def vendor(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.CitrixXenWorkloadVendor`
        """  # noqa: E501
        return self.__vendor

    @vendor.setter
    def vendor(self, vendor):
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self.__vendor = vendor

    @property
    def provision_type(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.CitrixXenProvisionType`
        """  # noqa: E501
        return self.__provision_type

    @provision_type.setter
    def provision_type(self, provision_type):
        if provision_type is None:
            raise ValueError("Invalid value for `provision_type`, must not be `None`")  # noqa: E501

        self.__provision_type = provision_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(CitrixXenWorkload, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CitrixXenWorkload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.common.ClusterType import ClusterType  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class IgnoreWindow(ExternalizableAbstractModel):

    """Definition of an ignore window.

    :param name: (:attr:`name`) Name of an ignore window period.
    :type name: required
     min=1 chars, max=256 chars
    
    :param start_date_time: (:attr:`start_date_time`) Start timestamp of the ignore window. It can be maximum of one year in the past from the current date.
    :type start_date_time: required
    
    
    :param end_date_time: (:attr:`end_date_time`) End timestamp of the ignore window. It can be a maximum of one year in the past from the current date but should be at least one day after the startDateTime.
    :type end_date_time: required
    
    
    :param cluster_type: (:attr:`cluster_type`) 
    :type cluster_type: required
    
    
    :param cluster_uuid: (:attr:`cluster_uuid`) UUID of the cluster to which the ignore window is to be applied.
    :type cluster_uuid: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'cluster_type': 'aiops.v4.common.ClusterType',
        'cluster_uuid': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime',
        'cluster_type': 'clusterType',
        'cluster_uuid': 'clusterUuid',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, start_date_time=None, end_date_time=None, cluster_type=None, cluster_uuid=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__start_date_time = None
        self.__end_date_time = None
        self.__cluster_type = None
        self.__cluster_uuid = None
        self.discriminator = None
        self.__name = name
        self.__start_date_time = start_date_time
        self.__end_date_time = end_date_time
        self.__cluster_type = cluster_type
        self.__cluster_uuid = cluster_uuid

    def _initialize_object_type(self):
        return 'aiops.v4.config.IgnoreWindow'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of an ignore window period.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def start_date_time(self):
        """
        Start timestamp of the ignore window. It can be maximum of one year in the past from the current date.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self.__start_date_time = start_date_time

    @property
    def end_date_time(self):
        """
        End timestamp of the ignore window. It can be a maximum of one year in the past from the current date but should be at least one day after the startDateTime.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self.__end_date_time = end_date_time

    @property
    def cluster_type(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.common.ClusterType`
        """  # noqa: E501
        return self.__cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        if cluster_type is None:
            raise ValueError("Invalid value for `cluster_type`, must not be `None`")  # noqa: E501

        self.__cluster_type = cluster_type

    @property
    def cluster_uuid(self):
        """
        UUID of the cluster to which the ignore window is to be applied.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        if cluster_uuid is None:
            raise ValueError("Invalid value for `cluster_uuid`, must not be `None`")  # noqa: E501
        if cluster_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_uuid = cluster_uuid

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(IgnoreWindow, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IgnoreWindow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.XenOperatingSystem import XenOperatingSystem  # noqa: F401,E501

class XenWorkload(object):

    """Xen workload description.

    :param operating_system: (:attr:`operating_system`) 
    :type operating_system: required
    
    
    :param system_data_gb: (:attr:`system_data_gb`) Space consumed by each Xen Server Image.
    :type system_data_gb: required
    
     min=20, max=62000
    :param user_count: (:attr:`user_count`) Number of users for Xen workload.
    :type user_count: required
    
     min=1, max=100000
    :param mcs_diff_size_gb: (:attr:`mcs_diff_size_gb`) Size in GB for MCS different disk per VM.
    :type mcs_diff_size_gb: required
    
     min=10, max=50
    :param user_profile_data_mb: (:attr:`user_profile_data_mb`) Size for the per user profile data in MB.
    :type user_profile_data_mb: required
    
     min=20, max=100
    :param pvs_write_cache_size_gb: (:attr:`pvs_write_cache_size_gb`) Size of PVS cache write per VM in GB.
    :type pvs_write_cache_size_gb: required
    
     min=10, max=50

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'operating_system': 'aiops.v4.config.XenOperatingSystem',
        'system_data_gb': 'int',
        'user_count': 'int',
        'mcs_diff_size_gb': 'int',
        'user_profile_data_mb': 'int',
        'pvs_write_cache_size_gb': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'operating_system': 'operatingSystem',
        'system_data_gb': 'systemDataGb',
        'user_count': 'userCount',
        'mcs_diff_size_gb': 'mcsDiffSizeGb',
        'user_profile_data_mb': 'userProfileDataMb',
        'pvs_write_cache_size_gb': 'pvsWriteCacheSizeGb',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, operating_system=None, system_data_gb=None, user_count=None, mcs_diff_size_gb=None, user_profile_data_mb=None, pvs_write_cache_size_gb=None, *args, **kwargs):  # noqa: E501
        self.__operating_system = None
        self.__system_data_gb = None
        self.__user_count = None
        self.__mcs_diff_size_gb = None
        self.__user_profile_data_mb = None
        self.__pvs_write_cache_size_gb = None
        self.discriminator = None
        self.__operating_system = operating_system
        self.__system_data_gb = system_data_gb
        self.__user_count = user_count
        self.__mcs_diff_size_gb = mcs_diff_size_gb
        self.__user_profile_data_mb = user_profile_data_mb
        self.__pvs_write_cache_size_gb = pvs_write_cache_size_gb
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.config.XenWorkload'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def operating_system(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.XenOperatingSystem`
        """  # noqa: E501
        return self.__operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")  # noqa: E501

        self.__operating_system = operating_system

    @property
    def system_data_gb(self):
        """
        Space consumed by each Xen Server Image.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__system_data_gb

    @system_data_gb.setter
    def system_data_gb(self, system_data_gb):
        if system_data_gb is None:
            raise ValueError("Invalid value for `system_data_gb`, must not be `None`")  # noqa: E501
        if system_data_gb is not None and system_data_gb > 62000:  # noqa: E501
            raise ValueError("Invalid value for `system_data_gb`, must be a value less than or equal to `62000`")  # noqa: E501
        if system_data_gb is not None and system_data_gb < 20:  # noqa: E501
            raise ValueError("Invalid value for `system_data_gb`, must be a value greater than or equal to `20`")  # noqa: E501

        self.__system_data_gb = system_data_gb

    @property
    def user_count(self):
        """
        Number of users for Xen workload.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__user_count

    @user_count.setter
    def user_count(self, user_count):
        if user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501
        if user_count is not None and user_count > 100000:  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must be a value less than or equal to `100000`")  # noqa: E501
        if user_count is not None and user_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__user_count = user_count

    @property
    def mcs_diff_size_gb(self):
        """
        Size in GB for MCS different disk per VM.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__mcs_diff_size_gb

    @mcs_diff_size_gb.setter
    def mcs_diff_size_gb(self, mcs_diff_size_gb):
        if mcs_diff_size_gb is None:
            raise ValueError("Invalid value for `mcs_diff_size_gb`, must not be `None`")  # noqa: E501
        if mcs_diff_size_gb is not None and mcs_diff_size_gb > 50:  # noqa: E501
            raise ValueError("Invalid value for `mcs_diff_size_gb`, must be a value less than or equal to `50`")  # noqa: E501
        if mcs_diff_size_gb is not None and mcs_diff_size_gb < 10:  # noqa: E501
            raise ValueError("Invalid value for `mcs_diff_size_gb`, must be a value greater than or equal to `10`")  # noqa: E501

        self.__mcs_diff_size_gb = mcs_diff_size_gb

    @property
    def user_profile_data_mb(self):
        """
        Size for the per user profile data in MB.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__user_profile_data_mb

    @user_profile_data_mb.setter
    def user_profile_data_mb(self, user_profile_data_mb):
        if user_profile_data_mb is None:
            raise ValueError("Invalid value for `user_profile_data_mb`, must not be `None`")  # noqa: E501
        if user_profile_data_mb is not None and user_profile_data_mb > 100:  # noqa: E501
            raise ValueError("Invalid value for `user_profile_data_mb`, must be a value less than or equal to `100`")  # noqa: E501
        if user_profile_data_mb is not None and user_profile_data_mb < 20:  # noqa: E501
            raise ValueError("Invalid value for `user_profile_data_mb`, must be a value greater than or equal to `20`")  # noqa: E501

        self.__user_profile_data_mb = user_profile_data_mb

    @property
    def pvs_write_cache_size_gb(self):
        """
        Size of PVS cache write per VM in GB.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__pvs_write_cache_size_gb

    @pvs_write_cache_size_gb.setter
    def pvs_write_cache_size_gb(self, pvs_write_cache_size_gb):
        if pvs_write_cache_size_gb is None:
            raise ValueError("Invalid value for `pvs_write_cache_size_gb`, must not be `None`")  # noqa: E501
        if pvs_write_cache_size_gb is not None and pvs_write_cache_size_gb > 50:  # noqa: E501
            raise ValueError("Invalid value for `pvs_write_cache_size_gb`, must be a value less than or equal to `50`")  # noqa: E501
        if pvs_write_cache_size_gb is not None and pvs_write_cache_size_gb < 10:  # noqa: E501
            raise ValueError("Invalid value for `pvs_write_cache_size_gb`, must be a value greater than or equal to `10`")  # noqa: E501

        self.__pvs_write_cache_size_gb = pvs_write_cache_size_gb

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(XenWorkload, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XenWorkload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


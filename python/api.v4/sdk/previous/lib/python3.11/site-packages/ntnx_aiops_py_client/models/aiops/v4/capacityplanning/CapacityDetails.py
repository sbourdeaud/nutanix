# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.capacityplanning.CapacityUnit import CapacityUnit  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.capacityplanning.RunwayDuration import RunwayDuration  # noqa: F401,E501

class CapacityDetails(object):

    """

    :param runway: (:attr:`runway`) Runway details for the given cluster.
    :type runway: 
    
    
    :param used_capacity: (:attr:`used_capacity`) Used capacity of the resource.
    :type used_capacity: 
    
    
    :param total_capacity: (:attr:`total_capacity`) Total capacity of the resource.
    :type total_capacity: 
    
    
    :param effective_capacity: (:attr:`effective_capacity`) Effective capacity of the resource.
    :type effective_capacity: 
    
    
    :param capacity_unit: (:attr:`capacity_unit`) 
    :type capacity_unit: 
    
    
    :param runway_duration: (:attr:`runway_duration`) 
    :type runway_duration: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'runway': 'int',
        'used_capacity': 'float',
        'total_capacity': 'float',
        'effective_capacity': 'float',
        'capacity_unit': 'aiops.v4.capacityplanning.CapacityUnit',
        'runway_duration': 'aiops.v4.capacityplanning.RunwayDuration',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'runway': 'runway',
        'used_capacity': 'usedCapacity',
        'total_capacity': 'totalCapacity',
        'effective_capacity': 'effectiveCapacity',
        'capacity_unit': 'capacityUnit',
        'runway_duration': 'runwayDuration',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, runway=None, used_capacity=None, total_capacity=None, effective_capacity=None, capacity_unit=None, runway_duration=None, *args, **kwargs):  # noqa: E501
        self.__runway = None
        self.__used_capacity = None
        self.__total_capacity = None
        self.__effective_capacity = None
        self.__capacity_unit = None
        self.__runway_duration = None
        self.discriminator = None
        if runway is not None:
            self.__runway = runway
        if used_capacity is not None:
            self.__used_capacity = used_capacity
        if total_capacity is not None:
            self.__total_capacity = total_capacity
        if effective_capacity is not None:
            self.__effective_capacity = effective_capacity
        if capacity_unit is not None:
            self.__capacity_unit = capacity_unit
        if runway_duration is not None:
            self.__runway_duration = runway_duration
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.capacityplanning.CapacityDetails'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def runway(self):
        """
        Runway details for the given cluster.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__runway

    @runway.setter
    def runway(self, runway):

        self.__runway = runway

    @property
    def used_capacity(self):
        """
        Used capacity of the resource.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):

        self.__used_capacity = used_capacity

    @property
    def total_capacity(self):
        """
        Total capacity of the resource.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):

        self.__total_capacity = total_capacity

    @property
    def effective_capacity(self):
        """
        Effective capacity of the resource.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__effective_capacity

    @effective_capacity.setter
    def effective_capacity(self, effective_capacity):

        self.__effective_capacity = effective_capacity

    @property
    def capacity_unit(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.capacityplanning.CapacityUnit`
        """  # noqa: E501
        return self.__capacity_unit

    @capacity_unit.setter
    def capacity_unit(self, capacity_unit):

        self.__capacity_unit = capacity_unit

    @property
    def runway_duration(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.capacityplanning.RunwayDuration`
        """  # noqa: E501
        return self.__runway_duration

    @runway_duration.setter
    def runway_duration(self, runway_duration):

        self.__runway_duration = runway_duration

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(CapacityDetails, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


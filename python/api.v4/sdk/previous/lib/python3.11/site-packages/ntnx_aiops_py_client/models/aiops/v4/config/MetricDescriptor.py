# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.ValueRange import ValueRange  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.ValueType import ValueType  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.stats.DownSamplingOperator import DownSamplingOperator  # noqa: F401,E501

class MetricDescriptor(object):

    """

    :param is_attribute: (:attr:`is_attribute`) Indicates whether it is an attribute or not.
    :type is_attribute: 
    
    
    :param is_attribute_persisted_as_time_series: (:attr:`is_attribute_persisted_as_time_series`) Indicator to specify whether the attribute should be persisted as time series data or not.
    :type is_attribute_persisted_as_time_series: 
    
    
    :param name: (:attr:`name`) Name of the metric.
    :type name: 
     max=50 chars
    
    :param display_name: (:attr:`display_name`) Readable name for the entity.
    :type display_name: 
     max=50 chars
    
    :param value_type: (:attr:`value_type`) 
    :type value_type: 
    
    
    :param value_range: (:attr:`value_range`) 
    :type value_range: 
    
    
    :param default_value: (:attr:`default_value`) Default value of the metric.
    :type default_value: 
    
    
    :param unit: (:attr:`unit`) Unit for the metric.
    :type unit: 
    
    
    :param sampling_interval_secs: (:attr:`sampling_interval_secs`) The interval value is used to resample the queried time series data by using down_sampling_operator operator. The default is 86400 seconds.
    :type sampling_interval_secs: 
    
    
    :param downsampling_operator: (:attr:`downsampling_operator`) 
    :type downsampling_operator: 
    
    
    :param additional_properties: (:attr:`additional_properties`) Additional properties for metric descriptor definition. Like anomaly metric, alert metric and search UI metric.
    :type additional_properties: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_attribute': 'bool',
        'is_attribute_persisted_as_time_series': 'bool',
        'name': 'str',
        'display_name': 'str',
        'value_type': 'aiops.v4.config.ValueType',
        'value_range': 'aiops.v4.config.ValueRange',
        'default_value': 'str',
        'unit': 'str',
        'sampling_interval_secs': 'int',
        'downsampling_operator': 'common.v1.stats.DownSamplingOperator',
        'additional_properties': 'list[common.v1.config.KVPair]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_attribute': 'isAttribute',
        'is_attribute_persisted_as_time_series': 'isAttributePersistedAsTimeSeries',
        'name': 'name',
        'display_name': 'displayName',
        'value_type': 'valueType',
        'value_range': 'valueRange',
        'default_value': 'defaultValue',
        'unit': 'unit',
        'sampling_interval_secs': 'samplingIntervalSecs',
        'downsampling_operator': 'downsamplingOperator',
        'additional_properties': 'additionalProperties',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_attribute=None, is_attribute_persisted_as_time_series=None, name=None, display_name=None, value_type=None, value_range=None, default_value=None, unit=None, sampling_interval_secs=None, downsampling_operator=None, additional_properties=None, *args, **kwargs):  # noqa: E501
        self.__is_attribute = None
        self.__is_attribute_persisted_as_time_series = None
        self.__name = None
        self.__display_name = None
        self.__value_type = None
        self.__value_range = None
        self.__default_value = None
        self.__unit = None
        self.__sampling_interval_secs = None
        self.__downsampling_operator = None
        self.__additional_properties = None
        self.discriminator = None
        if is_attribute is not None:
            self.__is_attribute = is_attribute
        if is_attribute_persisted_as_time_series is not None:
            self.__is_attribute_persisted_as_time_series = is_attribute_persisted_as_time_series
        if name is not None:
            self.__name = name
        if display_name is not None:
            self.__display_name = display_name
        if value_type is not None:
            self.__value_type = value_type
        if value_range is not None:
            self.__value_range = value_range
        if default_value is not None:
            self.__default_value = default_value
        if unit is not None:
            self.__unit = unit
        if sampling_interval_secs is not None:
            self.__sampling_interval_secs = sampling_interval_secs
        if downsampling_operator is not None:
            self.__downsampling_operator = downsampling_operator
        if additional_properties is not None:
            self.__additional_properties = additional_properties
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.config.MetricDescriptor'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def is_attribute(self):
        """
        Indicates whether it is an attribute or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_attribute

    @is_attribute.setter
    def is_attribute(self, is_attribute):

        self.__is_attribute = is_attribute

    @property
    def is_attribute_persisted_as_time_series(self):
        """
        Indicator to specify whether the attribute should be persisted as time series data or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_attribute_persisted_as_time_series

    @is_attribute_persisted_as_time_series.setter
    def is_attribute_persisted_as_time_series(self, is_attribute_persisted_as_time_series):

        self.__is_attribute_persisted_as_time_series = is_attribute_persisted_as_time_series

    @property
    def name(self):
        """
        Name of the metric.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self.__name = name

    @property
    def display_name(self):
        """
        Readable name for the entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__display_name

    @display_name.setter
    def display_name(self, display_name):
        if display_name is not None and len(display_name) > 50:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `50`")  # noqa: E501

        self.__display_name = display_name

    @property
    def value_type(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.ValueType`
        """  # noqa: E501
        return self.__value_type

    @value_type.setter
    def value_type(self, value_type):

        self.__value_type = value_type

    @property
    def value_range(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.ValueRange`
        """  # noqa: E501
        return self.__value_range

    @value_range.setter
    def value_range(self, value_range):

        self.__value_range = value_range

    @property
    def default_value(self):
        """
        Default value of the metric.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__default_value

    @default_value.setter
    def default_value(self, default_value):

        self.__default_value = default_value

    @property
    def unit(self):
        """
        Unit for the metric.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__unit

    @unit.setter
    def unit(self, unit):

        self.__unit = unit

    @property
    def sampling_interval_secs(self):
        """
        The interval value is used to resample the queried time series data by using down_sampling_operator operator. The default is 86400 seconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__sampling_interval_secs

    @sampling_interval_secs.setter
    def sampling_interval_secs(self, sampling_interval_secs):

        self.__sampling_interval_secs = sampling_interval_secs

    @property
    def downsampling_operator(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.common.v1.stats.DownSamplingOperator`
        """  # noqa: E501
        return self.__downsampling_operator

    @downsampling_operator.setter
    def downsampling_operator(self, downsampling_operator):

        self.__downsampling_operator = downsampling_operator

    @property
    def additional_properties(self):
        """
        Additional properties for metric descriptor definition. Like anomaly metric, alert metric and search UI metric.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.common.v1.config.KVPair` ]
        """  # noqa: E501
        return self.__additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):

        self.__additional_properties = additional_properties

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(MetricDescriptor, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


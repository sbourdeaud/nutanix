# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class ResourceCapacity(object):

    """Resource specification.

    :param cpu_ghz: (:attr:`cpu_ghz`) CPU capacity in GHz.
    :type cpu_ghz: required
    
    
    :param ram_gb: (:attr:`ram_gb`) RAM capacity in GB.
    :type ram_gb: required
    
    
    :param hdd_gb: (:attr:`hdd_gb`) HDD capacity in GB.
    :type hdd_gb: required
    
    
    :param ssd_gb: (:attr:`ssd_gb`) SSD capacity in GB.
    :type ssd_gb: required
    
    
    :param nvme_gb: (:attr:`nvme_gb`) NVMe capacity in GB.
    :type nvme_gb: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cpu_ghz': 'float',
        'ram_gb': 'float',
        'hdd_gb': 'float',
        'ssd_gb': 'float',
        'nvme_gb': 'float',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cpu_ghz': 'cpuGhz',
        'ram_gb': 'ramGb',
        'hdd_gb': 'hddGb',
        'ssd_gb': 'ssdGb',
        'nvme_gb': 'nvmeGb',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cpu_ghz=None, ram_gb=None, hdd_gb=None, ssd_gb=None, nvme_gb=None, *args, **kwargs):  # noqa: E501
        self.__cpu_ghz = None
        self.__ram_gb = None
        self.__hdd_gb = None
        self.__ssd_gb = None
        self.__nvme_gb = None
        self.discriminator = None
        self.__cpu_ghz = cpu_ghz
        self.__ram_gb = ram_gb
        self.__hdd_gb = hdd_gb
        self.__ssd_gb = ssd_gb
        self.__nvme_gb = nvme_gb
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.config.ResourceCapacity'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def cpu_ghz(self):
        """
        CPU capacity in GHz.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__cpu_ghz

    @cpu_ghz.setter
    def cpu_ghz(self, cpu_ghz):
        if cpu_ghz is None:
            raise ValueError("Invalid value for `cpu_ghz`, must not be `None`")  # noqa: E501

        self.__cpu_ghz = cpu_ghz

    @property
    def ram_gb(self):
        """
        RAM capacity in GB.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__ram_gb

    @ram_gb.setter
    def ram_gb(self, ram_gb):
        if ram_gb is None:
            raise ValueError("Invalid value for `ram_gb`, must not be `None`")  # noqa: E501

        self.__ram_gb = ram_gb

    @property
    def hdd_gb(self):
        """
        HDD capacity in GB.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__hdd_gb

    @hdd_gb.setter
    def hdd_gb(self, hdd_gb):
        if hdd_gb is None:
            raise ValueError("Invalid value for `hdd_gb`, must not be `None`")  # noqa: E501

        self.__hdd_gb = hdd_gb

    @property
    def ssd_gb(self):
        """
        SSD capacity in GB.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__ssd_gb

    @ssd_gb.setter
    def ssd_gb(self, ssd_gb):
        if ssd_gb is None:
            raise ValueError("Invalid value for `ssd_gb`, must not be `None`")  # noqa: E501

        self.__ssd_gb = ssd_gb

    @property
    def nvme_gb(self):
        """
        NVMe capacity in GB.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__nvme_gb

    @nvme_gb.setter
    def nvme_gb(self, nvme_gb):
        if nvme_gb is None:
            raise ValueError("Invalid value for `nvme_gb`, must not be `None`")  # noqa: E501

        self.__nvme_gb = nvme_gb

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ResourceCapacity, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceCapacity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


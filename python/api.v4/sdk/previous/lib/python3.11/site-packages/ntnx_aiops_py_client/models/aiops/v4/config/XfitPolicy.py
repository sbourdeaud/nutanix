# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.CategoryDetail import CategoryDetail  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.PolicyType import PolicyType  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.config.KVStringPair import KVStringPair  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class XfitPolicy(ExternalizableAbstractModel):

    """

    :param policy_type: (:attr:`policy_type`) 
    :type policy_type: 
    
    
    :param name: (:attr:`name`) The name of the policy.
    :type name: 
     min=1 chars, max=256 chars
    
    :param description: (:attr:`description`) The description of the policy.
    :type description: 
     min=1 chars, max=512 chars
    
    :param updated_time: (:attr:`updated_time`) Last updated time of the policy in ISO-8601 format.
    :type updated_time: 
    
    
    :param is_default: (:attr:`is_default`) Indicates whether the policy is applied by default. (**Default** False)
    :type is_default: 
    
    
    :param is_enabled: (:attr:`is_enabled`) Indicates if the policy is enabled or disabled. (**Default** True)
    :type is_enabled: required
    
    
    :param categories: (:attr:`categories`) List of associated category details for the policy.
    :type categories: required
    
    
    :param parameters: (:attr:`parameters`) Key value pairs for the relevant properties of a policy. For example, it can hold the lookback period for an Inefficiency exclusion policy.
    :type parameters: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'policy_type': 'aiops.v4.config.PolicyType',
        'name': 'str',
        'description': 'str',
        'updated_time': 'datetime',
        'is_default': 'bool',
        'is_enabled': 'bool',
        'categories': 'list[aiops.v4.config.CategoryDetail]',
        'parameters': 'list[common.v1.config.KVStringPair]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'policy_type': 'policyType',
        'name': 'name',
        'description': 'description',
        'updated_time': 'updatedTime',
        'is_default': 'isDefault',
        'is_enabled': 'isEnabled',
        'categories': 'categories',
        'parameters': 'parameters',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, policy_type=None, name=None, description=None, updated_time=None, is_default=False, is_enabled=True, categories=None, parameters=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__policy_type = None
        self.__name = None
        self.__description = None
        self.__updated_time = None
        self.__is_default = None
        self.__is_enabled = None
        self.__categories = None
        self.__parameters = None
        self.discriminator = None
        if policy_type is not None:
            self.__policy_type = policy_type
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if updated_time is not None:
            self.__updated_time = updated_time
        if is_default is not None:
            self.__is_default = is_default
        self.__is_enabled = is_enabled
        self.__categories = categories
        self.__parameters = parameters

    def _initialize_object_type(self):
        return 'aiops.v4.config.XfitPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def policy_type(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.PolicyType`
        """  # noqa: E501
        return self.__policy_type

    @policy_type.setter
    def policy_type(self, policy_type):

        self.__policy_type = policy_type

    @property
    def name(self):
        """
        The name of the policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        The description of the policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self.__description = description

    @property
    def updated_time(self):
        """
        Last updated time of the policy in ISO-8601 format.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__updated_time

    @updated_time.setter
    def updated_time(self, updated_time):

        self.__updated_time = updated_time

    @property
    def is_default(self):
        """
        Indicates whether the policy is applied by default.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_default

    @is_default.setter
    def is_default(self, is_default):

        self.__is_default = is_default

    @property
    def is_enabled(self):
        """
        Indicates if the policy is enabled or disabled.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self.__is_enabled = is_enabled

    @property
    def categories(self):
        """
        List of associated category details for the policy.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.CategoryDetail` ]
        """  # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self.__categories = categories

    @property
    def parameters(self):
        """
        Key value pairs for the relevant properties of a policy. For example, it can hold the lookback period for an Inefficiency exclusion policy.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.common.v1.config.KVStringPair` ]
        """  # noqa: E501
        return self.__parameters

    @parameters.setter
    def parameters(self, parameters):
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self.__parameters = parameters

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(XfitPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XfitPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


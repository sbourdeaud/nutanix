# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.ReplicationFactor import ReplicationFactor  # noqa: F401,E501

class DataStoreConfig(object):

    """The data store configuration. For example, compression saving percentage, CPU over-commit ratio and so on.

    :param replication_factor: (:attr:`replication_factor`) 
    :type replication_factor: required
    
    
    :param compression_saving_percent: (:attr:`compression_saving_percent`) Compression saving percentage of the cluster resources. (**Default** 25.81037)
    :type compression_saving_percent: required
    
    
    :param dedup_saving_percent: (:attr:`dedup_saving_percent`) De-dupe saving percentage of the cluster resources. (**Default** 35.864)
    :type dedup_saving_percent: required
    
    
    :param erasure_coding_saving_percent: (:attr:`erasure_coding_saving_percent`) Erasure coding saving percentage of the cluster resources. (**Default** 15.16939)
    :type erasure_coding_saving_percent: required
    
    
    :param overall_saving_percent: (:attr:`overall_saving_percent`) Overall saving percentage of the cluster resources. (**Default** 59.64)
    :type overall_saving_percent: required
    
    
    :param cpu_over_commit_ratio: (:attr:`cpu_over_commit_ratio`) CPU overcommit ratio. (**Default** 1.0)
    :type cpu_over_commit_ratio: required
    
    
    :param ram_over_commit_ratio: (:attr:`ram_over_commit_ratio`) RAM overcommit ratio. (**Default** 1.0)
    :type ram_over_commit_ratio: required
    
    
    :param cpu_reservation_percentage: (:attr:`cpu_reservation_percentage`) CPU reservation percentage. (**Default** 0.0)
    :type cpu_reservation_percentage: required
    
    
    :param ram_reservation_percentage: (:attr:`ram_reservation_percentage`) RAM reservation percentage. (**Default** 0.0)
    :type ram_reservation_percentage: required
    
    
    :param storage_reservation_percentage: (:attr:`storage_reservation_percentage`) Storage reservation percentage. (**Default** 0.0)
    :type storage_reservation_percentage: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'replication_factor': 'aiops.v4.config.ReplicationFactor',
        'compression_saving_percent': 'float',
        'dedup_saving_percent': 'float',
        'erasure_coding_saving_percent': 'float',
        'overall_saving_percent': 'float',
        'cpu_over_commit_ratio': 'float',
        'ram_over_commit_ratio': 'float',
        'cpu_reservation_percentage': 'float',
        'ram_reservation_percentage': 'float',
        'storage_reservation_percentage': 'float',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'replication_factor': 'replicationFactor',
        'compression_saving_percent': 'compressionSavingPercent',
        'dedup_saving_percent': 'dedupSavingPercent',
        'erasure_coding_saving_percent': 'erasureCodingSavingPercent',
        'overall_saving_percent': 'overallSavingPercent',
        'cpu_over_commit_ratio': 'cpuOverCommitRatio',
        'ram_over_commit_ratio': 'ramOverCommitRatio',
        'cpu_reservation_percentage': 'cpuReservationPercentage',
        'ram_reservation_percentage': 'ramReservationPercentage',
        'storage_reservation_percentage': 'storageReservationPercentage',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, replication_factor=None, compression_saving_percent=25.81037, dedup_saving_percent=35.864, erasure_coding_saving_percent=15.16939, overall_saving_percent=59.64, cpu_over_commit_ratio=1.0, ram_over_commit_ratio=1.0, cpu_reservation_percentage=0.0, ram_reservation_percentage=0.0, storage_reservation_percentage=0.0, *args, **kwargs):  # noqa: E501
        self.__replication_factor = None
        self.__compression_saving_percent = None
        self.__dedup_saving_percent = None
        self.__erasure_coding_saving_percent = None
        self.__overall_saving_percent = None
        self.__cpu_over_commit_ratio = None
        self.__ram_over_commit_ratio = None
        self.__cpu_reservation_percentage = None
        self.__ram_reservation_percentage = None
        self.__storage_reservation_percentage = None
        self.discriminator = None
        self.__replication_factor = replication_factor
        self.__compression_saving_percent = compression_saving_percent
        self.__dedup_saving_percent = dedup_saving_percent
        self.__erasure_coding_saving_percent = erasure_coding_saving_percent
        self.__overall_saving_percent = overall_saving_percent
        self.__cpu_over_commit_ratio = cpu_over_commit_ratio
        self.__ram_over_commit_ratio = ram_over_commit_ratio
        self.__cpu_reservation_percentage = cpu_reservation_percentage
        self.__ram_reservation_percentage = ram_reservation_percentage
        self.__storage_reservation_percentage = storage_reservation_percentage
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.config.DataStoreConfig'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def replication_factor(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.ReplicationFactor`
        """  # noqa: E501
        return self.__replication_factor

    @replication_factor.setter
    def replication_factor(self, replication_factor):
        if replication_factor is None:
            raise ValueError("Invalid value for `replication_factor`, must not be `None`")  # noqa: E501

        self.__replication_factor = replication_factor

    @property
    def compression_saving_percent(self):
        """
        Compression saving percentage of the cluster resources.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__compression_saving_percent

    @compression_saving_percent.setter
    def compression_saving_percent(self, compression_saving_percent):
        if compression_saving_percent is None:
            raise ValueError("Invalid value for `compression_saving_percent`, must not be `None`")  # noqa: E501

        self.__compression_saving_percent = compression_saving_percent

    @property
    def dedup_saving_percent(self):
        """
        De-dupe saving percentage of the cluster resources.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__dedup_saving_percent

    @dedup_saving_percent.setter
    def dedup_saving_percent(self, dedup_saving_percent):
        if dedup_saving_percent is None:
            raise ValueError("Invalid value for `dedup_saving_percent`, must not be `None`")  # noqa: E501

        self.__dedup_saving_percent = dedup_saving_percent

    @property
    def erasure_coding_saving_percent(self):
        """
        Erasure coding saving percentage of the cluster resources.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__erasure_coding_saving_percent

    @erasure_coding_saving_percent.setter
    def erasure_coding_saving_percent(self, erasure_coding_saving_percent):
        if erasure_coding_saving_percent is None:
            raise ValueError("Invalid value for `erasure_coding_saving_percent`, must not be `None`")  # noqa: E501

        self.__erasure_coding_saving_percent = erasure_coding_saving_percent

    @property
    def overall_saving_percent(self):
        """
        Overall saving percentage of the cluster resources.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__overall_saving_percent

    @overall_saving_percent.setter
    def overall_saving_percent(self, overall_saving_percent):
        if overall_saving_percent is None:
            raise ValueError("Invalid value for `overall_saving_percent`, must not be `None`")  # noqa: E501

        self.__overall_saving_percent = overall_saving_percent

    @property
    def cpu_over_commit_ratio(self):
        """
        CPU overcommit ratio.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__cpu_over_commit_ratio

    @cpu_over_commit_ratio.setter
    def cpu_over_commit_ratio(self, cpu_over_commit_ratio):
        if cpu_over_commit_ratio is None:
            raise ValueError("Invalid value for `cpu_over_commit_ratio`, must not be `None`")  # noqa: E501

        self.__cpu_over_commit_ratio = cpu_over_commit_ratio

    @property
    def ram_over_commit_ratio(self):
        """
        RAM overcommit ratio.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__ram_over_commit_ratio

    @ram_over_commit_ratio.setter
    def ram_over_commit_ratio(self, ram_over_commit_ratio):
        if ram_over_commit_ratio is None:
            raise ValueError("Invalid value for `ram_over_commit_ratio`, must not be `None`")  # noqa: E501

        self.__ram_over_commit_ratio = ram_over_commit_ratio

    @property
    def cpu_reservation_percentage(self):
        """
        CPU reservation percentage.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__cpu_reservation_percentage

    @cpu_reservation_percentage.setter
    def cpu_reservation_percentage(self, cpu_reservation_percentage):
        if cpu_reservation_percentage is None:
            raise ValueError("Invalid value for `cpu_reservation_percentage`, must not be `None`")  # noqa: E501

        self.__cpu_reservation_percentage = cpu_reservation_percentage

    @property
    def ram_reservation_percentage(self):
        """
        RAM reservation percentage.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__ram_reservation_percentage

    @ram_reservation_percentage.setter
    def ram_reservation_percentage(self, ram_reservation_percentage):
        if ram_reservation_percentage is None:
            raise ValueError("Invalid value for `ram_reservation_percentage`, must not be `None`")  # noqa: E501

        self.__ram_reservation_percentage = ram_reservation_percentage

    @property
    def storage_reservation_percentage(self):
        """
        Storage reservation percentage.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__storage_reservation_percentage

    @storage_reservation_percentage.setter
    def storage_reservation_percentage(self, storage_reservation_percentage):
        if storage_reservation_percentage is None:
            raise ValueError("Invalid value for `storage_reservation_percentage`, must not be `None`")  # noqa: E501

        self.__storage_reservation_percentage = storage_reservation_percentage

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DataStoreConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataStoreConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


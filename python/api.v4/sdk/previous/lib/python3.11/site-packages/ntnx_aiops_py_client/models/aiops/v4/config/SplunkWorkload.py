# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class SplunkWorkload(object):

    """Splunk workload description.

    :param daily_average_indexing_rate_gb: (:attr:`daily_average_indexing_rate_gb`) Daily average index size in Splunk workload. (**Default** 500)
    :type daily_average_indexing_rate_gb: required
    
     min=1, max=20000
    :param hot_retention_days: (:attr:`hot_retention_days`) Number of days to retain hot data. (**Default** 7)
    :type hot_retention_days: required
    
     min=1, max=20000
    :param cold_retention_days: (:attr:`cold_retention_days`) Number of days to retain cold data. (**Default** 60)
    :type cold_retention_days: required
    
     min=0, max=20000
    :param user_count: (:attr:`user_count`) Number of users of Splunk workload. (**Default** 5)
    :type user_count: required
    
     min=0, max=500

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'daily_average_indexing_rate_gb': 'int',
        'hot_retention_days': 'int',
        'cold_retention_days': 'int',
        'user_count': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'daily_average_indexing_rate_gb': 'dailyAverageIndexingRateGb',
        'hot_retention_days': 'hotRetentionDays',
        'cold_retention_days': 'coldRetentionDays',
        'user_count': 'userCount',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, daily_average_indexing_rate_gb=500, hot_retention_days=7, cold_retention_days=60, user_count=5, *args, **kwargs):  # noqa: E501
        self.__daily_average_indexing_rate_gb = None
        self.__hot_retention_days = None
        self.__cold_retention_days = None
        self.__user_count = None
        self.discriminator = None
        self.__daily_average_indexing_rate_gb = daily_average_indexing_rate_gb
        self.__hot_retention_days = hot_retention_days
        self.__cold_retention_days = cold_retention_days
        self.__user_count = user_count
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.config.SplunkWorkload'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def daily_average_indexing_rate_gb(self):
        """
        Daily average index size in Splunk workload.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__daily_average_indexing_rate_gb

    @daily_average_indexing_rate_gb.setter
    def daily_average_indexing_rate_gb(self, daily_average_indexing_rate_gb):
        if daily_average_indexing_rate_gb is None:
            raise ValueError("Invalid value for `daily_average_indexing_rate_gb`, must not be `None`")  # noqa: E501
        if daily_average_indexing_rate_gb is not None and daily_average_indexing_rate_gb > 20000:  # noqa: E501
            raise ValueError("Invalid value for `daily_average_indexing_rate_gb`, must be a value less than or equal to `20000`")  # noqa: E501
        if daily_average_indexing_rate_gb is not None and daily_average_indexing_rate_gb < 1:  # noqa: E501
            raise ValueError("Invalid value for `daily_average_indexing_rate_gb`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__daily_average_indexing_rate_gb = daily_average_indexing_rate_gb

    @property
    def hot_retention_days(self):
        """
        Number of days to retain hot data.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__hot_retention_days

    @hot_retention_days.setter
    def hot_retention_days(self, hot_retention_days):
        if hot_retention_days is None:
            raise ValueError("Invalid value for `hot_retention_days`, must not be `None`")  # noqa: E501
        if hot_retention_days is not None and hot_retention_days > 20000:  # noqa: E501
            raise ValueError("Invalid value for `hot_retention_days`, must be a value less than or equal to `20000`")  # noqa: E501
        if hot_retention_days is not None and hot_retention_days < 1:  # noqa: E501
            raise ValueError("Invalid value for `hot_retention_days`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__hot_retention_days = hot_retention_days

    @property
    def cold_retention_days(self):
        """
        Number of days to retain cold data.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__cold_retention_days

    @cold_retention_days.setter
    def cold_retention_days(self, cold_retention_days):
        if cold_retention_days is None:
            raise ValueError("Invalid value for `cold_retention_days`, must not be `None`")  # noqa: E501
        if cold_retention_days is not None and cold_retention_days > 20000:  # noqa: E501
            raise ValueError("Invalid value for `cold_retention_days`, must be a value less than or equal to `20000`")  # noqa: E501
        if cold_retention_days is not None and cold_retention_days < 0:  # noqa: E501
            raise ValueError("Invalid value for `cold_retention_days`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__cold_retention_days = cold_retention_days

    @property
    def user_count(self):
        """
        Number of users of Splunk workload.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__user_count

    @user_count.setter
    def user_count(self, user_count):
        if user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501
        if user_count is not None and user_count > 500:  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must be a value less than or equal to `500`")  # noqa: E501
        if user_count is not None and user_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__user_count = user_count

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SplunkWorkload, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplunkWorkload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


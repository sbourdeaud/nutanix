# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_aiops_py_client.models
from ntnx_aiops_py_client.models.OneOfaiops.v4.config.Workloadworkload_properties import Workloadworkload_properties  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.ResourceCapacity import ResourceCapacity  # noqa: F401,E501

class Workload(object):

    """Workload in a scenario.

    :param schedule_date: (:attr:`schedule_date`) Time since the workload is planned to run on a cluster.
    :type schedule_date: required
    
    
    :param is_enabled: (:attr:`is_enabled`) Flag to indicate whether the added workload in the planned capacity scenario is to be included in whatif analysis or to be ignored. (**Default** False)
    :type is_enabled: required
    
    
    :param projected_resource_requirement: (:attr:`projected_resource_requirement`) 
    :type projected_resource_requirement: 
    
    
    :param workload_properties: (:attr:`workload_properties`) Metadata about the workload in a capacity planning scenario. For example, if SQL is added as a workload, then the number of users and database transaction type will be metadata for it.
    :type workload_properties: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'schedule_date': 'date',
        'is_enabled': 'bool',
        'projected_resource_requirement': 'aiops.v4.config.ResourceCapacity',
        'workload_properties': 'OneOfaiops.v4.config.Workloadworkload_properties',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'schedule_date': 'scheduleDate',
        'is_enabled': 'isEnabled',
        'projected_resource_requirement': 'projectedResourceRequirement',
        'workload_properties': 'workloadProperties',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, schedule_date=None, is_enabled=False, projected_resource_requirement=None, workload_properties=None, *args, **kwargs):  # noqa: E501
        self.__schedule_date = None
        self.__is_enabled = None
        self.__projected_resource_requirement = None
        self.__workload_properties = None
        self.discriminator = None
        self.__schedule_date = schedule_date
        self.__is_enabled = is_enabled
        if projected_resource_requirement is not None:
            self.__projected_resource_requirement = projected_resource_requirement
        self.__workload_properties = workload_properties
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.config.Workload'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def schedule_date(self):
        """
        Time since the workload is planned to run on a cluster.

        :type:
                :class:`~date`
        """  # noqa: E501
        return self.__schedule_date

    @schedule_date.setter
    def schedule_date(self, schedule_date):
        if schedule_date is None:
            raise ValueError("Invalid value for `schedule_date`, must not be `None`")  # noqa: E501

        self.__schedule_date = schedule_date

    @property
    def is_enabled(self):
        """
        Flag to indicate whether the added workload in the planned capacity scenario is to be included in whatif analysis or to be ignored.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self.__is_enabled = is_enabled

    @property
    def projected_resource_requirement(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.ResourceCapacity`
        """  # noqa: E501
        return self.__projected_resource_requirement

    @projected_resource_requirement.setter
    def projected_resource_requirement(self, projected_resource_requirement):

        self.__projected_resource_requirement = projected_resource_requirement

    @property
    def workload_properties(self):
        """
        Metadata about the workload in a capacity planning scenario. For example, if SQL is added as a workload, then the number of users and database transaction type will be metadata for it.

        :type:
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.SqlWorkload` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.VmWorkload` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.VdiWorkload` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.SplunkWorkload` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.CitrixXenWorkload` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.MicrosoftXenWorkload` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.CapacityUpdateConfig` | 
                :class:`~ntnx_aiops_py_client.models.aiops.v4.config.VmCategoryWorkload`
        """  # noqa: E501
        return self.__workload_properties

    @workload_properties.setter
    def workload_properties(self, workload_properties):
        if workload_properties is None:
            raise ValueError("Invalid value for `workload_properties`, must not be `None`")  # noqa: E501

        self.__workload_properties = workload_properties

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_aiops_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Workload, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.ClusterConfig import ClusterConfig  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Runway import Runway  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Vendor import Vendor  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Workload import Workload  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class Scenario(ExternalizableAbstractModel):

    """WhatIf Scenario.

    :param name: (:attr:`name`) Name of capacity planning scenario.
    :type name: 
     min=1 chars, max=256 chars
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the cluster for which Whatif analysis is being performed.
    :type cluster_ext_id: 
    
    
    :param vendors: (:attr:`vendors`) A list of allowed vendors whose model can be requested to sustain the workload in a capacity planning scenario.
    :type vendors: 
    
    
    :param updated_time: (:attr:`updated_time`) Timestamp when the capacity planning scenario is updated. The value should be in ISO-8601 format. For example, 2022-02-20T00:00:00.458Z.
    :type updated_time: 
    
    
    :param target_runway_days: (:attr:`target_runway_days`) Number of days a cluster is expected to sustain the workload in a capacity planning scenario.
    :type target_runway_days: 
    
     min=30, max=360
    :param runway: (:attr:`runway`) 
    :type runway: 
    
    
    :param workloads: (:attr:`workloads`) List of workloads for which runway analysis is being done. It can be considered an additional resource requirement required to run a specific use case. For example, a SQL server.
    :type workloads: 
    
    
    :param cluster_config: (:attr:`cluster_config`) 
    :type cluster_config: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'cluster_ext_id': 'str',
        'vendors': 'list[aiops.v4.config.Vendor]',
        'updated_time': 'datetime',
        'target_runway_days': 'int',
        'runway': 'aiops.v4.config.Runway',
        'workloads': 'list[aiops.v4.config.Workload]',
        'cluster_config': 'aiops.v4.config.ClusterConfig',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'cluster_ext_id': 'clusterExtId',
        'vendors': 'vendors',
        'updated_time': 'updatedTime',
        'target_runway_days': 'targetRunwayDays',
        'runway': 'runway',
        'workloads': 'workloads',
        'cluster_config': 'clusterConfig',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, cluster_ext_id=None, vendors=None, updated_time=None, target_runway_days=None, runway=None, workloads=None, cluster_config=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__cluster_ext_id = None
        self.__vendors = None
        self.__updated_time = None
        self.__target_runway_days = None
        self.__runway = None
        self.__workloads = None
        self.__cluster_config = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if vendors is not None:
            self.__vendors = vendors
        if updated_time is not None:
            self.__updated_time = updated_time
        if target_runway_days is not None:
            self.__target_runway_days = target_runway_days
        if runway is not None:
            self.__runway = runway
        if workloads is not None:
            self.__workloads = workloads
        if cluster_config is not None:
            self.__cluster_config = cluster_config

    def _initialize_object_type(self):
        return 'aiops.v4.config.Scenario'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of capacity planning scenario.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def cluster_ext_id(self):
        """
        UUID of the cluster for which Whatif analysis is being performed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def vendors(self):
        """
        A list of allowed vendors whose model can be requested to sustain the workload in a capacity planning scenario.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.Vendor` ]
        """  # noqa: E501
        return self.__vendors

    @vendors.setter
    def vendors(self, vendors):

        self.__vendors = vendors

    @property
    def updated_time(self):
        """
        Timestamp when the capacity planning scenario is updated. The value should be in ISO-8601 format. For example, 2022-02-20T00:00:00.458Z.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__updated_time

    @updated_time.setter
    def updated_time(self, updated_time):

        self.__updated_time = updated_time

    @property
    def target_runway_days(self):
        """
        Number of days a cluster is expected to sustain the workload in a capacity planning scenario.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__target_runway_days

    @target_runway_days.setter
    def target_runway_days(self, target_runway_days):
        if target_runway_days is not None and target_runway_days > 360:  # noqa: E501
            raise ValueError("Invalid value for `target_runway_days`, must be a value less than or equal to `360`")  # noqa: E501
        if target_runway_days is not None and target_runway_days < 30:  # noqa: E501
            raise ValueError("Invalid value for `target_runway_days`, must be a value greater than or equal to `30`")  # noqa: E501

        self.__target_runway_days = target_runway_days

    @property
    def runway(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.Runway`
        """  # noqa: E501
        return self.__runway

    @runway.setter
    def runway(self, runway):

        self.__runway = runway

    @property
    def workloads(self):
        """
        List of workloads for which runway analysis is being done. It can be considered an additional resource requirement required to run a specific use case. For example, a SQL server.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.Workload` ]
        """  # noqa: E501
        return self.__workloads

    @workloads.setter
    def workloads(self, workloads):

        self.__workloads = workloads

    @property
    def cluster_config(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.ClusterConfig`
        """  # noqa: E501
        return self.__cluster_config

    @cluster_config.setter
    def cluster_config(self, cluster_config):

        self.__cluster_config = cluster_config

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Scenario, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scenario):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


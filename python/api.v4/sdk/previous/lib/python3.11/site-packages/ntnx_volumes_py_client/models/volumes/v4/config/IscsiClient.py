# coding: utf-8


"""
IGNORE:
    Nutanix Volumes APIs

    Configure volumes.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_volumes_py_client.models.common.v1.config.IPAddressOrFQDN import IPAddressOrFQDN  # noqa: F401,E501
from ntnx_volumes_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_volumes_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.AuthenticationType import AuthenticationType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.TargetParam import TargetParam  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.VolumeGroupAttachmentSite import VolumeGroupAttachmentSite  # noqa: F401,E501

class IscsiClient(ExternalizableAbstractModel):

    """A model that represents an iSCSI client that can be associated with a Volume Group as an external attachment.

    :param iscsi_initiator_name: (:attr:`iscsi_initiator_name`) iSCSI initiator name. Exactly one of iscsiInitiatorName and iscsiInitiatorNetworkId must be specified during the attach operation. This field is immutable.
    :type iscsi_initiator_name: 
     max=64 chars
    
    :param iscsi_initiator_network_id: (:attr:`iscsi_initiator_network_id`) 
    :type iscsi_initiator_network_id: 
    
    
    :param client_secret: (:attr:`client_secret`) iSCSI initiator client secret in case of CHAP authentication. This field should not be provided if the authentication type is not set to CHAP.
    :type client_secret: 
    
    
    :param enabled_authentications: (:attr:`enabled_authentications`) 
    :type enabled_authentications: 
    
    
    :param attached_targets: (:attr:`attached_targets`) 
    :type attached_targets: 
    
    
    :param num_virtual_targets: (:attr:`num_virtual_targets`) Number of virtual targets generated for the iSCSI target. This field is immutable.
    :type num_virtual_targets: 
    
    
    :param cluster_reference: (:attr:`cluster_reference`) The UUID of the cluster that will host the iSCSI client. This field is read-only.
    :type cluster_reference: 
    
    
    :param attachment_site: (:attr:`attachment_site`) 
    :type attachment_site: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'iscsi_initiator_name': 'str',
        'iscsi_initiator_network_id': 'common.v1.config.IPAddressOrFQDN',
        'client_secret': 'str',
        'enabled_authentications': 'volumes.v4.config.AuthenticationType',
        'attached_targets': 'list[volumes.v4.config.TargetParam]',
        'num_virtual_targets': 'int',
        'cluster_reference': 'str',
        'attachment_site': 'volumes.v4.config.VolumeGroupAttachmentSite',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'iscsi_initiator_name': 'iscsiInitiatorName',
        'iscsi_initiator_network_id': 'iscsiInitiatorNetworkId',
        'client_secret': 'clientSecret',
        'enabled_authentications': 'enabledAuthentications',
        'attached_targets': 'attachedTargets',
        'num_virtual_targets': 'numVirtualTargets',
        'cluster_reference': 'clusterReference',
        'attachment_site': 'attachmentSite',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, iscsi_initiator_name=None, iscsi_initiator_network_id=None, client_secret=None, enabled_authentications=None, attached_targets=None, num_virtual_targets=None, cluster_reference=None, attachment_site=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__iscsi_initiator_name = None
        self.__iscsi_initiator_network_id = None
        self.__client_secret = None
        self.__enabled_authentications = None
        self.__attached_targets = None
        self.__num_virtual_targets = None
        self.__cluster_reference = None
        self.__attachment_site = None
        self.discriminator = None
        if iscsi_initiator_name is not None:
            self.__iscsi_initiator_name = iscsi_initiator_name
        if iscsi_initiator_network_id is not None:
            self.__iscsi_initiator_network_id = iscsi_initiator_network_id
        if client_secret is not None:
            self.__client_secret = client_secret
        if enabled_authentications is not None:
            self.__enabled_authentications = enabled_authentications
        if attached_targets is not None:
            self.__attached_targets = attached_targets
        if num_virtual_targets is not None:
            self.__num_virtual_targets = num_virtual_targets
        if cluster_reference is not None:
            self.__cluster_reference = cluster_reference
        if attachment_site is not None:
            self.__attachment_site = attachment_site

    def _initialize_object_type(self):
        return 'volumes.v4.config.IscsiClient'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def iscsi_initiator_name(self):
        """
        iSCSI initiator name. Exactly one of iscsiInitiatorName and iscsiInitiatorNetworkId must be specified during the attach operation. This field is immutable.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__iscsi_initiator_name

    @iscsi_initiator_name.setter
    def iscsi_initiator_name(self, iscsi_initiator_name):
        if iscsi_initiator_name is not None and len(iscsi_initiator_name) > 64:
            raise ValueError("Invalid value for `iscsi_initiator_name`, length must be less than or equal to `64`")  # noqa: E501

        self.__iscsi_initiator_name = iscsi_initiator_name

    @property
    def iscsi_initiator_network_id(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.common.v1.config.IPAddressOrFQDN`
        """  # noqa: E501
        return self.__iscsi_initiator_network_id

    @iscsi_initiator_network_id.setter
    def iscsi_initiator_network_id(self, iscsi_initiator_network_id):

        self.__iscsi_initiator_network_id = iscsi_initiator_network_id

    @property
    def client_secret(self):
        """
        iSCSI initiator client secret in case of CHAP authentication. This field should not be provided if the authentication type is not set to CHAP.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_secret

    @client_secret.setter
    def client_secret(self, client_secret):

        self.__client_secret = client_secret

    @property
    def enabled_authentications(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.AuthenticationType`
        """  # noqa: E501
        return self.__enabled_authentications

    @enabled_authentications.setter
    def enabled_authentications(self, enabled_authentications):

        self.__enabled_authentications = enabled_authentications

    @property
    def attached_targets(self):
        """
        

        :type:
             list[ :class:`~ntnx_volumes_py_client.models.volumes.v4.config.TargetParam` ]
        """  # noqa: E501
        return self.__attached_targets

    @attached_targets.setter
    def attached_targets(self, attached_targets):

        self.__attached_targets = attached_targets

    @property
    def num_virtual_targets(self):
        """
        Number of virtual targets generated for the iSCSI target. This field is immutable.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_virtual_targets

    @num_virtual_targets.setter
    def num_virtual_targets(self, num_virtual_targets):

        self.__num_virtual_targets = num_virtual_targets

    @property
    def cluster_reference(self):
        """
        The UUID of the cluster that will host the iSCSI client. This field is read-only.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_reference

    @cluster_reference.setter
    def cluster_reference(self, cluster_reference):
        if cluster_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_reference = cluster_reference

    @property
    def attachment_site(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.VolumeGroupAttachmentSite`
        """  # noqa: E501
        return self.__attachment_site

    @attachment_site.setter
    def attachment_site(self, attachment_site):

        self.__attachment_site = attachment_site

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(IscsiClient, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IscsiClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


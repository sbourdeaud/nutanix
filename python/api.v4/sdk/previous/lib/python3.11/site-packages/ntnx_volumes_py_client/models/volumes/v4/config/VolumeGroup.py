# coding: utf-8


"""
IGNORE:
    Nutanix Volumes APIs

    Configure volumes.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_volumes_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_volumes_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.AttachmentType import AttachmentType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.AuthenticationType import AuthenticationType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.IscsiFeatures import IscsiFeatures  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.Protocol import Protocol  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.SharingStatus import SharingStatus  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.StorageFeatures import StorageFeatures  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.UsageType import UsageType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.VolumeDisk import VolumeDisk  # noqa: F401,E501

class VolumeGroup(ExternalizableAbstractModel):

    """A model that represents a Volume Group resource.

    :param name: (:attr:`name`) Volume Group name.
    :type name: 
     max=256 chars
    
    :param description: (:attr:`description`) Volume Group description. This is an optional field.
    :type description: 
     max=1000 chars
    
    :param should_load_balance_vm_attachments: (:attr:`should_load_balance_vm_attachments`) Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field. (**Default** False)
    :type should_load_balance_vm_attachments: 
    
    
    :param sharing_status: (:attr:`sharing_status`) 
    :type sharing_status: 
    
    
    :param target_prefix: (:attr:`target_prefix`) The specifications contain the target prefix for external clients as the value. This is an optional field.
    :type target_prefix: 
     max=512 chars
    
    :param target_name: (:attr:`target_name`) Name of the external client target that will be visible and accessible to the client. This is an optional field.
    :type target_name: 
     min=12 chars, max=512 chars
    
    :param enabled_authentications: (:attr:`enabled_authentications`) 
    :type enabled_authentications: 
    
    
    :param iscsi_features: (:attr:`iscsi_features`) 
    :type iscsi_features: 
    
    
    :param created_by: (:attr:`created_by`) Service/user who created this Volume Group. This is an optional field.
    :type created_by: 
     max=512 chars
    
    :param cluster_reference: (:attr:`cluster_reference`) The UUID of the cluster that will host the Volume Group. This is a mandatory field for creating a Volume Group on Prism Central.
    :type cluster_reference: 
    
    
    :param storage_features: (:attr:`storage_features`) 
    :type storage_features: 
    
    
    :param usage_type: (:attr:`usage_type`) 
    :type usage_type: 
    
    
    :param attachment_type: (:attr:`attachment_type`) 
    :type attachment_type: 
    
    
    :param protocol: (:attr:`protocol`) 
    :type protocol: 
    
    
    :param is_hidden: (:attr:`is_hidden`) Indicates whether the Volume Group is meant to be hidden or not. This is an optional field. If omitted, the VG will not be hidden. (**Default** False)
    :type is_hidden: 
    
    
    :param disks: (:attr:`disks`) A list of Volume Disks to be attached to the Volume Group.
    :type disks: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'should_load_balance_vm_attachments': 'bool',
        'sharing_status': 'volumes.v4.config.SharingStatus',
        'target_prefix': 'str',
        'target_name': 'str',
        'enabled_authentications': 'volumes.v4.config.AuthenticationType',
        'iscsi_features': 'volumes.v4.config.IscsiFeatures',
        'created_by': 'str',
        'cluster_reference': 'str',
        'storage_features': 'volumes.v4.config.StorageFeatures',
        'usage_type': 'volumes.v4.config.UsageType',
        'attachment_type': 'volumes.v4.config.AttachmentType',
        'protocol': 'volumes.v4.config.Protocol',
        'is_hidden': 'bool',
        'disks': 'list[volumes.v4.config.VolumeDisk]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'should_load_balance_vm_attachments': 'shouldLoadBalanceVmAttachments',
        'sharing_status': 'sharingStatus',
        'target_prefix': 'targetPrefix',
        'target_name': 'targetName',
        'enabled_authentications': 'enabledAuthentications',
        'iscsi_features': 'iscsiFeatures',
        'created_by': 'createdBy',
        'cluster_reference': 'clusterReference',
        'storage_features': 'storageFeatures',
        'usage_type': 'usageType',
        'attachment_type': 'attachmentType',
        'protocol': 'protocol',
        'is_hidden': 'isHidden',
        'disks': 'disks',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, should_load_balance_vm_attachments=False, sharing_status=None, target_prefix=None, target_name=None, enabled_authentications=None, iscsi_features=None, created_by=None, cluster_reference=None, storage_features=None, usage_type=None, attachment_type=None, protocol=None, is_hidden=False, disks=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__should_load_balance_vm_attachments = None
        self.__sharing_status = None
        self.__target_prefix = None
        self.__target_name = None
        self.__enabled_authentications = None
        self.__iscsi_features = None
        self.__created_by = None
        self.__cluster_reference = None
        self.__storage_features = None
        self.__usage_type = None
        self.__attachment_type = None
        self.__protocol = None
        self.__is_hidden = None
        self.__disks = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if should_load_balance_vm_attachments is not None:
            self.__should_load_balance_vm_attachments = should_load_balance_vm_attachments
        if sharing_status is not None:
            self.__sharing_status = sharing_status
        if target_prefix is not None:
            self.__target_prefix = target_prefix
        if target_name is not None:
            self.__target_name = target_name
        if enabled_authentications is not None:
            self.__enabled_authentications = enabled_authentications
        if iscsi_features is not None:
            self.__iscsi_features = iscsi_features
        if created_by is not None:
            self.__created_by = created_by
        if cluster_reference is not None:
            self.__cluster_reference = cluster_reference
        if storage_features is not None:
            self.__storage_features = storage_features
        if usage_type is not None:
            self.__usage_type = usage_type
        if attachment_type is not None:
            self.__attachment_type = attachment_type
        if protocol is not None:
            self.__protocol = protocol
        if is_hidden is not None:
            self.__is_hidden = is_hidden
        if disks is not None:
            self.__disks = disks

    def _initialize_object_type(self):
        return 'volumes.v4.config.VolumeGroup'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Volume Group name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Volume Group description. This is an optional field.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def should_load_balance_vm_attachments(self):
        """
        Indicates whether to enable Volume Group load balancing for VM attachments. This cannot be enabled if there are iSCSI client attachments already associated with the Volume Group, and vice-versa. This is an optional field.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_load_balance_vm_attachments

    @should_load_balance_vm_attachments.setter
    def should_load_balance_vm_attachments(self, should_load_balance_vm_attachments):

        self.__should_load_balance_vm_attachments = should_load_balance_vm_attachments

    @property
    def sharing_status(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.SharingStatus`
        """  # noqa: E501
        return self.__sharing_status

    @sharing_status.setter
    def sharing_status(self, sharing_status):

        self.__sharing_status = sharing_status

    @property
    def target_prefix(self):
        """
        The specifications contain the target prefix for external clients as the value. This is an optional field.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_prefix

    @target_prefix.setter
    def target_prefix(self, target_prefix):
        if target_prefix is not None and len(target_prefix) > 512:
            raise ValueError("Invalid value for `target_prefix`, length must be less than or equal to `512`")  # noqa: E501
        if target_prefix is not None and not re.search('^[\\da-zA-Z:\\.\\-]+$', target_prefix):  # noqa: E501
            raise ValueError(r"Invalid value for `target_prefix`, must be a follow pattern or equal to `/^[\\da-zA-Z:\\.\\-]+$/`")  # noqa: E501

        self.__target_prefix = target_prefix

    @property
    def target_name(self):
        """
        Name of the external client target that will be visible and accessible to the client. This is an optional field.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_name

    @target_name.setter
    def target_name(self, target_name):
        if target_name is not None and len(target_name) > 512:
            raise ValueError("Invalid value for `target_name`, length must be less than or equal to `512`")  # noqa: E501
        if target_name is not None and len(target_name) < 12:
            raise ValueError("Invalid value for `target_name`, length must be greater than or equal to `12`")  # noqa: E501

        self.__target_name = target_name

    @property
    def enabled_authentications(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.AuthenticationType`
        """  # noqa: E501
        return self.__enabled_authentications

    @enabled_authentications.setter
    def enabled_authentications(self, enabled_authentications):

        self.__enabled_authentications = enabled_authentications

    @property
    def iscsi_features(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.IscsiFeatures`
        """  # noqa: E501
        return self.__iscsi_features

    @iscsi_features.setter
    def iscsi_features(self, iscsi_features):

        self.__iscsi_features = iscsi_features

    @property
    def created_by(self):
        """
        Service/user who created this Volume Group. This is an optional field.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):
        if created_by is not None and len(created_by) > 512:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `512`")  # noqa: E501

        self.__created_by = created_by

    @property
    def cluster_reference(self):
        """
        The UUID of the cluster that will host the Volume Group. This is a mandatory field for creating a Volume Group on Prism Central.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_reference

    @cluster_reference.setter
    def cluster_reference(self, cluster_reference):
        if cluster_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_reference = cluster_reference

    @property
    def storage_features(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.StorageFeatures`
        """  # noqa: E501
        return self.__storage_features

    @storage_features.setter
    def storage_features(self, storage_features):

        self.__storage_features = storage_features

    @property
    def usage_type(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.UsageType`
        """  # noqa: E501
        return self.__usage_type

    @usage_type.setter
    def usage_type(self, usage_type):

        self.__usage_type = usage_type

    @property
    def attachment_type(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.AttachmentType`
        """  # noqa: E501
        return self.__attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):

        self.__attachment_type = attachment_type

    @property
    def protocol(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.Protocol`
        """  # noqa: E501
        return self.__protocol

    @protocol.setter
    def protocol(self, protocol):

        self.__protocol = protocol

    @property
    def is_hidden(self):
        """
        Indicates whether the Volume Group is meant to be hidden or not. This is an optional field. If omitted, the VG will not be hidden.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):

        self.__is_hidden = is_hidden

    @property
    def disks(self):
        """
        A list of Volume Disks to be attached to the Volume Group.

        :type:
             list[ :class:`~ntnx_volumes_py_client.models.volumes.v4.config.VolumeDisk` ]
        """  # noqa: E501
        return self.__disks

    @disks.setter
    def disks(self, disks):

        self.__disks = disks

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VolumeGroup, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


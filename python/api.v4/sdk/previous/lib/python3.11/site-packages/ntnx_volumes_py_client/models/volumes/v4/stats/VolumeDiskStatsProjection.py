# coding: utf-8


"""
IGNORE:
    Nutanix Volumes APIs

    Configure volumes.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_volumes_py_client.models.volumes.v4.stats.TimeValuePair import TimeValuePair  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.stats.VolumeDiskStats import VolumeDiskStats  # noqa: F401,E501

class VolumeDiskStatsProjection(VolumeDiskStats):

    """

    :param volume_disk_ext_id: (:attr:`volume_disk_ext_id`) Uuid of the Volume Disk.
    :type volume_disk_ext_id: 
    
    
    :param controller_user_bytes: (:attr:`controller_user_bytes`) Controller user bytes.
    :type controller_user_bytes: 
    
    
    :param controller_num_iops: (:attr:`controller_num_iops`) Controller I/O rate measured in iops.
    :type controller_num_iops: 
    
    
    :param controller_num_read_iops: (:attr:`controller_num_read_iops`) Controller read I/O measured in iops.
    :type controller_num_read_iops: 
    
    
    :param controller_num_write_iops: (:attr:`controller_num_write_iops`) Controller write I/O measured in iops.
    :type controller_num_write_iops: 
    
    
    :param controller_io_bandwidth_k_bps: (:attr:`controller_io_bandwidth_k_bps`) Controller I/O bandwidth measured in Kbps.
    :type controller_io_bandwidth_k_bps: 
    
    
    :param controller_read_io_bandwidth_k_bps: (:attr:`controller_read_io_bandwidth_k_bps`) Controller read I/O bandwidth measured in Kbps.
    :type controller_read_io_bandwidth_k_bps: 
    
    
    :param controller_write_io_bandwidth_k_bps: (:attr:`controller_write_io_bandwidth_k_bps`) Controller write I/O bandwidth measured in Kbps.
    :type controller_write_io_bandwidth_k_bps: 
    
    
    :param controller_avg_io_latency_usecs: (:attr:`controller_avg_io_latency_usecs`) Controller average I/O latency measured in microseconds.
    :type controller_avg_io_latency_usecs: 
    
    
    :param controller_avg_read_io_latency_usecs: (:attr:`controller_avg_read_io_latency_usecs`) Controller average read I/O latency measured in microseconds.
    :type controller_avg_read_io_latency_usecs: 
    
    
    :param controller_avg_write_io_latency_usecs: (:attr:`controller_avg_write_io_latency_usecs`) Controller average write I/O latency measured in microseconds.
    :type controller_avg_write_io_latency_usecs: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'volume_disk_ext_id': 'str',
        'controller_user_bytes': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_num_iops': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_num_read_iops': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_num_write_iops': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_io_bandwidth_k_bps': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_read_io_bandwidth_k_bps': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_write_io_bandwidth_k_bps': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_avg_io_latency_usecs': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_avg_read_io_latency_usecs': 'list[volumes.v4.stats.TimeValuePair]',
        'controller_avg_write_io_latency_usecs': 'list[volumes.v4.stats.TimeValuePair]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'volume_disk_ext_id': 'volumeDiskExtId',
        'controller_user_bytes': 'controllerUserBytes',
        'controller_num_iops': 'controllerNumIOPS',
        'controller_num_read_iops': 'controllerNumReadIOPS',
        'controller_num_write_iops': 'controllerNumWriteIOPS',
        'controller_io_bandwidth_k_bps': 'controllerIOBandwidthKBps',
        'controller_read_io_bandwidth_k_bps': 'controllerReadIOBandwidthKBps',
        'controller_write_io_bandwidth_k_bps': 'controllerWriteIOBandwidthKBps',
        'controller_avg_io_latency_usecs': 'controllerAvgIOLatencyUsecs',
        'controller_avg_read_io_latency_usecs': 'controllerAvgReadIOLatencyUsecs',
        'controller_avg_write_io_latency_usecs': 'controllerAvgWriteIOLatencyUsecs',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, volume_disk_ext_id=None, controller_user_bytes=None, controller_num_iops=None, controller_num_read_iops=None, controller_num_write_iops=None, controller_io_bandwidth_k_bps=None, controller_read_io_bandwidth_k_bps=None, controller_write_io_bandwidth_k_bps=None, controller_avg_io_latency_usecs=None, controller_avg_read_io_latency_usecs=None, controller_avg_write_io_latency_usecs=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        VolumeDiskStats.__init__(self, volume_disk_ext_id, controller_user_bytes, controller_num_iops, controller_num_read_iops, controller_num_write_iops, controller_io_bandwidth_k_bps, controller_read_io_bandwidth_k_bps, controller_write_io_bandwidth_k_bps, controller_avg_io_latency_usecs, controller_avg_read_io_latency_usecs, controller_avg_write_io_latency_usecs, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'volumes.v4.stats.VolumeDiskStatsProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VolumeDiskStatsProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeDiskStatsProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


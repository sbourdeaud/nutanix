# coding: utf-8


"""
IGNORE:
    Nutanix Volumes APIs

    Configure volumes.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_volumes_py_client.models.volumes.v4.config.AttachmentType import AttachmentType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.AuthenticationType import AuthenticationType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.ClusterProjection import ClusterProjection  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.IscsiFeatures import IscsiFeatures  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.Protocol import Protocol  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.SharingStatus import SharingStatus  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.StorageFeatures import StorageFeatures  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.UsageType import UsageType  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.VolumeDisk import VolumeDisk  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.VolumeGroup import VolumeGroup  # noqa: F401,E501
from ntnx_volumes_py_client.models.volumes.v4.config.VolumeGroupMetadataProjection import VolumeGroupMetadataProjection  # noqa: F401,E501

class VolumeGroupProjection(VolumeGroup):

    """

    :param cluster_projection: (:attr:`cluster_projection`) 
    :type cluster_projection: 
    
    
    :param volume_group_metadata_projection: (:attr:`volume_group_metadata_projection`) 
    :type volume_group_metadata_projection: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_projection': 'volumes.v4.config.ClusterProjection',
        'volume_group_metadata_projection': 'volumes.v4.config.VolumeGroupMetadataProjection',
        'name': 'str',
        'description': 'str',
        'should_load_balance_vm_attachments': 'bool',
        'sharing_status': 'volumes.v4.config.SharingStatus',
        'target_prefix': 'str',
        'target_name': 'str',
        'enabled_authentications': 'volumes.v4.config.AuthenticationType',
        'iscsi_features': 'volumes.v4.config.IscsiFeatures',
        'created_by': 'str',
        'cluster_reference': 'str',
        'storage_features': 'volumes.v4.config.StorageFeatures',
        'usage_type': 'volumes.v4.config.UsageType',
        'attachment_type': 'volumes.v4.config.AttachmentType',
        'protocol': 'volumes.v4.config.Protocol',
        'is_hidden': 'bool',
        'disks': 'list[volumes.v4.config.VolumeDisk]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_projection': 'clusterProjection',
        'volume_group_metadata_projection': 'volumeGroupMetadataProjection',
        'name': 'name',
        'description': 'description',
        'should_load_balance_vm_attachments': 'shouldLoadBalanceVmAttachments',
        'sharing_status': 'sharingStatus',
        'target_prefix': 'targetPrefix',
        'target_name': 'targetName',
        'enabled_authentications': 'enabledAuthentications',
        'iscsi_features': 'iscsiFeatures',
        'created_by': 'createdBy',
        'cluster_reference': 'clusterReference',
        'storage_features': 'storageFeatures',
        'usage_type': 'usageType',
        'attachment_type': 'attachmentType',
        'protocol': 'protocol',
        'is_hidden': 'isHidden',
        'disks': 'disks',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_projection=None, volume_group_metadata_projection=None, name=None, description=None, should_load_balance_vm_attachments=False, sharing_status=None, target_prefix=None, target_name=None, enabled_authentications=None, iscsi_features=None, created_by=None, cluster_reference=None, storage_features=None, usage_type=None, attachment_type=None, protocol=None, is_hidden=False, disks=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        VolumeGroup.__init__(self, name, description, should_load_balance_vm_attachments, sharing_status, target_prefix, target_name, enabled_authentications, iscsi_features, created_by, cluster_reference, storage_features, usage_type, attachment_type, protocol, is_hidden, disks, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_projection = None
        self.__volume_group_metadata_projection = None
        self.discriminator = None
        if cluster_projection is not None:
            self.__cluster_projection = cluster_projection
        if volume_group_metadata_projection is not None:
            self.__volume_group_metadata_projection = volume_group_metadata_projection

    def _initialize_object_type(self):
        return 'volumes.v4.config.VolumeGroupProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_projection(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.ClusterProjection`
        """  # noqa: E501
        return self.__cluster_projection

    @cluster_projection.setter
    def cluster_projection(self, cluster_projection):

        self.__cluster_projection = cluster_projection

    @property
    def volume_group_metadata_projection(self):
        """
        

        :type:
            :class:`~ntnx_volumes_py_client.models.volumes.v4.config.VolumeGroupMetadataProjection`
        """  # noqa: E501
        return self.__volume_group_metadata_projection

    @volume_group_metadata_projection.setter
    def volume_group_metadata_projection(self, volume_group_metadata_projection):

        self.__volume_group_metadata_projection = volume_group_metadata_projection

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VolumeGroupProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


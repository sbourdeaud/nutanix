# coding: utf-8


"""
IGNORE:
    Nutanix Volumes APIs

    Configure volumes.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_volumes_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_volumes_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class NvmfClient(ExternalizableAbstractModel):

    """A model that represents a NVMf client that can be associated with a Volume Group as an external attachment.

    :param nvmf_initiator_name: (:attr:`nvmf_initiator_name`) NVMf client qualified name.
    :type nvmf_initiator_name: 
     max=68 chars
    
    :param attached_targets: (:attr:`attached_targets`) List of all subsystems connected to a NVMf client.
    :type attached_targets: 
    
    
    :param cluster_reference: (:attr:`cluster_reference`) The UUID of the cluster that will host the NVMf client.
    :type cluster_reference: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'nvmf_initiator_name': 'str',
        'attached_targets': 'list[str]',
        'cluster_reference': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'nvmf_initiator_name': 'nvmfInitiatorName',
        'attached_targets': 'attachedTargets',
        'cluster_reference': 'clusterReference',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, nvmf_initiator_name=None, attached_targets=None, cluster_reference=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__nvmf_initiator_name = None
        self.__attached_targets = None
        self.__cluster_reference = None
        self.discriminator = None
        if nvmf_initiator_name is not None:
            self.__nvmf_initiator_name = nvmf_initiator_name
        if attached_targets is not None:
            self.__attached_targets = attached_targets
        if cluster_reference is not None:
            self.__cluster_reference = cluster_reference

    def _initialize_object_type(self):
        return 'volumes.v4.config.NvmfClient'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def nvmf_initiator_name(self):
        """
        NVMf client qualified name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__nvmf_initiator_name

    @nvmf_initiator_name.setter
    def nvmf_initiator_name(self, nvmf_initiator_name):
        if nvmf_initiator_name is not None and len(nvmf_initiator_name) > 68:
            raise ValueError("Invalid value for `nvmf_initiator_name`, length must be less than or equal to `68`")  # noqa: E501

        self.__nvmf_initiator_name = nvmf_initiator_name

    @property
    def attached_targets(self):
        """
        List of all subsystems connected to a NVMf client.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__attached_targets

    @attached_targets.setter
    def attached_targets(self, attached_targets):

        self.__attached_targets = attached_targets

    @property
    def cluster_reference(self):
        """
        The UUID of the cluster that will host the NVMf client.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_reference

    @cluster_reference.setter
    def cluster_reference(self, cluster_reference):
        if cluster_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_reference = cluster_reference

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NvmfClient, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NvmfClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


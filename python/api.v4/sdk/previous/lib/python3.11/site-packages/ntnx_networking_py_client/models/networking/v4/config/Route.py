# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.networking.v4.config.BaseRoute import BaseRoute  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.IPSubnet import IPSubnet  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.Nexthop import Nexthop  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.RouteType import RouteType  # noqa: F401,E501

class Route(BaseRoute):

    """Route of the VPC route table.

    :param route_table_reference: (:attr:`route_table_reference`) Route table to which this route belongs.
    :type route_table_reference: 
    
    
    :param vpc_reference: (:attr:`vpc_reference`) VPC to which this route belongs.
    :type vpc_reference: 
    
    
    :param external_routing_domain_reference: (:attr:`external_routing_domain_reference`) External routing domain to which this route belongs.
    :type external_routing_domain_reference: 
    
    
    :param route_type: (:attr:`route_type`) 
    :type route_type: required
    
    
    :param is_active: (:attr:`is_active`) Indicates whether the route is active in the forwarding plane.
    :type is_active: 
    
    
    :param priority: (:attr:`priority`) Route priority. A higher value implies greater preference is assigned to the route.
    :type priority: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'route_table_reference': 'str',
        'vpc_reference': 'str',
        'external_routing_domain_reference': 'str',
        'route_type': 'networking.v4.config.RouteType',
        'is_active': 'bool',
        'priority': 'int',
        'name': 'str',
        'description': 'str',
        'destination': 'networking.v4.config.IPSubnet',
        'nexthop': 'networking.v4.config.Nexthop',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'route_table_reference': 'routeTableReference',
        'vpc_reference': 'vpcReference',
        'external_routing_domain_reference': 'externalRoutingDomainReference',
        'route_type': 'routeType',
        'is_active': 'isActive',
        'priority': 'priority',
        'name': 'name',
        'description': 'description',
        'destination': 'destination',
        'nexthop': 'nexthop',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, route_table_reference=None, vpc_reference=None, external_routing_domain_reference=None, route_type=None, is_active=None, priority=None, name=None, description=None, destination=None, nexthop=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        BaseRoute.__init__(self, name, description, destination, nexthop, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__route_table_reference = None
        self.__vpc_reference = None
        self.__external_routing_domain_reference = None
        self.__route_type = None
        self.__is_active = None
        self.__priority = None
        self.discriminator = None
        if route_table_reference is not None:
            self.__route_table_reference = route_table_reference
        if vpc_reference is not None:
            self.__vpc_reference = vpc_reference
        if external_routing_domain_reference is not None:
            self.__external_routing_domain_reference = external_routing_domain_reference
        self.__route_type = route_type
        if is_active is not None:
            self.__is_active = is_active
        if priority is not None:
            self.__priority = priority

    def _initialize_object_type(self):
        return 'networking.v4.config.Route'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def route_table_reference(self):
        """
        Route table to which this route belongs.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__route_table_reference

    @route_table_reference.setter
    def route_table_reference(self, route_table_reference):
        if route_table_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', route_table_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `route_table_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__route_table_reference = route_table_reference

    @property
    def vpc_reference(self):
        """
        VPC to which this route belongs.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vpc_reference

    @vpc_reference.setter
    def vpc_reference(self, vpc_reference):
        if vpc_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', vpc_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `vpc_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__vpc_reference = vpc_reference

    @property
    def external_routing_domain_reference(self):
        """
        External routing domain to which this route belongs.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__external_routing_domain_reference

    @external_routing_domain_reference.setter
    def external_routing_domain_reference(self, external_routing_domain_reference):
        if external_routing_domain_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', external_routing_domain_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `external_routing_domain_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__external_routing_domain_reference = external_routing_domain_reference

    @property
    def route_type(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.RouteType`
        """  # noqa: E501
        return self.__route_type

    @route_type.setter
    def route_type(self, route_type):
        if route_type is None:
            raise ValueError("Invalid value for `route_type`, must not be `None`")  # noqa: E501

        self.__route_type = route_type

    @property
    def is_active(self):
        """
        Indicates whether the route is active in the forwarding plane.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_active

    @is_active.setter
    def is_active(self, is_active):

        self.__is_active = is_active

    @property
    def priority(self):
        """
        Route priority. A higher value implies greater preference is assigned to the route.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__priority

    @priority.setter
    def priority(self, priority):

        self.__priority = priority

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Route, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


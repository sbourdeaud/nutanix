# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.BondModeType import BondModeType  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.Cluster import Cluster  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.IgmpSpec import IgmpSpec  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NetworkingBaseModel import NetworkingBaseModel  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.OwnerType import OwnerType  # noqa: F401,E501

class VirtualSwitch(NetworkingBaseModel):

    """Schema to configure a virtual switch

    :param name: (:attr:`name`) User-visible Virtual Switch name
    :type name: required
     max=128 chars
    
    :param description: (:attr:`description`) Input body to configure a Virtual Switch
    :type description: 
     max=1000 chars
    
    :param is_default: (:attr:`is_default`) Indicates whether it is a default Virtual Switch which cannot be deleted (**Default** False)
    :type is_default: 
    
    
    :param is_quick_mode: (:attr:`is_quick_mode`) When true, the node is not put in maintenance mode during the create/update operation. (**Default** False)
    :type is_quick_mode: 
    
    
    :param has_deployment_error: (:attr:`has_deployment_error`) When true, virtual switch configuration is not deployed on every node.
    :type has_deployment_error: 
    
    
    :param mtu: (:attr:`mtu`) MTU (**Default** 1500)
    :type mtu: 
    
    
    :param bond_mode: (:attr:`bond_mode`) 
    :type bond_mode: required
    
    
    :param clusters: (:attr:`clusters`) Cluster configuration list
    :type clusters: required
    
    
    :param igmp_spec: (:attr:`igmp_spec`) 
    :type igmp_spec: 
    
    
    :param owner_type: (:attr:`owner_type`) 
    :type owner_type: 
    
    
    :param has_update_in_progress: (:attr:`has_update_in_progress`) Indicates whether the virtual switch's update is being processed
    :type has_update_in_progress: 
    
    
    :param has_delete_in_progress: (:attr:`has_delete_in_progress`) Indicates whether the virtual switch's delete is being processed
    :type has_delete_in_progress: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'is_default': 'bool',
        'is_quick_mode': 'bool',
        'has_deployment_error': 'bool',
        'mtu': 'int',
        'bond_mode': 'networking.v4.config.BondModeType',
        'clusters': 'list[networking.v4.config.Cluster]',
        'igmp_spec': 'networking.v4.config.IgmpSpec',
        'owner_type': 'networking.v4.config.OwnerType',
        'has_update_in_progress': 'bool',
        'has_delete_in_progress': 'bool',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'is_default': 'isDefault',
        'is_quick_mode': 'isQuickMode',
        'has_deployment_error': 'hasDeploymentError',
        'mtu': 'mtu',
        'bond_mode': 'bondMode',
        'clusters': 'clusters',
        'igmp_spec': 'igmpSpec',
        'owner_type': 'ownerType',
        'has_update_in_progress': 'hasUpdateInProgress',
        'has_delete_in_progress': 'hasDeleteInProgress',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, is_default=False, is_quick_mode=False, has_deployment_error=None, mtu=1500, bond_mode=None, clusters=None, igmp_spec=None, owner_type=None, has_update_in_progress=None, has_delete_in_progress=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        NetworkingBaseModel.__init__(self, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__is_default = None
        self.__is_quick_mode = None
        self.__has_deployment_error = None
        self.__mtu = None
        self.__bond_mode = None
        self.__clusters = None
        self.__igmp_spec = None
        self.__owner_type = None
        self.__has_update_in_progress = None
        self.__has_delete_in_progress = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if is_default is not None:
            self.__is_default = is_default
        if is_quick_mode is not None:
            self.__is_quick_mode = is_quick_mode
        if has_deployment_error is not None:
            self.__has_deployment_error = has_deployment_error
        if mtu is not None:
            self.__mtu = mtu
        self.__bond_mode = bond_mode
        self.__clusters = clusters
        if igmp_spec is not None:
            self.__igmp_spec = igmp_spec
        if owner_type is not None:
            self.__owner_type = owner_type
        if has_update_in_progress is not None:
            self.__has_update_in_progress = has_update_in_progress
        if has_delete_in_progress is not None:
            self.__has_delete_in_progress = has_delete_in_progress

    def _initialize_object_type(self):
        return 'networking.v4.config.VirtualSwitch'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        User-visible Virtual Switch name

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Input body to configure a Virtual Switch

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def is_default(self):
        """
        Indicates whether it is a default Virtual Switch which cannot be deleted

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_default

    @is_default.setter
    def is_default(self, is_default):

        self.__is_default = is_default

    @property
    def is_quick_mode(self):
        """
        When true, the node is not put in maintenance mode during the create/update operation.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_quick_mode

    @is_quick_mode.setter
    def is_quick_mode(self, is_quick_mode):

        self.__is_quick_mode = is_quick_mode

    @property
    def has_deployment_error(self):
        """
        When true, virtual switch configuration is not deployed on every node.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_deployment_error

    @has_deployment_error.setter
    def has_deployment_error(self, has_deployment_error):

        self.__has_deployment_error = has_deployment_error

    @property
    def mtu(self):
        """
        MTU

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__mtu

    @mtu.setter
    def mtu(self, mtu):

        self.__mtu = mtu

    @property
    def bond_mode(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.BondModeType`
        """  # noqa: E501
        return self.__bond_mode

    @bond_mode.setter
    def bond_mode(self, bond_mode):
        if bond_mode is None:
            raise ValueError("Invalid value for `bond_mode`, must not be `None`")  # noqa: E501

        self.__bond_mode = bond_mode

    @property
    def clusters(self):
        """
        Cluster configuration list

        :type:
             list[ :class:`~ntnx_networking_py_client.models.networking.v4.config.Cluster` ]
        """  # noqa: E501
        return self.__clusters

    @clusters.setter
    def clusters(self, clusters):
        if clusters is None:
            raise ValueError("Invalid value for `clusters`, must not be `None`")  # noqa: E501

        self.__clusters = clusters

    @property
    def igmp_spec(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.IgmpSpec`
        """  # noqa: E501
        return self.__igmp_spec

    @igmp_spec.setter
    def igmp_spec(self, igmp_spec):

        self.__igmp_spec = igmp_spec

    @property
    def owner_type(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.OwnerType`
        """  # noqa: E501
        return self.__owner_type

    @owner_type.setter
    def owner_type(self, owner_type):

        self.__owner_type = owner_type

    @property
    def has_update_in_progress(self):
        """
        Indicates whether the virtual switch's update is being processed

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_update_in_progress

    @has_update_in_progress.setter
    def has_update_in_progress(self, has_update_in_progress):

        self.__has_update_in_progress = has_update_in_progress

    @property
    def has_delete_in_progress(self):
        """
        Indicates whether the virtual switch's delete is being processed

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__has_delete_in_progress

    @has_delete_in_progress.setter
    def has_delete_in_progress(self, has_delete_in_progress):

        self.__has_delete_in_progress = has_delete_in_progress

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VirtualSwitch, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


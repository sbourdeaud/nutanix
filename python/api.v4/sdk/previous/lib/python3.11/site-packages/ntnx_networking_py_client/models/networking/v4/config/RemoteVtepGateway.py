# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NetworkingBaseModel import NetworkingBaseModel  # noqa: F401,E501

class RemoteVtepGateway(NetworkingBaseModel):

    """

    :param name: (:attr:`name`)  VTEP gateway name.
    :type name: 
     max=128 chars
    
    :param is_local: (:attr:`is_local`) If set to true, VTEP gateway is local. When set to false, VTEP gateway is remote.
    :type is_local: 
    
    
    :param vxlan_port: (:attr:`vxlan_port`) VXLAN port.
    :type vxlan_port: 
    
     min=0, max=65535
    :param cluster_reference: (:attr:`cluster_reference`) Reference to the remote Prism Element cluster that owns the VTEP gateway.
    :type cluster_reference: 
    
    
    :param cluster_name: (:attr:`cluster_name`) Name of the remote Prism Element cluster that owns the VTEP gateway.
    :type cluster_name: 
     max=128 chars
    
    :param vpc_reference: (:attr:`vpc_reference`) Reference to the VPC associated with the VTEP gateway.
    :type vpc_reference: 
    
    
    :param vpc_name: (:attr:`vpc_name`) Name of the VPC associated with the VTEP gateway.
    :type vpc_name: 
     max=128 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'is_local': 'bool',
        'vxlan_port': 'int',
        'cluster_reference': 'str',
        'cluster_name': 'str',
        'vpc_reference': 'str',
        'vpc_name': 'str',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'is_local': 'isLocal',
        'vxlan_port': 'vxlanPort',
        'cluster_reference': 'clusterReference',
        'cluster_name': 'clusterName',
        'vpc_reference': 'vpcReference',
        'vpc_name': 'vpcName',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, is_local=None, vxlan_port=None, cluster_reference=None, cluster_name=None, vpc_reference=None, vpc_name=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        NetworkingBaseModel.__init__(self, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__is_local = None
        self.__vxlan_port = None
        self.__cluster_reference = None
        self.__cluster_name = None
        self.__vpc_reference = None
        self.__vpc_name = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if is_local is not None:
            self.__is_local = is_local
        if vxlan_port is not None:
            self.__vxlan_port = vxlan_port
        if cluster_reference is not None:
            self.__cluster_reference = cluster_reference
        if cluster_name is not None:
            self.__cluster_name = cluster_name
        if vpc_reference is not None:
            self.__vpc_reference = vpc_reference
        if vpc_name is not None:
            self.__vpc_name = vpc_name

    def _initialize_object_type(self):
        return 'networking.v4.config.RemoteVtepGateway'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
         VTEP gateway name.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self.__name = name

    @property
    def is_local(self):
        """
        If set to true, VTEP gateway is local. When set to false, VTEP gateway is remote.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_local

    @is_local.setter
    def is_local(self, is_local):

        self.__is_local = is_local

    @property
    def vxlan_port(self):
        """
        VXLAN port.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__vxlan_port

    @vxlan_port.setter
    def vxlan_port(self, vxlan_port):
        if vxlan_port is not None and vxlan_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `vxlan_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if vxlan_port is not None and vxlan_port < 0:  # noqa: E501
            raise ValueError("Invalid value for `vxlan_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__vxlan_port = vxlan_port

    @property
    def cluster_reference(self):
        """
        Reference to the remote Prism Element cluster that owns the VTEP gateway.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_reference

    @cluster_reference.setter
    def cluster_reference(self, cluster_reference):
        if cluster_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_reference = cluster_reference

    @property
    def cluster_name(self):
        """
        Name of the remote Prism Element cluster that owns the VTEP gateway.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        if cluster_name is not None and len(cluster_name) > 128:
            raise ValueError("Invalid value for `cluster_name`, length must be less than or equal to `128`")  # noqa: E501

        self.__cluster_name = cluster_name

    @property
    def vpc_reference(self):
        """
        Reference to the VPC associated with the VTEP gateway.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vpc_reference

    @vpc_reference.setter
    def vpc_reference(self, vpc_reference):
        if vpc_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', vpc_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `vpc_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__vpc_reference = vpc_reference

    @property
    def vpc_name(self):
        """
        Name of the VPC associated with the VTEP gateway.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vpc_name

    @vpc_name.setter
    def vpc_name(self, vpc_name):
        if vpc_name is not None and len(vpc_name) > 128:
            raise ValueError("Invalid value for `vpc_name`, length must be less than or equal to `128`")  # noqa: E501

        self.__vpc_name = vpc_name

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RemoteVtepGateway, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteVtepGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.stats.DownSamplingOperator import DownSamplingOperator  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.stats.StatsQueryResponseBase import StatsQueryResponseBase  # noqa: F401,E501

class VpcNsStats(StatsQueryResponseBase):

    """VPC North-South statistics description

    :param north_south_ingress_bytes_per_sec: (:attr:`north_south_ingress_bytes_per_sec`) VPC North-South string array of ingress BPS values
    :type north_south_ingress_bytes_per_sec: 
    
    
    :param north_south_egress_bytes_per_sec: (:attr:`north_south_egress_bytes_per_sec`) VPC North-South string array of egress BPS values
    :type north_south_egress_bytes_per_sec: 
    
    
    :param north_south_ingress_packets_per_sec: (:attr:`north_south_ingress_packets_per_sec`) VPC North-South string array of ingress PPS values
    :type north_south_ingress_packets_per_sec: 
    
    
    :param north_south_egress_packets_per_sec: (:attr:`north_south_egress_packets_per_sec`) VPC North-South string array of egress PPS values
    :type north_south_egress_packets_per_sec: 
    
    
    :param north_south_ingress_bytes_abs: (:attr:`north_south_ingress_bytes_abs`) VPC North-South string array of ingress absolute bytes values
    :type north_south_ingress_bytes_abs: 
    
    
    :param north_south_egress_bytes_abs: (:attr:`north_south_egress_bytes_abs`) VPC North-South string array of egress absolute bytes values
    :type north_south_egress_bytes_abs: 
    
    
    :param north_south_ingress_packets_abs: (:attr:`north_south_ingress_packets_abs`) VPC North-South string array of ingress absolute packets values
    :type north_south_ingress_packets_abs: 
    
    
    :param north_south_egress_packets_abs: (:attr:`north_south_egress_packets_abs`) VPC North-South string array of egress absolute packets values
    :type north_south_egress_packets_abs: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'north_south_ingress_bytes_per_sec': 'list[str]',
        'north_south_egress_bytes_per_sec': 'list[str]',
        'north_south_ingress_packets_per_sec': 'list[str]',
        'north_south_egress_packets_per_sec': 'list[str]',
        'north_south_ingress_bytes_abs': 'list[str]',
        'north_south_egress_bytes_abs': 'list[str]',
        'north_south_ingress_packets_abs': 'list[str]',
        'north_south_egress_packets_abs': 'list[str]',
        'stat_type': 'common.v1.stats.DownSamplingOperator',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'north_south_ingress_bytes_per_sec': 'northSouthIngressBytesPerSec',
        'north_south_egress_bytes_per_sec': 'northSouthEgressBytesPerSec',
        'north_south_ingress_packets_per_sec': 'northSouthIngressPacketsPerSec',
        'north_south_egress_packets_per_sec': 'northSouthEgressPacketsPerSec',
        'north_south_ingress_bytes_abs': 'northSouthIngressBytesAbs',
        'north_south_egress_bytes_abs': 'northSouthEgressBytesAbs',
        'north_south_ingress_packets_abs': 'northSouthIngressPacketsAbs',
        'north_south_egress_packets_abs': 'northSouthEgressPacketsAbs',
        'stat_type': 'statType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, north_south_ingress_bytes_per_sec=None, north_south_egress_bytes_per_sec=None, north_south_ingress_packets_per_sec=None, north_south_egress_packets_per_sec=None, north_south_ingress_bytes_abs=None, north_south_egress_bytes_abs=None, north_south_ingress_packets_abs=None, north_south_egress_packets_abs=None, stat_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        StatsQueryResponseBase.__init__(self, stat_type, ext_id, links, tenant_id, *args, **kwargs)
        self.__north_south_ingress_bytes_per_sec = None
        self.__north_south_egress_bytes_per_sec = None
        self.__north_south_ingress_packets_per_sec = None
        self.__north_south_egress_packets_per_sec = None
        self.__north_south_ingress_bytes_abs = None
        self.__north_south_egress_bytes_abs = None
        self.__north_south_ingress_packets_abs = None
        self.__north_south_egress_packets_abs = None
        self.discriminator = None
        if north_south_ingress_bytes_per_sec is not None:
            self.__north_south_ingress_bytes_per_sec = north_south_ingress_bytes_per_sec
        if north_south_egress_bytes_per_sec is not None:
            self.__north_south_egress_bytes_per_sec = north_south_egress_bytes_per_sec
        if north_south_ingress_packets_per_sec is not None:
            self.__north_south_ingress_packets_per_sec = north_south_ingress_packets_per_sec
        if north_south_egress_packets_per_sec is not None:
            self.__north_south_egress_packets_per_sec = north_south_egress_packets_per_sec
        if north_south_ingress_bytes_abs is not None:
            self.__north_south_ingress_bytes_abs = north_south_ingress_bytes_abs
        if north_south_egress_bytes_abs is not None:
            self.__north_south_egress_bytes_abs = north_south_egress_bytes_abs
        if north_south_ingress_packets_abs is not None:
            self.__north_south_ingress_packets_abs = north_south_ingress_packets_abs
        if north_south_egress_packets_abs is not None:
            self.__north_south_egress_packets_abs = north_south_egress_packets_abs

    def _initialize_object_type(self):
        return 'networking.v4.stats.VpcNsStats'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def north_south_ingress_bytes_per_sec(self):
        """
        VPC North-South string array of ingress BPS values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_ingress_bytes_per_sec

    @north_south_ingress_bytes_per_sec.setter
    def north_south_ingress_bytes_per_sec(self, north_south_ingress_bytes_per_sec):

        self.__north_south_ingress_bytes_per_sec = north_south_ingress_bytes_per_sec

    @property
    def north_south_egress_bytes_per_sec(self):
        """
        VPC North-South string array of egress BPS values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_egress_bytes_per_sec

    @north_south_egress_bytes_per_sec.setter
    def north_south_egress_bytes_per_sec(self, north_south_egress_bytes_per_sec):

        self.__north_south_egress_bytes_per_sec = north_south_egress_bytes_per_sec

    @property
    def north_south_ingress_packets_per_sec(self):
        """
        VPC North-South string array of ingress PPS values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_ingress_packets_per_sec

    @north_south_ingress_packets_per_sec.setter
    def north_south_ingress_packets_per_sec(self, north_south_ingress_packets_per_sec):

        self.__north_south_ingress_packets_per_sec = north_south_ingress_packets_per_sec

    @property
    def north_south_egress_packets_per_sec(self):
        """
        VPC North-South string array of egress PPS values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_egress_packets_per_sec

    @north_south_egress_packets_per_sec.setter
    def north_south_egress_packets_per_sec(self, north_south_egress_packets_per_sec):

        self.__north_south_egress_packets_per_sec = north_south_egress_packets_per_sec

    @property
    def north_south_ingress_bytes_abs(self):
        """
        VPC North-South string array of ingress absolute bytes values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_ingress_bytes_abs

    @north_south_ingress_bytes_abs.setter
    def north_south_ingress_bytes_abs(self, north_south_ingress_bytes_abs):

        self.__north_south_ingress_bytes_abs = north_south_ingress_bytes_abs

    @property
    def north_south_egress_bytes_abs(self):
        """
        VPC North-South string array of egress absolute bytes values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_egress_bytes_abs

    @north_south_egress_bytes_abs.setter
    def north_south_egress_bytes_abs(self, north_south_egress_bytes_abs):

        self.__north_south_egress_bytes_abs = north_south_egress_bytes_abs

    @property
    def north_south_ingress_packets_abs(self):
        """
        VPC North-South string array of ingress absolute packets values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_ingress_packets_abs

    @north_south_ingress_packets_abs.setter
    def north_south_ingress_packets_abs(self, north_south_ingress_packets_abs):

        self.__north_south_ingress_packets_abs = north_south_ingress_packets_abs

    @property
    def north_south_egress_packets_abs(self):
        """
        VPC North-South string array of egress absolute packets values

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__north_south_egress_packets_abs

    @north_south_egress_packets_abs.setter
    def north_south_egress_packets_abs(self, north_south_egress_packets_abs):

        self.__north_south_egress_packets_abs = north_south_egress_packets_abs

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VpcNsStats, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpcNsStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_networking_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.ExternalSubnet import ExternalSubnet  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.IPSubnet import IPSubnet  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NetworkingBaseModel import NetworkingBaseModel  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.VpcDhcpOptions import VpcDhcpOptions  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.VpcType import VpcType  # noqa: F401,E501

class Vpc(NetworkingBaseModel):

    """Schema for Virtual Private Cloud (VPC).

    :param name: (:attr:`name`) Name of the VPC.
    :type name: 
     max=128 chars
    
    :param description: (:attr:`description`) Description of the VPC.
    :type description: 
     max=1000 chars
    
    :param vpc_type: (:attr:`vpc_type`) 
    :type vpc_type: 
    
    
    :param common_dhcp_options: (:attr:`common_dhcp_options`) 
    :type common_dhcp_options: 
    
    
    :param snat_ips: (:attr:`snat_ips`) List of IP Addresses used for SNAT.
    :type snat_ips: 
    
    
    :param external_subnets: (:attr:`external_subnets`) List of external subnets that the VPC is attached to.
    :type external_subnets: 
    
    
    :param external_routing_domain_reference: (:attr:`external_routing_domain_reference`) External routing domain associated with this route table
    :type external_routing_domain_reference: 
    
    
    :param externally_routable_prefixes: (:attr:`externally_routable_prefixes`) CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.
    :type externally_routable_prefixes: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'vpc_type': 'networking.v4.config.VpcType',
        'common_dhcp_options': 'networking.v4.config.VpcDhcpOptions',
        'snat_ips': 'list[common.v1.config.IPAddress]',
        'external_subnets': 'list[networking.v4.config.ExternalSubnet]',
        'external_routing_domain_reference': 'str',
        'externally_routable_prefixes': 'list[networking.v4.config.IPSubnet]',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'vpc_type': 'vpcType',
        'common_dhcp_options': 'commonDhcpOptions',
        'snat_ips': 'snatIps',
        'external_subnets': 'externalSubnets',
        'external_routing_domain_reference': 'externalRoutingDomainReference',
        'externally_routable_prefixes': 'externallyRoutablePrefixes',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, vpc_type=None, common_dhcp_options=None, snat_ips=None, external_subnets=None, external_routing_domain_reference=None, externally_routable_prefixes=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        NetworkingBaseModel.__init__(self, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__vpc_type = None
        self.__common_dhcp_options = None
        self.__snat_ips = None
        self.__external_subnets = None
        self.__external_routing_domain_reference = None
        self.__externally_routable_prefixes = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if vpc_type is not None:
            self.__vpc_type = vpc_type
        if common_dhcp_options is not None:
            self.__common_dhcp_options = common_dhcp_options
        if snat_ips is not None:
            self.__snat_ips = snat_ips
        if external_subnets is not None:
            self.__external_subnets = external_subnets
        if external_routing_domain_reference is not None:
            self.__external_routing_domain_reference = external_routing_domain_reference
        if externally_routable_prefixes is not None:
            self.__externally_routable_prefixes = externally_routable_prefixes

    def _initialize_object_type(self):
        return 'networking.v4.config.Vpc'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the VPC.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the VPC.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def vpc_type(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.VpcType`
        """  # noqa: E501
        return self.__vpc_type

    @vpc_type.setter
    def vpc_type(self, vpc_type):

        self.__vpc_type = vpc_type

    @property
    def common_dhcp_options(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.VpcDhcpOptions`
        """  # noqa: E501
        return self.__common_dhcp_options

    @common_dhcp_options.setter
    def common_dhcp_options(self, common_dhcp_options):

        self.__common_dhcp_options = common_dhcp_options

    @property
    def snat_ips(self):
        """
        List of IP Addresses used for SNAT.

        :type:
             list[ :class:`~ntnx_networking_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__snat_ips

    @snat_ips.setter
    def snat_ips(self, snat_ips):

        self.__snat_ips = snat_ips

    @property
    def external_subnets(self):
        """
        List of external subnets that the VPC is attached to.

        :type:
             list[ :class:`~ntnx_networking_py_client.models.networking.v4.config.ExternalSubnet` ]
        """  # noqa: E501
        return self.__external_subnets

    @external_subnets.setter
    def external_subnets(self, external_subnets):

        self.__external_subnets = external_subnets

    @property
    def external_routing_domain_reference(self):
        """
        External routing domain associated with this route table

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__external_routing_domain_reference

    @external_routing_domain_reference.setter
    def external_routing_domain_reference(self, external_routing_domain_reference):
        if external_routing_domain_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', external_routing_domain_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `external_routing_domain_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__external_routing_domain_reference = external_routing_domain_reference

    @property
    def externally_routable_prefixes(self):
        """
        CIDR blocks from the VPC which can talk externally without performing NAT. This is applicable when connecting to external subnets which have disabled NAT.

        :type:
             list[ :class:`~ntnx_networking_py_client.models.networking.v4.config.IPSubnet` ]
        """  # noqa: E501
        return self.__externally_routable_prefixes

    @externally_routable_prefixes.setter
    def externally_routable_prefixes(self, externally_routable_prefixes):

        self.__externally_routable_prefixes = externally_routable_prefixes

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Vpc, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vpc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


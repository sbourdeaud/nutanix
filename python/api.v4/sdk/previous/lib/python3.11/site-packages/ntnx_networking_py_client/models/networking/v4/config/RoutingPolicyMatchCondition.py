# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_networking_py_client.models
from ntnx_networking_py_client.models.OneOfnetworking.v4.config.RoutingPolicyMatchConditionprotocol_parameters import RoutingPolicyMatchConditionprotocol_parameters  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.AddressTypeObject import AddressTypeObject  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.ProtocolType import ProtocolType  # noqa: F401,E501

class RoutingPolicyMatchCondition(object):

    """Match condition for the traffic that is entering the VPC.

    :param source: (:attr:`source`) 
    :type source: required
    
    
    :param destination: (:attr:`destination`) 
    :type destination: required
    
    
    :param protocol_type: (:attr:`protocol_type`) 
    :type protocol_type: required
    
    
    :param protocol_parameters: (:attr:`protocol_parameters`) Protocol parameters of the traffic that is exiting/leaving the VPC.
    :type protocol_parameters: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'source': 'networking.v4.config.AddressTypeObject',
        'destination': 'networking.v4.config.AddressTypeObject',
        'protocol_type': 'networking.v4.config.ProtocolType',
        'protocol_parameters': 'OneOfnetworking.v4.config.RoutingPolicyMatchConditionprotocol_parameters',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'source': 'source',
        'destination': 'destination',
        'protocol_type': 'protocolType',
        'protocol_parameters': 'protocolParameters',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, source=None, destination=None, protocol_type=None, protocol_parameters=None, *args, **kwargs):  # noqa: E501
        self.__source = None
        self.__destination = None
        self.__protocol_type = None
        self.__protocol_parameters = None
        self.discriminator = None
        self.__source = source
        self.__destination = destination
        self.__protocol_type = protocol_type
        if protocol_parameters is not None:
            self.__protocol_parameters = protocol_parameters
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.RoutingPolicyMatchCondition'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def source(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.AddressTypeObject`
        """  # noqa: E501
        return self.__source

    @source.setter
    def source(self, source):
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self.__source = source

    @property
    def destination(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.AddressTypeObject`
        """  # noqa: E501
        return self.__destination

    @destination.setter
    def destination(self, destination):
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self.__destination = destination

    @property
    def protocol_type(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.ProtocolType`
        """  # noqa: E501
        return self.__protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        if protocol_type is None:
            raise ValueError("Invalid value for `protocol_type`, must not be `None`")  # noqa: E501

        self.__protocol_type = protocol_type

    @property
    def protocol_parameters(self):
        """
        Protocol parameters of the traffic that is exiting/leaving the VPC.

        :type:
                :class:`~ntnx_networking_py_client.models.networking.v4.config.LayerFourProtocolObject` | 
                :class:`~ntnx_networking_py_client.models.networking.v4.config.ICMPObject` | 
                :class:`~ntnx_networking_py_client.models.networking.v4.config.ProtocolNumberObject`
        """  # noqa: E501
        return self.__protocol_parameters

    @protocol_parameters.setter
    def protocol_parameters(self, protocol_parameters):

        self.__protocol_parameters = protocol_parameters

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_networking_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RoutingPolicyMatchCondition, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingPolicyMatchCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.networking.v4.config.IPv4Subnet import IPv4Subnet  # noqa: F401,E501

class Host(object):

    """Input body to configure hosts

    :param ext_id: (:attr:`ext_id`) Reference to the host
    :type ext_id: required
    
    
    :param internal_bridge_name: (:attr:`internal_bridge_name`) Internal bridge name as br0
    :type internal_bridge_name: 
     max=128 chars
    
    :param host_nics: (:attr:`host_nics`) Host NIC array
    :type host_nics: 
    
    
    :param ip_address: (:attr:`ip_address`) 
    :type ip_address: 
    
    
    :param route_table: (:attr:`route_table`) Internal route table number for the routing rules associated with the IP address on this host
    :type route_table: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'internal_bridge_name': 'str',
        'host_nics': 'list[str]',
        'ip_address': 'networking.v4.config.IPv4Subnet',
        'route_table': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'internal_bridge_name': 'internalBridgeName',
        'host_nics': 'hostNics',
        'ip_address': 'ipAddress',
        'route_table': 'routeTable',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, internal_bridge_name=None, host_nics=None, ip_address=None, route_table=None, *args, **kwargs):  # noqa: E501
        self.__ext_id = None
        self.__internal_bridge_name = None
        self.__host_nics = None
        self.__ip_address = None
        self.__route_table = None
        self.discriminator = None
        self.__ext_id = ext_id
        if internal_bridge_name is not None:
            self.__internal_bridge_name = internal_bridge_name
        if host_nics is not None:
            self.__host_nics = host_nics
        if ip_address is not None:
            self.__ip_address = ip_address
        if route_table is not None:
            self.__route_table = route_table
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.Host'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ext_id(self):
        """
        Reference to the host

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        if ext_id is None:
            raise ValueError("Invalid value for `ext_id`, must not be `None`")  # noqa: E501
        if ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__ext_id = ext_id

    @property
    def internal_bridge_name(self):
        """
        Internal bridge name as br0

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__internal_bridge_name

    @internal_bridge_name.setter
    def internal_bridge_name(self, internal_bridge_name):
        if internal_bridge_name is not None and len(internal_bridge_name) > 128:
            raise ValueError("Invalid value for `internal_bridge_name`, length must be less than or equal to `128`")  # noqa: E501

        self.__internal_bridge_name = internal_bridge_name

    @property
    def host_nics(self):
        """
        Host NIC array

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__host_nics

    @host_nics.setter
    def host_nics(self, host_nics):

        self.__host_nics = host_nics

    @property
    def ip_address(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.IPv4Subnet`
        """  # noqa: E501
        return self.__ip_address

    @ip_address.setter
    def ip_address(self, ip_address):

        self.__ip_address = ip_address

    @property
    def route_table(self):
        """
        Internal route table number for the routing rules associated with the IP address on this host

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__route_table

    @route_table.setter
    def route_table(self, route_table):

        self.__route_table = route_table

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Host, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


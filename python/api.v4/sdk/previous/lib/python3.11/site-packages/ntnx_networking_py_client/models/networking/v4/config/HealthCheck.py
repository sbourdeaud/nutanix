# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class HealthCheck(object):

    """Health check configuration for the load balancer session.

    :param interval_secs: (:attr:`interval_secs`) The interval, in seconds, between health checks. (**Default** 5)
    :type interval_secs: 
    
     min=1, max=65535
    :param timeout_secs: (:attr:`timeout_secs`) The time, in seconds, after which a health check times out. (**Default** 2)
    :type timeout_secs: 
    
     min=1, max=65535
    :param success_threshold: (:attr:`success_threshold`) The number of successful checks after which the target is considered healthy. (**Default** 3)
    :type success_threshold: 
    
     min=1, max=64
    :param failure_threshold: (:attr:`failure_threshold`) The number of failure checks after which the target is considered unhealthy. (**Default** 3)
    :type failure_threshold: 
    
     min=1, max=64

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'interval_secs': 'int',
        'timeout_secs': 'int',
        'success_threshold': 'int',
        'failure_threshold': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'interval_secs': 'intervalSecs',
        'timeout_secs': 'timeoutSecs',
        'success_threshold': 'successThreshold',
        'failure_threshold': 'failureThreshold',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, interval_secs=5, timeout_secs=2, success_threshold=3, failure_threshold=3, *args, **kwargs):  # noqa: E501
        self.__interval_secs = None
        self.__timeout_secs = None
        self.__success_threshold = None
        self.__failure_threshold = None
        self.discriminator = None
        if interval_secs is not None:
            self.__interval_secs = interval_secs
        if timeout_secs is not None:
            self.__timeout_secs = timeout_secs
        if success_threshold is not None:
            self.__success_threshold = success_threshold
        if failure_threshold is not None:
            self.__failure_threshold = failure_threshold
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.HealthCheck'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def interval_secs(self):
        """
        The interval, in seconds, between health checks.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__interval_secs

    @interval_secs.setter
    def interval_secs(self, interval_secs):
        if interval_secs is not None and interval_secs > 65535:  # noqa: E501
            raise ValueError("Invalid value for `interval_secs`, must be a value less than or equal to `65535`")  # noqa: E501
        if interval_secs is not None and interval_secs < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval_secs`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__interval_secs = interval_secs

    @property
    def timeout_secs(self):
        """
        The time, in seconds, after which a health check times out.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__timeout_secs

    @timeout_secs.setter
    def timeout_secs(self, timeout_secs):
        if timeout_secs is not None and timeout_secs > 65535:  # noqa: E501
            raise ValueError("Invalid value for `timeout_secs`, must be a value less than or equal to `65535`")  # noqa: E501
        if timeout_secs is not None and timeout_secs < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout_secs`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__timeout_secs = timeout_secs

    @property
    def success_threshold(self):
        """
        The number of successful checks after which the target is considered healthy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__success_threshold

    @success_threshold.setter
    def success_threshold(self, success_threshold):
        if success_threshold is not None and success_threshold > 64:  # noqa: E501
            raise ValueError("Invalid value for `success_threshold`, must be a value less than or equal to `64`")  # noqa: E501
        if success_threshold is not None and success_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `success_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__success_threshold = success_threshold

    @property
    def failure_threshold(self):
        """
        The number of failure checks after which the target is considered unhealthy.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__failure_threshold

    @failure_threshold.setter
    def failure_threshold(self, failure_threshold):
        if failure_threshold is not None and failure_threshold > 64:  # noqa: E501
            raise ValueError("Invalid value for `failure_threshold`, must be a value less than or equal to `64`")  # noqa: E501
        if failure_threshold is not None and failure_threshold < 1:  # noqa: E501
            raise ValueError("Invalid value for `failure_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__failure_threshold = failure_threshold

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HealthCheck, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


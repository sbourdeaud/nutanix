# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NetworkingBaseModel import NetworkingBaseModel  # noqa: F401,E501

class VpcVirtualSwitchMapping(NetworkingBaseModel):

    """

    :param cluster_uuids: (:attr:`cluster_uuids`) UUID of the cluster.
    :type cluster_uuids: 
    
    
    :param virtual_switch_uuid: (:attr:`virtual_switch_uuid`) UUID of the virtual switch.
    :type virtual_switch_uuid: required
    
    
    :param is_all_traffic_permitted: (:attr:`is_all_traffic_permitted`) Whether to permit all traffic through virtual switch or only the ICMP and statistics collection requests.
    :type is_all_traffic_permitted: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_uuids': 'list[str]',
        'virtual_switch_uuid': 'str',
        'is_all_traffic_permitted': 'bool',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_uuids': 'clusterUuids',
        'virtual_switch_uuid': 'virtualSwitchUuid',
        'is_all_traffic_permitted': 'isAllTrafficPermitted',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_uuids=None, virtual_switch_uuid=None, is_all_traffic_permitted=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        NetworkingBaseModel.__init__(self, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_uuids = None
        self.__virtual_switch_uuid = None
        self.__is_all_traffic_permitted = None
        self.discriminator = None
        if cluster_uuids is not None:
            self.__cluster_uuids = cluster_uuids
        self.__virtual_switch_uuid = virtual_switch_uuid
        if is_all_traffic_permitted is not None:
            self.__is_all_traffic_permitted = is_all_traffic_permitted

    def _initialize_object_type(self):
        return 'networking.v4.config.VpcVirtualSwitchMapping'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_uuids(self):
        """
        UUID of the cluster.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__cluster_uuids

    @cluster_uuids.setter
    def cluster_uuids(self, cluster_uuids):

        self.__cluster_uuids = cluster_uuids

    @property
    def virtual_switch_uuid(self):
        """
        UUID of the virtual switch.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__virtual_switch_uuid

    @virtual_switch_uuid.setter
    def virtual_switch_uuid(self, virtual_switch_uuid):
        if virtual_switch_uuid is None:
            raise ValueError("Invalid value for `virtual_switch_uuid`, must not be `None`")  # noqa: E501
        if virtual_switch_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', virtual_switch_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `virtual_switch_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__virtual_switch_uuid = virtual_switch_uuid

    @property
    def is_all_traffic_permitted(self):
        """
        Whether to permit all traffic through virtual switch or only the ICMP and statistics collection requests.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_all_traffic_permitted

    @is_all_traffic_permitted.setter
    def is_all_traffic_permitted(self, is_all_traffic_permitted):

        self.__is_all_traffic_permitted = is_all_traffic_permitted

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VpcVirtualSwitchMapping, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpcVirtualSwitchMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


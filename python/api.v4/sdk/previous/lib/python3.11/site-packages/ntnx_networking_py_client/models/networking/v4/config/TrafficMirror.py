# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NetworkingBaseModel import NetworkingBaseModel  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.TrafficMirrorPort import TrafficMirrorPort  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.TrafficMirrorSourcePort import TrafficMirrorSourcePort  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.TrafficMirrorState import TrafficMirrorState  # noqa: F401,E501

class TrafficMirror(NetworkingBaseModel):

    """Mirror network traffic from a set of source ports, to a set of destination ports. 

    :param name: (:attr:`name`) Name of the session.
    :type name: 
     max=128 chars
    
    :param description: (:attr:`description`) Description of the session.
    :type description: 
     max=1000 chars
    
    :param source_list: (:attr:`source_list`) List of source ports of the session. Maximum of 4 source ports are allowed per session. Each session should have at least 1 source port.
    :type source_list: 
    
    
    :param destination_list: (:attr:`destination_list`) List of destination ports of the session. Maximum of 2 destination ports are allowed per session. Each session should have at least 1 destination port.
    :type destination_list: 
    
    
    :param is_enabled: (:attr:`is_enabled`) Indicates whether the port mirroring session is enabled or not. (**Default** True)
    :type is_enabled: 
    
    
    :param cluster_reference_list: (:attr:`cluster_reference_list`) List of cluster UUIDs that are configured for this session. Currently, only 1 cluster is allowed to participate in a session.
    :type cluster_reference_list: 
    
    
    :param host_reference_list: (:attr:`host_reference_list`) List of host UUIDs that are configured for this session. Currently, only 1 host is allowed to participate in a session.
    :type host_reference_list: 
    
    
    :param virtual_switch_reference: (:attr:`virtual_switch_reference`) Traffic mirror virtual switch reference to use for Remote SPAN.
    :type virtual_switch_reference: 
    
    
    :param state: (:attr:`state`) 
    :type state: 
    
    
    :param state_message: (:attr:`state_message`) Traffic mirror state message.
    :type state_message: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'source_list': 'list[networking.v4.config.TrafficMirrorSourcePort]',
        'destination_list': 'list[networking.v4.config.TrafficMirrorPort]',
        'is_enabled': 'bool',
        'cluster_reference_list': 'list[str]',
        'host_reference_list': 'list[str]',
        'virtual_switch_reference': 'str',
        'state': 'networking.v4.config.TrafficMirrorState',
        'state_message': 'str',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'source_list': 'sourceList',
        'destination_list': 'destinationList',
        'is_enabled': 'isEnabled',
        'cluster_reference_list': 'clusterReferenceList',
        'host_reference_list': 'hostReferenceList',
        'virtual_switch_reference': 'virtualSwitchReference',
        'state': 'state',
        'state_message': 'stateMessage',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, source_list=None, destination_list=None, is_enabled=True, cluster_reference_list=None, host_reference_list=None, virtual_switch_reference=None, state=None, state_message=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        NetworkingBaseModel.__init__(self, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__source_list = None
        self.__destination_list = None
        self.__is_enabled = None
        self.__cluster_reference_list = None
        self.__host_reference_list = None
        self.__virtual_switch_reference = None
        self.__state = None
        self.__state_message = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if source_list is not None:
            self.__source_list = source_list
        if destination_list is not None:
            self.__destination_list = destination_list
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        if cluster_reference_list is not None:
            self.__cluster_reference_list = cluster_reference_list
        if host_reference_list is not None:
            self.__host_reference_list = host_reference_list
        if virtual_switch_reference is not None:
            self.__virtual_switch_reference = virtual_switch_reference
        if state is not None:
            self.__state = state
        if state_message is not None:
            self.__state_message = state_message

    def _initialize_object_type(self):
        return 'networking.v4.config.TrafficMirror'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the session.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the session.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def source_list(self):
        """
        List of source ports of the session. Maximum of 4 source ports are allowed per session. Each session should have at least 1 source port.

        :type:
             list[ :class:`~ntnx_networking_py_client.models.networking.v4.config.TrafficMirrorSourcePort` ]
        """  # noqa: E501
        return self.__source_list

    @source_list.setter
    def source_list(self, source_list):

        self.__source_list = source_list

    @property
    def destination_list(self):
        """
        List of destination ports of the session. Maximum of 2 destination ports are allowed per session. Each session should have at least 1 destination port.

        :type:
             list[ :class:`~ntnx_networking_py_client.models.networking.v4.config.TrafficMirrorPort` ]
        """  # noqa: E501
        return self.__destination_list

    @destination_list.setter
    def destination_list(self, destination_list):

        self.__destination_list = destination_list

    @property
    def is_enabled(self):
        """
        Indicates whether the port mirroring session is enabled or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def cluster_reference_list(self):
        """
        List of cluster UUIDs that are configured for this session. Currently, only 1 cluster is allowed to participate in a session.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__cluster_reference_list

    @cluster_reference_list.setter
    def cluster_reference_list(self, cluster_reference_list):

        self.__cluster_reference_list = cluster_reference_list

    @property
    def host_reference_list(self):
        """
        List of host UUIDs that are configured for this session. Currently, only 1 host is allowed to participate in a session.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__host_reference_list

    @host_reference_list.setter
    def host_reference_list(self, host_reference_list):

        self.__host_reference_list = host_reference_list

    @property
    def virtual_switch_reference(self):
        """
        Traffic mirror virtual switch reference to use for Remote SPAN.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__virtual_switch_reference

    @virtual_switch_reference.setter
    def virtual_switch_reference(self, virtual_switch_reference):
        if virtual_switch_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', virtual_switch_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `virtual_switch_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__virtual_switch_reference = virtual_switch_reference

    @property
    def state(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.TrafficMirrorState`
        """  # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):

        self.__state = state

    @property
    def state_message(self):
        """
        Traffic mirror state message.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__state_message

    @state_message.setter
    def state_message(self, state_message):

        self.__state_message = state_message

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TrafficMirror, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficMirror):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


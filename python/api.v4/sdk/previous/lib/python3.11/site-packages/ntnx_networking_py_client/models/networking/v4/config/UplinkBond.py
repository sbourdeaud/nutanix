# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NetworkingBaseModel import NetworkingBaseModel  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.UplinkBondLacpStatus import UplinkBondLacpStatus  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.UplinkBondType import UplinkBondType  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.UplinkBondVirtualSwitchInfo import UplinkBondVirtualSwitchInfo  # noqa: F401,E501

class UplinkBond(NetworkingBaseModel):

    """Group host-NICs to function as a singular entity

    :param name: (:attr:`name`) Name of the bond
    :type name: 
     max=128 chars
    
    :param host_nic_references: (:attr:`host_nic_references`) List of host-NIC UUIDs in this bond
    :type host_nic_references: 
    
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param lacp_status: (:attr:`lacp_status`) 
    :type lacp_status: 
    
    
    :param cluster_reference: (:attr:`cluster_reference`) UUID of Prism Element cluster that the host belongs to
    :type cluster_reference: 
    
    
    :param host_reference: (:attr:`host_reference`) Host UUID for the bond
    :type host_reference: 
    
    
    :param virtual_switch_info: (:attr:`virtual_switch_info`) 
    :type virtual_switch_info: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'host_nic_references': 'list[str]',
        'type': 'networking.v4.config.UplinkBondType',
        'lacp_status': 'networking.v4.config.UplinkBondLacpStatus',
        'cluster_reference': 'str',
        'host_reference': 'str',
        'virtual_switch_info': 'networking.v4.config.UplinkBondVirtualSwitchInfo',
        'metadata': 'common.v1.config.Metadata',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'host_nic_references': 'hostNicReferences',
        'type': 'type',
        'lacp_status': 'lacpStatus',
        'cluster_reference': 'clusterReference',
        'host_reference': 'hostReference',
        'virtual_switch_info': 'virtualSwitchInfo',
        'metadata': 'metadata',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, host_nic_references=None, type=None, lacp_status=None, cluster_reference=None, host_reference=None, virtual_switch_info=None, metadata=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        NetworkingBaseModel.__init__(self, metadata, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__host_nic_references = None
        self.__type = None
        self.__lacp_status = None
        self.__cluster_reference = None
        self.__host_reference = None
        self.__virtual_switch_info = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if host_nic_references is not None:
            self.__host_nic_references = host_nic_references
        if type is not None:
            self.__type = type
        if lacp_status is not None:
            self.__lacp_status = lacp_status
        if cluster_reference is not None:
            self.__cluster_reference = cluster_reference
        if host_reference is not None:
            self.__host_reference = host_reference
        if virtual_switch_info is not None:
            self.__virtual_switch_info = virtual_switch_info

    def _initialize_object_type(self):
        return 'networking.v4.config.UplinkBond'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the bond

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self.__name = name

    @property
    def host_nic_references(self):
        """
        List of host-NIC UUIDs in this bond

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__host_nic_references

    @host_nic_references.setter
    def host_nic_references(self, host_nic_references):

        self.__host_nic_references = host_nic_references

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.UplinkBondType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def lacp_status(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.UplinkBondLacpStatus`
        """  # noqa: E501
        return self.__lacp_status

    @lacp_status.setter
    def lacp_status(self, lacp_status):

        self.__lacp_status = lacp_status

    @property
    def cluster_reference(self):
        """
        UUID of Prism Element cluster that the host belongs to

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_reference

    @cluster_reference.setter
    def cluster_reference(self, cluster_reference):
        if cluster_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_reference = cluster_reference

    @property
    def host_reference(self):
        """
        Host UUID for the bond

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__host_reference

    @host_reference.setter
    def host_reference(self, host_reference):
        if host_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', host_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `host_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__host_reference = host_reference

    @property
    def virtual_switch_info(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.UplinkBondVirtualSwitchInfo`
        """  # noqa: E501
        return self.__virtual_switch_info

    @virtual_switch_info.setter
    def virtual_switch_info(self, virtual_switch_info):

        self.__virtual_switch_info = virtual_switch_info

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(UplinkBond, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UplinkBond):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.FlowGatewayStatus import FlowGatewayStatus  # noqa: F401,E501

class FlowGatewayKeepAliveRequestSpec(object):

    """Request model for Flow Gateway Keepalive.

    :param chassis_uuid: (:attr:`chassis_uuid`) Chassis UUID of the Atlas Flow Gateway.
    :type chassis_uuid: required
    
    
    :param gateway_status: (:attr:`gateway_status`) 
    :type gateway_status: 
    
    
    :param ovn_controller_version: (:attr:`ovn_controller_version`) Version of the OVN controller
    :type ovn_controller_version: 
    
    
    :param eni_primary_ip_list: (:attr:`eni_primary_ip_list`) List of external network interface's primary IP addresses corresponding to the external subnet bindings in the flow gateway.
    :type eni_primary_ip_list: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'chassis_uuid': 'str',
        'gateway_status': 'networking.v4.config.FlowGatewayStatus',
        'ovn_controller_version': 'str',
        'eni_primary_ip_list': 'list[common.v1.config.IPAddress]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'chassis_uuid': 'chassisUuid',
        'gateway_status': 'gatewayStatus',
        'ovn_controller_version': 'ovnControllerVersion',
        'eni_primary_ip_list': 'eniPrimaryIpList',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, chassis_uuid=None, gateway_status=None, ovn_controller_version=None, eni_primary_ip_list=None, *args, **kwargs):  # noqa: E501
        self.__chassis_uuid = None
        self.__gateway_status = None
        self.__ovn_controller_version = None
        self.__eni_primary_ip_list = None
        self.discriminator = None
        self.__chassis_uuid = chassis_uuid
        if gateway_status is not None:
            self.__gateway_status = gateway_status
        if ovn_controller_version is not None:
            self.__ovn_controller_version = ovn_controller_version
        if eni_primary_ip_list is not None:
            self.__eni_primary_ip_list = eni_primary_ip_list
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.FlowGatewayKeepAliveRequestSpec'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def chassis_uuid(self):
        """
        Chassis UUID of the Atlas Flow Gateway.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__chassis_uuid

    @chassis_uuid.setter
    def chassis_uuid(self, chassis_uuid):
        if chassis_uuid is None:
            raise ValueError("Invalid value for `chassis_uuid`, must not be `None`")  # noqa: E501
        if chassis_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', chassis_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `chassis_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__chassis_uuid = chassis_uuid

    @property
    def gateway_status(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.FlowGatewayStatus`
        """  # noqa: E501
        return self.__gateway_status

    @gateway_status.setter
    def gateway_status(self, gateway_status):

        self.__gateway_status = gateway_status

    @property
    def ovn_controller_version(self):
        """
        Version of the OVN controller

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ovn_controller_version

    @ovn_controller_version.setter
    def ovn_controller_version(self, ovn_controller_version):
        if ovn_controller_version is not None and not re.search('^(\\d+\\.)?(\\d+\\.)?(\\d+)$', ovn_controller_version):  # noqa: E501
            raise ValueError(r"Invalid value for `ovn_controller_version`, must be a follow pattern or equal to `/^(\\d+\\.)?(\\d+\\.)?(\\d+)$/`")  # noqa: E501

        self.__ovn_controller_version = ovn_controller_version

    @property
    def eni_primary_ip_list(self):
        """
        List of external network interface's primary IP addresses corresponding to the external subnet bindings in the flow gateway.

        :type:
             list[ :class:`~ntnx_networking_py_client.models.common.v1.config.IPAddress` ]
        """  # noqa: E501
        return self.__eni_primary_ip_list

    @eni_primary_ip_list.setter
    def eni_primary_ip_list(self, eni_primary_ip_list):

        self.__eni_primary_ip_list = eni_primary_ip_list

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(FlowGatewayKeepAliveRequestSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowGatewayKeepAliveRequestSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


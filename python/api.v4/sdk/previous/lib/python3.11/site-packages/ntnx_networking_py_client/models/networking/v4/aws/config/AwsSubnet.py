# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_networking_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.aws.config.CloudType import CloudType  # noqa: F401,E501

class AwsSubnet(ExternalizableAbstractModel):

    """NC2A Subnet in the given VPC.

    :param vpc_id: (:attr:`vpc_id`)  AWS VPC ID where cluster is deployed.
    :type vpc_id: required
    
    
    :param annotation: (:attr:`annotation`) Annotation string for cloud resources.
    :type annotation: 
    
    
    :param subnet_id: (:attr:`subnet_id`) Cloud subnet Id.
    :type subnet_id: required
    
    
    :param cidr: (:attr:`cidr`) Cloud subnet mask.
    :type cidr: required
    
    
    :param gateway_ip: (:attr:`gateway_ip`) Cloud subnet gateway IP.
    :type gateway_ip: required
    
    
    :param cloud_type: (:attr:`cloud_type`) 
    :type cloud_type: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vpc_id': 'str',
        'annotation': 'str',
        'subnet_id': 'str',
        'cidr': 'str',
        'gateway_ip': 'str',
        'cloud_type': 'networking.v4.aws.config.CloudType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vpc_id': 'vpcId',
        'annotation': 'annotation',
        'subnet_id': 'subnetId',
        'cidr': 'cidr',
        'gateway_ip': 'gatewayIp',
        'cloud_type': 'cloudType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vpc_id=None, annotation=None, subnet_id=None, cidr=None, gateway_ip=None, cloud_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__vpc_id = None
        self.__annotation = None
        self.__subnet_id = None
        self.__cidr = None
        self.__gateway_ip = None
        self.__cloud_type = None
        self.discriminator = None
        self.__vpc_id = vpc_id
        if annotation is not None:
            self.__annotation = annotation
        self.__subnet_id = subnet_id
        self.__cidr = cidr
        self.__gateway_ip = gateway_ip
        self.__cloud_type = cloud_type

    def _initialize_object_type(self):
        return 'networking.v4.aws.config.AwsSubnet'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def vpc_id(self):
        """
         AWS VPC ID where cluster is deployed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")  # noqa: E501

        self.__vpc_id = vpc_id

    @property
    def annotation(self):
        """
        Annotation string for cloud resources.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__annotation

    @annotation.setter
    def annotation(self, annotation):

        self.__annotation = annotation

    @property
    def subnet_id(self):
        """
        Cloud subnet Id.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")  # noqa: E501

        self.__subnet_id = subnet_id

    @property
    def cidr(self):
        """
        Cloud subnet mask.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cidr

    @cidr.setter
    def cidr(self, cidr):
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501
        if cidr is not None and not re.search('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/[0-2]?[0-9]|3[0-2])$', cidr):  # noqa: E501
            raise ValueError(r"Invalid value for `cidr`, must be a follow pattern or equal to `/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/[0-2]?[0-9]|3[0-2])$/`")  # noqa: E501

        self.__cidr = cidr

    @property
    def gateway_ip(self):
        """
        Cloud subnet gateway IP.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        if gateway_ip is None:
            raise ValueError("Invalid value for `gateway_ip`, must not be `None`")  # noqa: E501
        if gateway_ip is not None and not re.search('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', gateway_ip):  # noqa: E501
            raise ValueError(r"Invalid value for `gateway_ip`, must be a follow pattern or equal to `/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/`")  # noqa: E501

        self.__gateway_ip = gateway_ip

    @property
    def cloud_type(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.aws.config.CloudType`
        """  # noqa: E501
        return self.__cloud_type

    @cloud_type.setter
    def cloud_type(self, cloud_type):
        if cloud_type is None:
            raise ValueError("Invalid value for `cloud_type`, must not be `None`")  # noqa: E501

        self.__cloud_type = cloud_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AwsSubnet, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.DomainManagerClusterConfig import DomainManagerClusterConfig  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.DomainManagerNetwork import DomainManagerNetwork  # noqa: F401,E501

class DomainManager(ExternalizableAbstractModel):

    """Domain manager (Prism Central) details.

    :param config: (:attr:`config`) 
    :type config: required
    
    
    :param is_registered_with_hosting_cluster: (:attr:`is_registered_with_hosting_cluster`) Boolean value indicating if the domain manager (Prism Central) is registered with the hosting cluster, that is, Prism Element.
    :type is_registered_with_hosting_cluster: 
    
    
    :param network: (:attr:`network`) 
    :type network: required
    
    
    :param hosting_cluster_ext_id: (:attr:`hosting_cluster_ext_id`) The external identifier of the cluster hosting the domain manager (Prism Central) instance.
    :type hosting_cluster_ext_id: 
    
    
    :param should_enable_high_availability: (:attr:`should_enable_high_availability`) This configuration enables Prism Central to be deployed in scale-out mode. (**Default** False)
    :type should_enable_high_availability: 
    
    
    :param node_ext_ids: (:attr:`node_ext_ids`) Domain manager (Prism Central) nodes external identifier.
    :type node_ext_ids: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'config': 'prism.v4.config.DomainManagerClusterConfig',
        'is_registered_with_hosting_cluster': 'bool',
        'network': 'prism.v4.config.DomainManagerNetwork',
        'hosting_cluster_ext_id': 'str',
        'should_enable_high_availability': 'bool',
        'node_ext_ids': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'config': 'config',
        'is_registered_with_hosting_cluster': 'isRegisteredWithHostingCluster',
        'network': 'network',
        'hosting_cluster_ext_id': 'hostingClusterExtId',
        'should_enable_high_availability': 'shouldEnableHighAvailability',
        'node_ext_ids': 'nodeExtIds',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, config=None, is_registered_with_hosting_cluster=None, network=None, hosting_cluster_ext_id=None, should_enable_high_availability=False, node_ext_ids=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__config = None
        self.__is_registered_with_hosting_cluster = None
        self.__network = None
        self.__hosting_cluster_ext_id = None
        self.__should_enable_high_availability = None
        self.__node_ext_ids = None
        self.discriminator = None
        self.__config = config
        if is_registered_with_hosting_cluster is not None:
            self.__is_registered_with_hosting_cluster = is_registered_with_hosting_cluster
        self.__network = network
        if hosting_cluster_ext_id is not None:
            self.__hosting_cluster_ext_id = hosting_cluster_ext_id
        if should_enable_high_availability is not None:
            self.__should_enable_high_availability = should_enable_high_availability
        if node_ext_ids is not None:
            self.__node_ext_ids = node_ext_ids

    def _initialize_object_type(self):
        return 'prism.v4.config.DomainManager'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def config(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.DomainManagerClusterConfig`
        """  # noqa: E501
        return self.__config

    @config.setter
    def config(self, config):
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self.__config = config

    @property
    def is_registered_with_hosting_cluster(self):
        """
        Boolean value indicating if the domain manager (Prism Central) is registered with the hosting cluster, that is, Prism Element.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_registered_with_hosting_cluster

    @is_registered_with_hosting_cluster.setter
    def is_registered_with_hosting_cluster(self, is_registered_with_hosting_cluster):

        self.__is_registered_with_hosting_cluster = is_registered_with_hosting_cluster

    @property
    def network(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.DomainManagerNetwork`
        """  # noqa: E501
        return self.__network

    @network.setter
    def network(self, network):
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self.__network = network

    @property
    def hosting_cluster_ext_id(self):
        """
        The external identifier of the cluster hosting the domain manager (Prism Central) instance.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hosting_cluster_ext_id

    @hosting_cluster_ext_id.setter
    def hosting_cluster_ext_id(self, hosting_cluster_ext_id):
        if hosting_cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', hosting_cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `hosting_cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__hosting_cluster_ext_id = hosting_cluster_ext_id

    @property
    def should_enable_high_availability(self):
        """
        This configuration enables Prism Central to be deployed in scale-out mode.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_enable_high_availability

    @should_enable_high_availability.setter
    def should_enable_high_availability(self, should_enable_high_availability):

        self.__should_enable_high_availability = should_enable_high_availability

    @property
    def node_ext_ids(self):
        """
        Domain manager (Prism Central) nodes external identifier.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__node_ext_ids

    @node_ext_ids.setter
    def node_ext_ids(self, node_ext_ids):

        self.__node_ext_ids = node_ext_ids

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DomainManager, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.CategoryAssociationSummaryOld import CategoryAssociationSummaryOld  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.CategoryType import CategoryType  # noqa: F401,E501

class CategorySummaryOld(ExternalizableAbstractModel):

    """

    :param fq_name: (:attr:`fq_name`) The fully qualified name of this category. It is unique for each category.<br> It is a read-only field. The service constructs it from the name-parentExtId combination. An example of a fqName would be `Location/Bangalore`, where `Location` is the parent category's name and `Bangalore` is the category name.<br> This field is immutable.<br> 
    :type fq_name: 
     max=64 chars
    
    :param name: (:attr:`name`) The short name of this category. It may not be unique for each category.<br> It is a mandatory field that must be specified inside the post/put request  body.<br> This field is immutable. 
    :type name: required
     max=64 chars
    
    :param parent_ext_id: (:attr:`parent_ext_id`) The parent category of this category (may be null if this category is not part of a hierarchy).<br> Each category can have at most one parent.<br> A parent cannot be deleted until all the children categories are deleted first.<br> Must be specified inside the post/put request body for child categories (if not specified, the service assumes the category to be a parent category).<br> This field is immutable. 
    :type parent_ext_id: 
    
    
    :param user_specified_name: (:attr:`user_specified_name`) The user-specified name is a string that the user can specify; with syntax and semantics controlled by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. Unlike the name of the categories, which are immutable, the user name can be changed by the user to meet their needs. 
    :type user_specified_name: 
     max=64 chars
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param description: (:attr:`description`) A string consisting of the description of the category as defined by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 
    :type description: 
     max=64 chars
    
    :param associations: (:attr:`associations`) 
    :type associations: 
    
    
    :param child_categories: (:attr:`child_categories`) This attribute contains the list of all the categories for which this category is the parent.<br> The parentExtId attributes of each child category is set as the extId of this category.<br> Note that this list only contains the Summary view of each child category. 
    :type child_categories: 
    
    
    :param owner_uuid: (:attr:`owner_uuid`) It is a read-only field inserted into category entity at the time of category creation, and which contains the UUID of the user who created this category. It is used for enabling authorization of a particular kind where the user has no access to view/create/update/delete any categories other than the category created by oneself.
    :type owner_uuid: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'fq_name': 'str',
        'name': 'str',
        'parent_ext_id': 'str',
        'user_specified_name': 'str',
        'type': 'prism.v4.config.CategoryType',
        'description': 'str',
        'associations': 'list[prism.v4.config.CategoryAssociationSummaryOld]',
        'child_categories': 'list[prism.v4.config.CategorySummaryOld]',
        'owner_uuid': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'fq_name': 'fqName',
        'name': 'name',
        'parent_ext_id': 'parentExtId',
        'user_specified_name': 'userSpecifiedName',
        'type': 'type',
        'description': 'description',
        'associations': 'associations',
        'child_categories': 'childCategories',
        'owner_uuid': 'ownerUuid',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, fq_name=None, name=None, parent_ext_id=None, user_specified_name=None, type=None, description=None, associations=None, child_categories=None, owner_uuid=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__fq_name = None
        self.__name = None
        self.__parent_ext_id = None
        self.__user_specified_name = None
        self.__type = None
        self.__description = None
        self.__associations = None
        self.__child_categories = None
        self.__owner_uuid = None
        self.discriminator = None
        if fq_name is not None:
            self.__fq_name = fq_name
        self.__name = name
        if parent_ext_id is not None:
            self.__parent_ext_id = parent_ext_id
        if user_specified_name is not None:
            self.__user_specified_name = user_specified_name
        if type is not None:
            self.__type = type
        if description is not None:
            self.__description = description
        if associations is not None:
            self.__associations = associations
        if child_categories is not None:
            self.__child_categories = child_categories
        if owner_uuid is not None:
            self.__owner_uuid = owner_uuid

    def _initialize_object_type(self):
        return 'prism.v4.config.CategorySummaryOld'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def fq_name(self):
        """
        The fully qualified name of this category. It is unique for each category.<br> It is a read-only field. The service constructs it from the name-parentExtId combination. An example of a fqName would be `Location/Bangalore`, where `Location` is the parent category's name and `Bangalore` is the category name.<br> This field is immutable.<br> 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__fq_name

    @fq_name.setter
    def fq_name(self, fq_name):
        if fq_name is not None and len(fq_name) > 64:
            raise ValueError("Invalid value for `fq_name`, length must be less than or equal to `64`")  # noqa: E501
        if fq_name is not None and not re.search('^(?=.{1,260}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$', fq_name):  # noqa: E501
            raise ValueError(r"Invalid value for `fq_name`, must be a follow pattern or equal to `/^(?=.{1,260}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$/`")  # noqa: E501

        self.__fq_name = fq_name

    @property
    def name(self):
        """
        The short name of this category. It may not be unique for each category.<br> It is a mandatory field that must be specified inside the post/put request  body.<br> This field is immutable. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and not re.search('^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/`")  # noqa: E501

        self.__name = name

    @property
    def parent_ext_id(self):
        """
        The parent category of this category (may be null if this category is not part of a hierarchy).<br> Each category can have at most one parent.<br> A parent cannot be deleted until all the children categories are deleted first.<br> Must be specified inside the post/put request body for child categories (if not specified, the service assumes the category to be a parent category).<br> This field is immutable. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__parent_ext_id

    @parent_ext_id.setter
    def parent_ext_id(self, parent_ext_id):
        if parent_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', parent_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `parent_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__parent_ext_id = parent_ext_id

    @property
    def user_specified_name(self):
        """
        The user-specified name is a string that the user can specify; with syntax and semantics controlled by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. Unlike the name of the categories, which are immutable, the user name can be changed by the user to meet their needs. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__user_specified_name

    @user_specified_name.setter
    def user_specified_name(self, user_specified_name):
        if user_specified_name is not None and len(user_specified_name) > 64:
            raise ValueError("Invalid value for `user_specified_name`, length must be less than or equal to `64`")  # noqa: E501
        if user_specified_name is not None and not re.search('^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$', user_specified_name):  # noqa: E501
            raise ValueError(r"Invalid value for `user_specified_name`, must be a follow pattern or equal to `/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/`")  # noqa: E501

        self.__user_specified_name = user_specified_name

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.CategoryType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def description(self):
        """
        A string consisting of the description of the category as defined by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 64:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `64`")  # noqa: E501
        if description is not None and not re.search('^.{0,512}$', description):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^.{0,512}$/`")  # noqa: E501

        self.__description = description

    @property
    def associations(self):
        """
        

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.CategoryAssociationSummaryOld` ]
        """  # noqa: E501
        return self.__associations

    @associations.setter
    def associations(self, associations):

        self.__associations = associations

    @property
    def child_categories(self):
        """
        This attribute contains the list of all the categories for which this category is the parent.<br> The parentExtId attributes of each child category is set as the extId of this category.<br> Note that this list only contains the Summary view of each child category. 

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.CategorySummaryOld` ]
        """  # noqa: E501
        return self.__child_categories

    @child_categories.setter
    def child_categories(self, child_categories):

        self.__child_categories = child_categories

    @property
    def owner_uuid(self):
        """
        It is a read-only field inserted into category entity at the time of category creation, and which contains the UUID of the user who created this category. It is used for enabling authorization of a particular kind where the user has no access to view/create/update/delete any categories other than the category created by oneself.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__owner_uuid

    @owner_uuid.setter
    def owner_uuid(self, owner_uuid):
        if owner_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owner_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `owner_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owner_uuid = owner_uuid

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(CategorySummaryOld, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategorySummaryOld):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


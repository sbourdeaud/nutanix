# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.AssociationDetail import AssociationDetail  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.AssociationSummary import AssociationSummary  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.CategoryType import CategoryType  # noqa: F401,E501

class Category(ExternalizableAbstractModel):

    """

    :param key: (:attr:`key`) The key of a category when it is represented in `key:value` format.  Constraints applicable when field is given in the payload during create and update: * A string of maxlength of 64 * Character at the start cannot be `$` * Character `/` is not allowed anywhere  It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.<br> This field can't be updated through `updateCategoryById` API. 
    :type key: required
     max=64 chars
    
    :param value: (:attr:`value`) The value of a category when it is represented in `key:value` format.  Constraints applicable when the field is given in the payload during create and update: * A string of max length 64 * Character at the start cannot be `$` * Character `/` is not allowed anywhere  It is a mandatory input field in the payload of `createCategory` and `updateCategoryById` APIs.<br> This field can be updated through `updateCategoryById` API.<br> Updating the value will not change the extId of the category. 
    :type value: required
     max=64 chars
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param description: (:attr:`description`) A string consisting of the description of the category as defined by the user.<br> Description can be optionally provided in the payload of `createCategory` and `updateCategoryById` APIs.<br> Description field can be updated through `updateCategoryById` API.<br> The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 
    :type description: 
    
    
    :param owner_uuid: (:attr:`owner_uuid`) This field contains the UUID of a user who owns the category.<br> This field will be ignored if given in the payload of `createCategory` API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.<br> This field can be updated through `updateCategoryById` API, in which case, should be provided, UUID of a valid user is present in the system.<br> Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.<br> It is used for enabling RBAC access to self-owned categories. 
    :type owner_uuid: 
    
    
    :param associations: (:attr:`associations`) This field gives basic information about resources that are associated with the category.<br> The results present under this field summarize the counts of various kinds of resources associated with the category.<br> For more detailed information about the UUIDs of the resources, please look into the field `detailedAssociations`.<br> This field will be ignored, if given in the payload of `updateCategoryById` or `createCategory` APIs.<br> This field will not be present by default in `listCategories` API, unless the parameter $expand=associations is present in the URL. 
    :type associations: 
    
    
    :param detailed_associations: (:attr:`detailed_associations`) This field gives detailed information about the resources which are associated with the category.<br> The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.<br> This field will be ignored, if given in the payload of `updateCategoryById` or `createCategory` APIs.<br> This field will not be present by default in `listCategories` or `getCategoryById` APIs, unless the parameter $expand=detailedAssociations is present in the URL. 
    :type detailed_associations: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'key': 'str',
        'value': 'str',
        'type': 'prism.v4.config.CategoryType',
        'description': 'str',
        'owner_uuid': 'str',
        'associations': 'list[prism.v4.config.AssociationSummary]',
        'detailed_associations': 'list[prism.v4.config.AssociationDetail]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'key': 'key',
        'value': 'value',
        'type': 'type',
        'description': 'description',
        'owner_uuid': 'ownerUuid',
        'associations': 'associations',
        'detailed_associations': 'detailedAssociations',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, key=None, value=None, type=None, description=None, owner_uuid=None, associations=None, detailed_associations=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__key = None
        self.__value = None
        self.__type = None
        self.__description = None
        self.__owner_uuid = None
        self.__associations = None
        self.__detailed_associations = None
        self.discriminator = None
        self.__key = key
        self.__value = value
        if type is not None:
            self.__type = type
        if description is not None:
            self.__description = description
        if owner_uuid is not None:
            self.__owner_uuid = owner_uuid
        if associations is not None:
            self.__associations = associations
        if detailed_associations is not None:
            self.__detailed_associations = detailed_associations

    def _initialize_object_type(self):
        return 'prism.v4.config.Category'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def key(self):
        """
        The key of a category when it is represented in `key:value` format.  Constraints applicable when field is given in the payload during create and update: * A string of maxlength of 64 * Character at the start cannot be `$` * Character `/` is not allowed anywhere  It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.<br> This field can't be updated through `updateCategoryById` API. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__key

    @key.setter
    def key(self, key):
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        if key is not None and len(key) > 64:
            raise ValueError("Invalid value for `key`, length must be less than or equal to `64`")  # noqa: E501
        if key is not None and not re.search('^[^$\/][^\/]{0,63}$', key):  # noqa: E501
            raise ValueError(r"Invalid value for `key`, must be a follow pattern or equal to `/^[^$\/][^\/]{0,63}$/`")  # noqa: E501

        self.__key = key

    @property
    def value(self):
        """
        The value of a category when it is represented in `key:value` format.  Constraints applicable when the field is given in the payload during create and update: * A string of max length 64 * Character at the start cannot be `$` * Character `/` is not allowed anywhere  It is a mandatory input field in the payload of `createCategory` and `updateCategoryById` APIs.<br> This field can be updated through `updateCategoryById` API.<br> Updating the value will not change the extId of the category. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__value

    @value.setter
    def value(self, value):
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 64:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `64`")  # noqa: E501
        if value is not None and not re.search('^[^$\/][^\/]{0,63}$', value):  # noqa: E501
            raise ValueError(r"Invalid value for `value`, must be a follow pattern or equal to `/^[^$\/][^\/]{0,63}$/`")  # noqa: E501

        self.__value = value

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.CategoryType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def description(self):
        """
        A string consisting of the description of the category as defined by the user.<br> Description can be optionally provided in the payload of `createCategory` and `updateCategoryById` APIs.<br> Description field can be updated through `updateCategoryById` API.<br> The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and not re.search('^.{0,512}$', description):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^.{0,512}$/`")  # noqa: E501

        self.__description = description

    @property
    def owner_uuid(self):
        """
        This field contains the UUID of a user who owns the category.<br> This field will be ignored if given in the payload of `createCategory` API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.<br> This field can be updated through `updateCategoryById` API, in which case, should be provided, UUID of a valid user is present in the system.<br> Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.<br> It is used for enabling RBAC access to self-owned categories. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__owner_uuid

    @owner_uuid.setter
    def owner_uuid(self, owner_uuid):
        if owner_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owner_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `owner_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owner_uuid = owner_uuid

    @property
    def associations(self):
        """
        This field gives basic information about resources that are associated with the category.<br> The results present under this field summarize the counts of various kinds of resources associated with the category.<br> For more detailed information about the UUIDs of the resources, please look into the field `detailedAssociations`.<br> This field will be ignored, if given in the payload of `updateCategoryById` or `createCategory` APIs.<br> This field will not be present by default in `listCategories` API, unless the parameter $expand=associations is present in the URL. 

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.AssociationSummary` ]
        """  # noqa: E501
        return self.__associations

    @associations.setter
    def associations(self, associations):

        self.__associations = associations

    @property
    def detailed_associations(self):
        """
        This field gives detailed information about the resources which are associated with the category.<br> The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.<br> This field will be ignored, if given in the payload of `updateCategoryById` or `createCategory` APIs.<br> This field will not be present by default in `listCategories` or `getCategoryById` APIs, unless the parameter $expand=detailedAssociations is present in the URL. 

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.AssociationDetail` ]
        """  # noqa: E501
        return self.__detailed_associations

    @detailed_associations.setter
    def detailed_associations(self, detailed_associations):

        self.__detailed_associations = detailed_associations

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Category, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.prism.v4.protectpc.PcEndpointCredentials import PcEndpointCredentials  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.protectpc.PcEndpointFlavour import PcEndpointFlavour  # noqa: F401,E501

class PcObjectStoreEndpoint(object):

    """The endpoint of the object store where backup data of Prism Central is present. 

    :param endpoint_address: (:attr:`endpoint_address`) The endpoint address of the object store where backup data of Prism Central is present. 
    :type endpoint_address: 
    
    
    :param endpoint_flavour: (:attr:`endpoint_flavour`) 
    :type endpoint_flavour: 
    
    
    :param endpoint_credentials: (:attr:`endpoint_credentials`) 
    :type endpoint_credentials: 
    
    
    :param rpo_seconds: (:attr:`rpo_seconds`) A RPO value in seconds to be configured. 
    :type rpo_seconds: 
    
    
    :param ip_address_or_domain: (:attr:`ip_address_or_domain`) The ip address or domain of the object store endpoint where backup data of Prism Central is stored. 
    :type ip_address_or_domain: 
    
    
    :param port: (:attr:`port`) The port of the object store endpoint where backup data of Prism Central is stored. 
    :type port: 
    
    
    :param bucket: (:attr:`bucket`) The bucket name of the object store endpoint where backup data of Prism Central is stored. 
    :type bucket: 
    
    
    :param region: (:attr:`region`) The region name of the object store endpoint where backup data of Prism Central is stored.  (**Default** 'us-east-1')
    :type region: 
    
    
    :param skip_tls: (:attr:`skip_tls`) Skip the verification of TLS certificates during communication with object store endpoint.  (**Default** False)
    :type skip_tls: 
    
    
    :param backup_retention_days: (:attr:`backup_retention_days`) Retention days configured for backup in Object Store.      (**Default** 31)
    :type backup_retention_days: 
    
     min=1,

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'endpoint_address': 'str',
        'endpoint_flavour': 'prism.v4.protectpc.PcEndpointFlavour',
        'endpoint_credentials': 'prism.v4.protectpc.PcEndpointCredentials',
        'rpo_seconds': 'int',
        'ip_address_or_domain': 'str',
        'port': 'str',
        'bucket': 'str',
        'region': 'str',
        'skip_tls': 'bool',
        'backup_retention_days': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'endpoint_address': 'endpointAddress',
        'endpoint_flavour': 'endpointFlavour',
        'endpoint_credentials': 'endpointCredentials',
        'rpo_seconds': 'rpoSeconds',
        'ip_address_or_domain': 'ipAddressOrDomain',
        'port': 'port',
        'bucket': 'bucket',
        'region': 'region',
        'skip_tls': 'skipTLS',
        'backup_retention_days': 'backupRetentionDays',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, endpoint_address=None, endpoint_flavour=None, endpoint_credentials=None, rpo_seconds=None, ip_address_or_domain=None, port=None, bucket=None, region='us-east-1', skip_tls=False, backup_retention_days=31, *args, **kwargs):  # noqa: E501
        self.__endpoint_address = None
        self.__endpoint_flavour = None
        self.__endpoint_credentials = None
        self.__rpo_seconds = None
        self.__ip_address_or_domain = None
        self.__port = None
        self.__bucket = None
        self.__region = None
        self.__skip_tls = None
        self.__backup_retention_days = None
        self.discriminator = None
        if endpoint_address is not None:
            self.__endpoint_address = endpoint_address
        if endpoint_flavour is not None:
            self.__endpoint_flavour = endpoint_flavour
        if endpoint_credentials is not None:
            self.__endpoint_credentials = endpoint_credentials
        if rpo_seconds is not None:
            self.__rpo_seconds = rpo_seconds
        if ip_address_or_domain is not None:
            self.__ip_address_or_domain = ip_address_or_domain
        if port is not None:
            self.__port = port
        if bucket is not None:
            self.__bucket = bucket
        if region is not None:
            self.__region = region
        if skip_tls is not None:
            self.__skip_tls = skip_tls
        if backup_retention_days is not None:
            self.__backup_retention_days = backup_retention_days
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.protectpc.PcObjectStoreEndpoint'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def endpoint_address(self):
        """
        The endpoint address of the object store where backup data of Prism Central is present. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__endpoint_address

    @endpoint_address.setter
    def endpoint_address(self, endpoint_address):

        self.__endpoint_address = endpoint_address

    @property
    def endpoint_flavour(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.protectpc.PcEndpointFlavour`
        """  # noqa: E501
        return self.__endpoint_flavour

    @endpoint_flavour.setter
    def endpoint_flavour(self, endpoint_flavour):

        self.__endpoint_flavour = endpoint_flavour

    @property
    def endpoint_credentials(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.protectpc.PcEndpointCredentials`
        """  # noqa: E501
        return self.__endpoint_credentials

    @endpoint_credentials.setter
    def endpoint_credentials(self, endpoint_credentials):

        self.__endpoint_credentials = endpoint_credentials

    @property
    def rpo_seconds(self):
        """
        A RPO value in seconds to be configured. 

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__rpo_seconds

    @rpo_seconds.setter
    def rpo_seconds(self, rpo_seconds):

        self.__rpo_seconds = rpo_seconds

    @property
    def ip_address_or_domain(self):
        """
        The ip address or domain of the object store endpoint where backup data of Prism Central is stored. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ip_address_or_domain

    @ip_address_or_domain.setter
    def ip_address_or_domain(self, ip_address_or_domain):

        self.__ip_address_or_domain = ip_address_or_domain

    @property
    def port(self):
        """
        The port of the object store endpoint where backup data of Prism Central is stored. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):

        self.__port = port

    @property
    def bucket(self):
        """
        The bucket name of the object store endpoint where backup data of Prism Central is stored. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__bucket

    @bucket.setter
    def bucket(self, bucket):

        self.__bucket = bucket

    @property
    def region(self):
        """
        The region name of the object store endpoint where backup data of Prism Central is stored. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__region

    @region.setter
    def region(self, region):

        self.__region = region

    @property
    def skip_tls(self):
        """
        Skip the verification of TLS certificates during communication with object store endpoint. 

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__skip_tls

    @skip_tls.setter
    def skip_tls(self, skip_tls):

        self.__skip_tls = skip_tls

    @property
    def backup_retention_days(self):
        """
        Retention days configured for backup in Object Store.     

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__backup_retention_days

    @backup_retention_days.setter
    def backup_retention_days(self, backup_retention_days):
        if backup_retention_days is not None and backup_retention_days < 1:  # noqa: E501
            raise ValueError("Invalid value for `backup_retention_days`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__backup_retention_days = backup_retention_days

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PcObjectStoreEndpoint, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PcObjectStoreEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


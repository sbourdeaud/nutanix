# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.prism.v4.protectpc.PcObjectStoreEndpoint import PcObjectStoreEndpoint  # noqa: F401,E501

class ObjectStoreEndpointInfo(object):

    """Model to contain the information of the replica ObjectStoreEndpoints. It contains information like ObjectStore endpointAddress, endpointFlavour, and lastSyncTimestamp.

    :param object_store_endpoint: (:attr:`object_store_endpoint`) 
    :type object_store_endpoint: 
    
    
    :param last_sync_timestamp: (:attr:`last_sync_timestamp`) The last sync time signifies the time at which the backup was last synced to PE. This time will be updated every 30min.
    :type last_sync_timestamp: 
    
    
    :param is_backup_paused: (:attr:`is_backup_paused`) Tells whether the backup is paused on the given PE or not.
    :type is_backup_paused: 
    
    
    :param pause_backup_message: (:attr:`pause_backup_message`) Tells the reason why the backup might be paused. Will be empty if isBackupPaused field is false.
    :type pause_backup_message: 
    
    
    :param entity_id: (:attr:`entity_id`) A unique id corresponding to the object store.
    :type entity_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'object_store_endpoint': 'prism.v4.protectpc.PcObjectStoreEndpoint',
        'last_sync_timestamp': 'int',
        'is_backup_paused': 'bool',
        'pause_backup_message': 'str',
        'entity_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'object_store_endpoint': 'objectStoreEndpoint',
        'last_sync_timestamp': 'lastSyncTimestamp',
        'is_backup_paused': 'isBackupPaused',
        'pause_backup_message': 'pauseBackupMessage',
        'entity_id': 'entityId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, object_store_endpoint=None, last_sync_timestamp=None, is_backup_paused=None, pause_backup_message=None, entity_id=None, *args, **kwargs):  # noqa: E501
        self.__object_store_endpoint = None
        self.__last_sync_timestamp = None
        self.__is_backup_paused = None
        self.__pause_backup_message = None
        self.__entity_id = None
        self.discriminator = None
        if object_store_endpoint is not None:
            self.__object_store_endpoint = object_store_endpoint
        if last_sync_timestamp is not None:
            self.__last_sync_timestamp = last_sync_timestamp
        if is_backup_paused is not None:
            self.__is_backup_paused = is_backup_paused
        if pause_backup_message is not None:
            self.__pause_backup_message = pause_backup_message
        if entity_id is not None:
            self.__entity_id = entity_id
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.protectpc.ObjectStoreEndpointInfo'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def object_store_endpoint(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.protectpc.PcObjectStoreEndpoint`
        """  # noqa: E501
        return self.__object_store_endpoint

    @object_store_endpoint.setter
    def object_store_endpoint(self, object_store_endpoint):

        self.__object_store_endpoint = object_store_endpoint

    @property
    def last_sync_timestamp(self):
        """
        The last sync time signifies the time at which the backup was last synced to PE. This time will be updated every 30min.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__last_sync_timestamp

    @last_sync_timestamp.setter
    def last_sync_timestamp(self, last_sync_timestamp):

        self.__last_sync_timestamp = last_sync_timestamp

    @property
    def is_backup_paused(self):
        """
        Tells whether the backup is paused on the given PE or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_backup_paused

    @is_backup_paused.setter
    def is_backup_paused(self, is_backup_paused):

        self.__is_backup_paused = is_backup_paused

    @property
    def pause_backup_message(self):
        """
        Tells the reason why the backup might be paused. Will be empty if isBackupPaused field is false.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__pause_backup_message

    @pause_backup_message.setter
    def pause_backup_message(self, pause_backup_message):

        self.__pause_backup_message = pause_backup_message

    @property
    def entity_id(self):
        """
        A unique id corresponding to the object store.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        if entity_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', entity_id):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__entity_id = entity_id

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ObjectStoreEndpointInfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStoreEndpointInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


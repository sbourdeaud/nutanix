# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.prism.v4.protectpc.PcObjectStoreEndpoint import PcObjectStoreEndpoint  # noqa: F401,E501

class ReplicaInfo(object):

    """Contains all the IPs of the Replica PEs and PE cluster uuid which is required to make request on the PE3. Recovered PC will try to call all of them sequentially if it does not work. 

    :param pe_cluster_ip_list: (:attr:`pe_cluster_ip_list`) 
    :type pe_cluster_ip_list: 
    
    
    :param pe_cluster_id: (:attr:`pe_cluster_id`) PE cluster uuid. A unique id corresponding to the cluster.
    :type pe_cluster_id: 
    
    
    :param backup_uuid: (:attr:`backup_uuid`) BackupUuid for the particular backup for which recovery is triggered. 
    :type backup_uuid: 
    
    
    :param object_store_endpoint: (:attr:`object_store_endpoint`) 
    :type object_store_endpoint: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'pe_cluster_ip_list': 'list[str]',
        'pe_cluster_id': 'str',
        'backup_uuid': 'str',
        'object_store_endpoint': 'prism.v4.protectpc.PcObjectStoreEndpoint',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'pe_cluster_ip_list': 'peClusterIpList',
        'pe_cluster_id': 'peClusterId',
        'backup_uuid': 'backupUuid',
        'object_store_endpoint': 'objectStoreEndpoint',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, pe_cluster_ip_list=None, pe_cluster_id=None, backup_uuid=None, object_store_endpoint=None, *args, **kwargs):  # noqa: E501
        self.__pe_cluster_ip_list = None
        self.__pe_cluster_id = None
        self.__backup_uuid = None
        self.__object_store_endpoint = None
        self.discriminator = None
        if pe_cluster_ip_list is not None:
            self.__pe_cluster_ip_list = pe_cluster_ip_list
        if pe_cluster_id is not None:
            self.__pe_cluster_id = pe_cluster_id
        if backup_uuid is not None:
            self.__backup_uuid = backup_uuid
        if object_store_endpoint is not None:
            self.__object_store_endpoint = object_store_endpoint
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.protectpc.ReplicaInfo'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def pe_cluster_ip_list(self):
        """
        

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__pe_cluster_ip_list

    @pe_cluster_ip_list.setter
    def pe_cluster_ip_list(self, pe_cluster_ip_list):

        self.__pe_cluster_ip_list = pe_cluster_ip_list

    @property
    def pe_cluster_id(self):
        """
        PE cluster uuid. A unique id corresponding to the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__pe_cluster_id

    @pe_cluster_id.setter
    def pe_cluster_id(self, pe_cluster_id):

        self.__pe_cluster_id = pe_cluster_id

    @property
    def backup_uuid(self):
        """
        BackupUuid for the particular backup for which recovery is triggered. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__backup_uuid

    @backup_uuid.setter
    def backup_uuid(self, backup_uuid):

        self.__backup_uuid = backup_uuid

    @property
    def object_store_endpoint(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.protectpc.PcObjectStoreEndpoint`
        """  # noqa: E501
        return self.__object_store_endpoint

    @object_store_endpoint.setter
    def object_store_endpoint(self, object_store_endpoint):

        self.__object_store_endpoint = object_store_endpoint

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReplicaInfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicaInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


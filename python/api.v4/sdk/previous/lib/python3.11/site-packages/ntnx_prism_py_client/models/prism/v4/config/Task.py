# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.EntityReference import EntityReference  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.OwnerReference import OwnerReference  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.TaskReferenceInternal import TaskReferenceInternal  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.TaskStatus import TaskStatus  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.TaskStep import TaskStep  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.error.AppMessage import AppMessage  # noqa: F401,E501

class Task(object):

    """The task object tracking an asynchronous operation.

    :param ext_id: (:attr:`ext_id`) A globally unique identifier of a task.
    :type ext_id: 
    
    
    :param operation: (:attr:`operation`) The operation name being tracked by the task.
    :type operation: 
    
    
    :param operation_description: (:attr:`operation_description`) Description of the operation being tracked by the task.
    :type operation_description: 
    
    
    :param parent_task: (:attr:`parent_task`) 
    :type parent_task: 
    
    
    :param created_time: (:attr:`created_time`) UTC date and time in RFC-3339 format when the task was created.
    :type created_time: 
    
    
    :param started_time: (:attr:`started_time`) UTC date and time in RFC-3339 format when the task was started.
    :type started_time: 
    
    
    :param completed_time: (:attr:`completed_time`) UTC date and time in RFC-3339 format when the task was completed.
    :type completed_time: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param progress_percentage: (:attr:`progress_percentage`) Task progress expressed as a percentage.
    :type progress_percentage: 
    
     min=0, max=100
    :param entities_affected: (:attr:`entities_affected`) Reference to entities associated with the task.
    :type entities_affected: 
    
    
    :param sub_tasks: (:attr:`sub_tasks`) Reference to tasks spawned as children of the current task. The task get response would contain a limited number of subtask references. To get the entire list of subtasks for a task, use the parent task filter in the task list API.
    :type sub_tasks: 
    
    
    :param sub_steps: (:attr:`sub_steps`) List of steps completed as part of the task.
    :type sub_steps: 
    
    
    :param is_cancelable: (:attr:`is_cancelable`) Signifies if the task can be cancelled.
    :type is_cancelable: 
    
    
    :param owned_by: (:attr:`owned_by`) 
    :type owned_by: 
    
    
    :param completion_details: (:attr:`completion_details`) Additional details on the task to aid the user with further actions post completion of the task.
    :type completion_details: 
    
    
    :param error_messages: (:attr:`error_messages`) Error details explaining a task failure. These would be populated only in the case of task failures.
    :type error_messages: 
    
    
    :param legacy_error_message: (:attr:`legacy_error_message`) Provides an error message in the absence of a well-defined error message for the tasks created through legacy APIs.
    :type legacy_error_message: 
    
    
    :param warnings: (:attr:`warnings`) Warning messages to alert the user of issues which did not directly cause task failure. These can be populated for any task.
    :type warnings: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) UTC date and time in RFC-3339 format when the task was last updated.
    :type last_updated_time: 
    
    
    :param cluster_ext_ids: (:attr:`cluster_ext_ids`) List of globally unique identifiers for clusters associated with the task or any of its subtasks.
    :type cluster_ext_ids: 
    
    
    :param root_task: (:attr:`root_task`) 
    :type root_task: 
    
    
    :param is_background_task: (:attr:`is_background_task`) Signifies if the task is a background task or not.
    :type is_background_task: 
    
    
    :param number_of_subtasks: (:attr:`number_of_subtasks`) Number of tasks spawned as children of the current task.
    :type number_of_subtasks: 
    
    
    :param number_of_entities_affected: (:attr:`number_of_entities_affected`) Number of entities associated with the task.
    :type number_of_entities_affected: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'operation': 'str',
        'operation_description': 'str',
        'parent_task': 'prism.v4.config.TaskReferenceInternal',
        'created_time': 'datetime',
        'started_time': 'datetime',
        'completed_time': 'datetime',
        'status': 'prism.v4.config.TaskStatus',
        'progress_percentage': 'int',
        'entities_affected': 'list[prism.v4.config.EntityReference]',
        'sub_tasks': 'list[prism.v4.config.TaskReferenceInternal]',
        'sub_steps': 'list[prism.v4.config.TaskStep]',
        'is_cancelable': 'bool',
        'owned_by': 'prism.v4.config.OwnerReference',
        'completion_details': 'list[common.v1.config.KVPair]',
        'error_messages': 'list[prism.v4.error.AppMessage]',
        'legacy_error_message': 'str',
        'warnings': 'list[prism.v4.error.AppMessage]',
        'last_updated_time': 'datetime',
        'cluster_ext_ids': 'list[str]',
        'root_task': 'prism.v4.config.TaskReferenceInternal',
        'is_background_task': 'bool',
        'number_of_subtasks': 'int',
        'number_of_entities_affected': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'operation': 'operation',
        'operation_description': 'operationDescription',
        'parent_task': 'parentTask',
        'created_time': 'createdTime',
        'started_time': 'startedTime',
        'completed_time': 'completedTime',
        'status': 'status',
        'progress_percentage': 'progressPercentage',
        'entities_affected': 'entitiesAffected',
        'sub_tasks': 'subTasks',
        'sub_steps': 'subSteps',
        'is_cancelable': 'isCancelable',
        'owned_by': 'ownedBy',
        'completion_details': 'completionDetails',
        'error_messages': 'errorMessages',
        'legacy_error_message': 'legacyErrorMessage',
        'warnings': 'warnings',
        'last_updated_time': 'lastUpdatedTime',
        'cluster_ext_ids': 'clusterExtIds',
        'root_task': 'rootTask',
        'is_background_task': 'isBackgroundTask',
        'number_of_subtasks': 'numberOfSubtasks',
        'number_of_entities_affected': 'numberOfEntitiesAffected',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, operation=None, operation_description=None, parent_task=None, created_time=None, started_time=None, completed_time=None, status=None, progress_percentage=None, entities_affected=None, sub_tasks=None, sub_steps=None, is_cancelable=None, owned_by=None, completion_details=None, error_messages=None, legacy_error_message=None, warnings=None, last_updated_time=None, cluster_ext_ids=None, root_task=None, is_background_task=None, number_of_subtasks=None, number_of_entities_affected=None, *args, **kwargs):  # noqa: E501
        self.__ext_id = None
        self.__operation = None
        self.__operation_description = None
        self.__parent_task = None
        self.__created_time = None
        self.__started_time = None
        self.__completed_time = None
        self.__status = None
        self.__progress_percentage = None
        self.__entities_affected = None
        self.__sub_tasks = None
        self.__sub_steps = None
        self.__is_cancelable = None
        self.__owned_by = None
        self.__completion_details = None
        self.__error_messages = None
        self.__legacy_error_message = None
        self.__warnings = None
        self.__last_updated_time = None
        self.__cluster_ext_ids = None
        self.__root_task = None
        self.__is_background_task = None
        self.__number_of_subtasks = None
        self.__number_of_entities_affected = None
        self.discriminator = None
        if ext_id is not None:
            self.__ext_id = ext_id
        if operation is not None:
            self.__operation = operation
        if operation_description is not None:
            self.__operation_description = operation_description
        if parent_task is not None:
            self.__parent_task = parent_task
        if created_time is not None:
            self.__created_time = created_time
        if started_time is not None:
            self.__started_time = started_time
        if completed_time is not None:
            self.__completed_time = completed_time
        if status is not None:
            self.__status = status
        if progress_percentage is not None:
            self.__progress_percentage = progress_percentage
        if entities_affected is not None:
            self.__entities_affected = entities_affected
        if sub_tasks is not None:
            self.__sub_tasks = sub_tasks
        if sub_steps is not None:
            self.__sub_steps = sub_steps
        if is_cancelable is not None:
            self.__is_cancelable = is_cancelable
        if owned_by is not None:
            self.__owned_by = owned_by
        if completion_details is not None:
            self.__completion_details = completion_details
        if error_messages is not None:
            self.__error_messages = error_messages
        if legacy_error_message is not None:
            self.__legacy_error_message = legacy_error_message
        if warnings is not None:
            self.__warnings = warnings
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if cluster_ext_ids is not None:
            self.__cluster_ext_ids = cluster_ext_ids
        if root_task is not None:
            self.__root_task = root_task
        if is_background_task is not None:
            self.__is_background_task = is_background_task
        if number_of_subtasks is not None:
            self.__number_of_subtasks = number_of_subtasks
        if number_of_entities_affected is not None:
            self.__number_of_entities_affected = number_of_entities_affected
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.config.Task'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ext_id(self):
        """
        A globally unique identifier of a task.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        if ext_id is not None and not re.search('^[a-zA-Z0-9\/+]*={0,2}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}', ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `ext_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\/+]*={0,2}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/`")  # noqa: E501

        self.__ext_id = ext_id

    @property
    def operation(self):
        """
        The operation name being tracked by the task.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__operation

    @operation.setter
    def operation(self, operation):

        self.__operation = operation

    @property
    def operation_description(self):
        """
        Description of the operation being tracked by the task.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__operation_description

    @operation_description.setter
    def operation_description(self, operation_description):

        self.__operation_description = operation_description

    @property
    def parent_task(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.TaskReferenceInternal`
        """  # noqa: E501
        return self.__parent_task

    @parent_task.setter
    def parent_task(self, parent_task):

        self.__parent_task = parent_task

    @property
    def created_time(self):
        """
        UTC date and time in RFC-3339 format when the task was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def started_time(self):
        """
        UTC date and time in RFC-3339 format when the task was started.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__started_time

    @started_time.setter
    def started_time(self, started_time):

        self.__started_time = started_time

    @property
    def completed_time(self):
        """
        UTC date and time in RFC-3339 format when the task was completed.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__completed_time

    @completed_time.setter
    def completed_time(self, completed_time):

        self.__completed_time = completed_time

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.TaskStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def progress_percentage(self):
        """
        Task progress expressed as a percentage.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        if progress_percentage is not None and progress_percentage > 100:  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value less than or equal to `100`")  # noqa: E501
        if progress_percentage is not None and progress_percentage < 0:  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__progress_percentage = progress_percentage

    @property
    def entities_affected(self):
        """
        Reference to entities associated with the task.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.EntityReference` ]
        """  # noqa: E501
        return self.__entities_affected

    @entities_affected.setter
    def entities_affected(self, entities_affected):

        self.__entities_affected = entities_affected

    @property
    def sub_tasks(self):
        """
        Reference to tasks spawned as children of the current task. The task get response would contain a limited number of subtask references. To get the entire list of subtasks for a task, use the parent task filter in the task list API.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.TaskReferenceInternal` ]
        """  # noqa: E501
        return self.__sub_tasks

    @sub_tasks.setter
    def sub_tasks(self, sub_tasks):

        self.__sub_tasks = sub_tasks

    @property
    def sub_steps(self):
        """
        List of steps completed as part of the task.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.config.TaskStep` ]
        """  # noqa: E501
        return self.__sub_steps

    @sub_steps.setter
    def sub_steps(self, sub_steps):

        self.__sub_steps = sub_steps

    @property
    def is_cancelable(self):
        """
        Signifies if the task can be cancelled.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cancelable

    @is_cancelable.setter
    def is_cancelable(self, is_cancelable):

        self.__is_cancelable = is_cancelable

    @property
    def owned_by(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.OwnerReference`
        """  # noqa: E501
        return self.__owned_by

    @owned_by.setter
    def owned_by(self, owned_by):

        self.__owned_by = owned_by

    @property
    def completion_details(self):
        """
        Additional details on the task to aid the user with further actions post completion of the task.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.common.v1.config.KVPair` ]
        """  # noqa: E501
        return self.__completion_details

    @completion_details.setter
    def completion_details(self, completion_details):

        self.__completion_details = completion_details

    @property
    def error_messages(self):
        """
        Error details explaining a task failure. These would be populated only in the case of task failures.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.error.AppMessage` ]
        """  # noqa: E501
        return self.__error_messages

    @error_messages.setter
    def error_messages(self, error_messages):

        self.__error_messages = error_messages

    @property
    def legacy_error_message(self):
        """
        Provides an error message in the absence of a well-defined error message for the tasks created through legacy APIs.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__legacy_error_message

    @legacy_error_message.setter
    def legacy_error_message(self, legacy_error_message):

        self.__legacy_error_message = legacy_error_message

    @property
    def warnings(self):
        """
        Warning messages to alert the user of issues which did not directly cause task failure. These can be populated for any task.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.error.AppMessage` ]
        """  # noqa: E501
        return self.__warnings

    @warnings.setter
    def warnings(self, warnings):

        self.__warnings = warnings

    @property
    def last_updated_time(self):
        """
        UTC date and time in RFC-3339 format when the task was last updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def cluster_ext_ids(self):
        """
        List of globally unique identifiers for clusters associated with the task or any of its subtasks.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__cluster_ext_ids

    @cluster_ext_ids.setter
    def cluster_ext_ids(self, cluster_ext_ids):

        self.__cluster_ext_ids = cluster_ext_ids

    @property
    def root_task(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.TaskReferenceInternal`
        """  # noqa: E501
        return self.__root_task

    @root_task.setter
    def root_task(self, root_task):

        self.__root_task = root_task

    @property
    def is_background_task(self):
        """
        Signifies if the task is a background task or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_background_task

    @is_background_task.setter
    def is_background_task(self, is_background_task):

        self.__is_background_task = is_background_task

    @property
    def number_of_subtasks(self):
        """
        Number of tasks spawned as children of the current task.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_subtasks

    @number_of_subtasks.setter
    def number_of_subtasks(self, number_of_subtasks):

        self.__number_of_subtasks = number_of_subtasks

    @property
    def number_of_entities_affected(self):
        """
        Number of entities associated with the task.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__number_of_entities_affected

    @number_of_entities_affected.setter
    def number_of_entities_affected(self, number_of_entities_affected):

        self.__number_of_entities_affected = number_of_entities_affected

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Task, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


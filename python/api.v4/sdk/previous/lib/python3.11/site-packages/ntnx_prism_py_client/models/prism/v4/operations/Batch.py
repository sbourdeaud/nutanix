# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.operations.BatchCompletionStatus import BatchCompletionStatus  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.operations.BatchExecutionStatus import BatchExecutionStatus  # noqa: F401,E501

class Batch(ExternalizableAbstractModel):

    """A model that represents a Batch resource.

    :param name: (:attr:`name`) An user friendly name of the batch.
    :type name: 
     max=256 chars
    
    :param start_time: (:attr:`start_time`) The execution start time of the batch. The value will be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would imply that the batch started execution at 1:23:45.678  on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    :type start_time: 
    
    
    :param end_time: (:attr:`end_time`) The completion time of the batch. The value will be in extended ISO-8601 format. For example, end time of 2022-04-23T01:23:45.678+09:00 would imply that the batch completed its execution at 1:23:45.678  on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    :type end_time: 
    
    
    :param size: (:attr:`size`) The total number of elements submitted for processing in the batch.
    :type size: 
    
    
    :param success_count: (:attr:`success_count`) The total number of elements successfully processed in the batch.
    :type success_count: 
    
    
    :param failed_count: (:attr:`failed_count`) The total number of elements that failed to be processed in the batch.
    :type failed_count: 
    
    
    :param completion_status: (:attr:`completion_status`) 
    :type completion_status: 
    
    
    :param execution_status: (:attr:`execution_status`) 
    :type execution_status: 
    
    
    :param should_stop_on_error: (:attr:`should_stop_on_error`) A flag indicating whether the batch procession should halt or continue when an error response is received from the server during the execution of a batch chunk
    :type should_stop_on_error: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'size': 'int',
        'success_count': 'int',
        'failed_count': 'int',
        'completion_status': 'prism.v4.operations.BatchCompletionStatus',
        'execution_status': 'prism.v4.operations.BatchExecutionStatus',
        'should_stop_on_error': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'size': 'size',
        'success_count': 'successCount',
        'failed_count': 'failedCount',
        'completion_status': 'completionStatus',
        'execution_status': 'executionStatus',
        'should_stop_on_error': 'shouldStopOnError',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, start_time=None, end_time=None, size=None, success_count=None, failed_count=None, completion_status=None, execution_status=None, should_stop_on_error=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__start_time = None
        self.__end_time = None
        self.__size = None
        self.__success_count = None
        self.__failed_count = None
        self.__completion_status = None
        self.__execution_status = None
        self.__should_stop_on_error = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if start_time is not None:
            self.__start_time = start_time
        if end_time is not None:
            self.__end_time = end_time
        if size is not None:
            self.__size = size
        if success_count is not None:
            self.__success_count = success_count
        if failed_count is not None:
            self.__failed_count = failed_count
        if completion_status is not None:
            self.__completion_status = completion_status
        if execution_status is not None:
            self.__execution_status = execution_status
        if should_stop_on_error is not None:
            self.__should_stop_on_error = should_stop_on_error

    def _initialize_object_type(self):
        return 'prism.v4.operations.Batch'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        An user friendly name of the batch.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self.__name = name

    @property
    def start_time(self):
        """
        The execution start time of the batch. The value will be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would imply that the batch started execution at 1:23:45.678  on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):

        self.__start_time = start_time

    @property
    def end_time(self):
        """
        The completion time of the batch. The value will be in extended ISO-8601 format. For example, end time of 2022-04-23T01:23:45.678+09:00 would imply that the batch completed its execution at 1:23:45.678  on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__end_time

    @end_time.setter
    def end_time(self, end_time):

        self.__end_time = end_time

    @property
    def size(self):
        """
        The total number of elements submitted for processing in the batch.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__size

    @size.setter
    def size(self, size):

        self.__size = size

    @property
    def success_count(self):
        """
        The total number of elements successfully processed in the batch.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__success_count

    @success_count.setter
    def success_count(self, success_count):

        self.__success_count = success_count

    @property
    def failed_count(self):
        """
        The total number of elements that failed to be processed in the batch.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__failed_count

    @failed_count.setter
    def failed_count(self, failed_count):

        self.__failed_count = failed_count

    @property
    def completion_status(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.operations.BatchCompletionStatus`
        """  # noqa: E501
        return self.__completion_status

    @completion_status.setter
    def completion_status(self, completion_status):

        self.__completion_status = completion_status

    @property
    def execution_status(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.operations.BatchExecutionStatus`
        """  # noqa: E501
        return self.__execution_status

    @execution_status.setter
    def execution_status(self, execution_status):

        self.__execution_status = execution_status

    @property
    def should_stop_on_error(self):
        """
        A flag indicating whether the batch procession should halt or continue when an error response is received from the server during the execution of a batch chunk

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_stop_on_error

    @should_stop_on_error.setter
    def should_stop_on_error(self, should_stop_on_error):

        self.__should_stop_on_error = should_stop_on_error

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Batch, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Batch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.prism.v4.config.ResourceGroup import ResourceGroup  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.ResourceType import ResourceType  # noqa: F401,E501

class AssociationSummary(object):

    """This attribute contains a list of entities and policies that have been assigned the given category.<br> These entities are grouped by entity types (like VM or HOST) or policy types (like PROTECTION_POLICY or NGT_POLICY).<br> Each associated object contains the total entities belonging to the given entity type, count, category extId, and references (for example, for VM it will be VM UUID). 

    :param category_id: (:attr:`category_id`) External identifier for the given category that is used across all v4 apis/entities/resources where categories are referenced.<br> The field is in UUID format.<br> A type 4 UUID is generated during category creation. 
    :type category_id: 
    
    
    :param resource_type: (:attr:`resource_type`) 
    :type resource_type: 
    
    
    :param resource_group: (:attr:`resource_group`) 
    :type resource_group: 
    
    
    :param count: (:attr:`count`) Count of associations of a particular type of entity or policy 
    :type count: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'category_id': 'str',
        'resource_type': 'prism.v4.config.ResourceType',
        'resource_group': 'prism.v4.config.ResourceGroup',
        'count': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'category_id': 'categoryId',
        'resource_type': 'resourceType',
        'resource_group': 'resourceGroup',
        'count': 'count',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, category_id=None, resource_type=None, resource_group=None, count=None, *args, **kwargs):  # noqa: E501
        self.__category_id = None
        self.__resource_type = None
        self.__resource_group = None
        self.__count = None
        self.discriminator = None
        if category_id is not None:
            self.__category_id = category_id
        if resource_type is not None:
            self.__resource_type = resource_type
        if resource_group is not None:
            self.__resource_group = resource_group
        if count is not None:
            self.__count = count
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.config.AssociationSummary'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def category_id(self):
        """
        External identifier for the given category that is used across all v4 apis/entities/resources where categories are referenced.<br> The field is in UUID format.<br> A type 4 UUID is generated during category creation. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__category_id

    @category_id.setter
    def category_id(self, category_id):

        self.__category_id = category_id

    @property
    def resource_type(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.ResourceType`
        """  # noqa: E501
        return self.__resource_type

    @resource_type.setter
    def resource_type(self, resource_type):

        self.__resource_type = resource_type

    @property
    def resource_group(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.ResourceGroup`
        """  # noqa: E501
        return self.__resource_group

    @resource_group.setter
    def resource_group(self, resource_group):

        self.__resource_group = resource_group

    @property
    def count(self):
        """
        Count of associations of a particular type of entity or policy 

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__count

    @count.setter
    def count(self, count):

        self.__count = count

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AssociationSummary, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssociationSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


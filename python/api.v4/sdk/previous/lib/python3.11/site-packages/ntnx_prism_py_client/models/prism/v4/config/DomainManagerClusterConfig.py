# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.clustermgmt.v4.config.BuildInfo import BuildInfo  # noqa: F401,E501
from ntnx_prism_py_client.models.clustermgmt.v4.config.ClusterConfig import ClusterConfig  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.config.BasicAuth import BasicAuth  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.BootstrapConfig import BootstrapConfig  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.DomainManagerResourceConfig import DomainManagerResourceConfig  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.config.Size import Size  # noqa: F401,E501

class DomainManagerClusterConfig(ClusterConfig):

    """Domain manager (Prism Central) cluster configuration details.

    :param name: (:attr:`name`) Name of the domain manager (Prism Central).
    :type name: 
     min=1 chars, max=80 chars
    
    :param size: (:attr:`size`) 
    :type size: 
    
    
    :param bootstrap_config: (:attr:`bootstrap_config`) 
    :type bootstrap_config: 
    
    
    :param credentials: (:attr:`credentials`) The credentials consist of a username and password for a particular user like admin. Users can pass the credentials of admin users currently which will be configured in the create domain manager operation.
    :type credentials: 
    
    
    :param resource_config: (:attr:`resource_config`) 
    :type resource_config: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'size': 'prism.v4.config.Size',
        'bootstrap_config': 'prism.v4.config.BootstrapConfig',
        'credentials': 'list[common.v1.config.BasicAuth]',
        'resource_config': 'prism.v4.config.DomainManagerResourceConfig',
        'should_enable_lockdown_mode': 'bool',
        'build_info': 'clustermgmt.v4.config.BuildInfo',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'bootstrap_config': 'bootstrapConfig',
        'credentials': 'credentials',
        'resource_config': 'resourceConfig',
        'should_enable_lockdown_mode': 'shouldEnableLockdownMode',
        'build_info': 'buildInfo',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, size=None, bootstrap_config=None, credentials=None, resource_config=None, should_enable_lockdown_mode=None, build_info=None, *args, **kwargs):  # noqa: E501
        ClusterConfig.__init__(self, should_enable_lockdown_mode, build_info, *args, **kwargs)
        self.__name = None
        self.__size = None
        self.__bootstrap_config = None
        self.__credentials = None
        self.__resource_config = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if size is not None:
            self.__size = size
        if bootstrap_config is not None:
            self.__bootstrap_config = bootstrap_config
        if credentials is not None:
            self.__credentials = credentials
        if resource_config is not None:
            self.__resource_config = resource_config

    def _initialize_object_type(self):
        return 'prism.v4.config.DomainManagerClusterConfig'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the domain manager (Prism Central).

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def size(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.Size`
        """  # noqa: E501
        return self.__size

    @size.setter
    def size(self, size):

        self.__size = size

    @property
    def bootstrap_config(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.BootstrapConfig`
        """  # noqa: E501
        return self.__bootstrap_config

    @bootstrap_config.setter
    def bootstrap_config(self, bootstrap_config):

        self.__bootstrap_config = bootstrap_config

    @property
    def credentials(self):
        """
        The credentials consist of a username and password for a particular user like admin. Users can pass the credentials of admin users currently which will be configured in the create domain manager operation.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.common.v1.config.BasicAuth` ]
        """  # noqa: E501
        return self.__credentials

    @credentials.setter
    def credentials(self, credentials):

        self.__credentials = credentials

    @property
    def resource_config(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.config.DomainManagerResourceConfig`
        """  # noqa: E501
        return self.__resource_config

    @resource_config.setter
    def resource_config(self, resource_config):

        self.__resource_config = resource_config

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DomainManagerClusterConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainManagerClusterConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Data Policies APIs

    Manage Policies for Disaster Recovery and Storage.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.ProtectionPolicy import ProtectionPolicy  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.ReplicationConfiguration import ReplicationConfiguration  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.ReplicationLocation import ReplicationLocation  # noqa: F401,E501

class ProtectionPolicyProjection(ProtectionPolicy):

    """

    :param name: (:attr:`name`) Name of the protection policy.
    :type name: required
     max=256 chars
    
    :param description: (:attr:`description`) Description of the protection policy.
    :type description: 
     max=1000 chars
    
    :param replication_locations: (:attr:`replication_locations`) Indicates all the locations participating in the protection policy. You can specify up to 3 replication locations.
    :type replication_locations: required
    
    
    :param replication_configurations: (:attr:`replication_configurations`) Specifies the connections between various replication locations and its schedule. Connections from both source-to-target and target-to-source should be specified.
    :type replication_configurations: required
    
    
    :param category_ids: (:attr:`category_ids`) Specifies the list of external identifiers of categories that must be added to the protection policy. This policy will protect any VM or volume group associated with this category.
    :type category_ids: 
    
    
    :param is_approval_policy_needed: (:attr:`is_approval_policy_needed`) Manual deletion of recovery points created by this policy can be driven through a multi-party authorization workflow. Hence, multiple approvers would be required to grant approvals for the delete operation.
    :type is_approval_policy_needed: 
    
    
    :param owner_ext_id: (:attr:`owner_ext_id`) External identifier of the owner of the protection policy.
    :type owner_ext_id: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'replication_locations': 'list[datapolicies.v4.config.ReplicationLocation]',
        'replication_configurations': 'list[datapolicies.v4.config.ReplicationConfiguration]',
        'category_ids': 'list[str]',
        'is_approval_policy_needed': 'bool',
        'owner_ext_id': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'replication_locations': 'replicationLocations',
        'replication_configurations': 'replicationConfigurations',
        'category_ids': 'categoryIds',
        'is_approval_policy_needed': 'isApprovalPolicyNeeded',
        'owner_ext_id': 'ownerExtId',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, replication_locations=None, replication_configurations=None, category_ids=None, is_approval_policy_needed=None, owner_ext_id=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ProtectionPolicy.__init__(self, name, description, replication_locations, replication_configurations, category_ids, is_approval_policy_needed, owner_ext_id, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'datapolicies.v4.config.ProtectionPolicyProjection'

    def _initialize_object_version(self):
        return 'v4.r0'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ProtectionPolicyProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionPolicyProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Data Policies APIs

    Manage Policies for Disaster Recovery and Storage.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_datapolicies_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.ReplicationConfiguration import ReplicationConfiguration  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.ReplicationLocation import ReplicationLocation  # noqa: F401,E501

class ProtectionPolicy(ExternalizableAbstractModel):

    """A protection policy automates the process of creating and replicating recovery points. When a protection policy is configured to create local recovery points, the request includes:<br> - The recovery point objective<br> - The retention policy<br> - The entities that need to be protected by specifying the categories in which they are tagged.<br> To automate recovery point replication, you can also specify the replication location(s). Only users with legacy roles, such as admin, can create a Cross-AZ protection policy.

    :param name: (:attr:`name`) Name of the protection policy.
    :type name: required
     max=256 chars
    
    :param description: (:attr:`description`) Description of the protection policy.
    :type description: 
     max=1000 chars
    
    :param replication_locations: (:attr:`replication_locations`) Indicates all the locations participating in the protection policy. You can specify up to 3 replication locations.
    :type replication_locations: required
    
    
    :param replication_configurations: (:attr:`replication_configurations`) Specifies the connections between various replication locations and its schedule. Connections from both source-to-target and target-to-source should be specified.
    :type replication_configurations: required
    
    
    :param category_ids: (:attr:`category_ids`) Specifies the list of external identifiers of categories that must be added to the protection policy. This policy will protect any VM or volume group associated with this category.
    :type category_ids: 
    
    
    :param is_approval_policy_needed: (:attr:`is_approval_policy_needed`) Manual deletion of recovery points created by this policy can be driven through a multi-party authorization workflow. Hence, multiple approvers would be required to grant approvals for the delete operation.
    :type is_approval_policy_needed: 
    
    
    :param owner_ext_id: (:attr:`owner_ext_id`) External identifier of the owner of the protection policy.
    :type owner_ext_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'replication_locations': 'list[datapolicies.v4.config.ReplicationLocation]',
        'replication_configurations': 'list[datapolicies.v4.config.ReplicationConfiguration]',
        'category_ids': 'list[str]',
        'is_approval_policy_needed': 'bool',
        'owner_ext_id': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'replication_locations': 'replicationLocations',
        'replication_configurations': 'replicationConfigurations',
        'category_ids': 'categoryIds',
        'is_approval_policy_needed': 'isApprovalPolicyNeeded',
        'owner_ext_id': 'ownerExtId',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, replication_locations=None, replication_configurations=None, category_ids=None, is_approval_policy_needed=None, owner_ext_id=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__replication_locations = None
        self.__replication_configurations = None
        self.__category_ids = None
        self.__is_approval_policy_needed = None
        self.__owner_ext_id = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__replication_locations = replication_locations
        self.__replication_configurations = replication_configurations
        if category_ids is not None:
            self.__category_ids = category_ids
        if is_approval_policy_needed is not None:
            self.__is_approval_policy_needed = is_approval_policy_needed
        if owner_ext_id is not None:
            self.__owner_ext_id = owner_ext_id

    def _initialize_object_type(self):
        return 'datapolicies.v4.config.ProtectionPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the protection policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the protection policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def replication_locations(self):
        """
        Indicates all the locations participating in the protection policy. You can specify up to 3 replication locations.

        :type:
             list[ :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.ReplicationLocation` ]
        """  # noqa: E501
        return self.__replication_locations

    @replication_locations.setter
    def replication_locations(self, replication_locations):
        if replication_locations is None:
            raise ValueError("Invalid value for `replication_locations`, must not be `None`")  # noqa: E501

        self.__replication_locations = replication_locations

    @property
    def replication_configurations(self):
        """
        Specifies the connections between various replication locations and its schedule. Connections from both source-to-target and target-to-source should be specified.

        :type:
             list[ :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.ReplicationConfiguration` ]
        """  # noqa: E501
        return self.__replication_configurations

    @replication_configurations.setter
    def replication_configurations(self, replication_configurations):
        if replication_configurations is None:
            raise ValueError("Invalid value for `replication_configurations`, must not be `None`")  # noqa: E501

        self.__replication_configurations = replication_configurations

    @property
    def category_ids(self):
        """
        Specifies the list of external identifiers of categories that must be added to the protection policy. This policy will protect any VM or volume group associated with this category.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__category_ids

    @category_ids.setter
    def category_ids(self, category_ids):

        self.__category_ids = category_ids

    @property
    def is_approval_policy_needed(self):
        """
        Manual deletion of recovery points created by this policy can be driven through a multi-party authorization workflow. Hence, multiple approvers would be required to grant approvals for the delete operation.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_approval_policy_needed

    @is_approval_policy_needed.setter
    def is_approval_policy_needed(self, is_approval_policy_needed):

        self.__is_approval_policy_needed = is_approval_policy_needed

    @property
    def owner_ext_id(self):
        """
        External identifier of the owner of the protection policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__owner_ext_id

    @owner_ext_id.setter
    def owner_ext_id(self, owner_ext_id):
        if owner_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owner_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `owner_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owner_ext_id = owner_ext_id

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ProtectionPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


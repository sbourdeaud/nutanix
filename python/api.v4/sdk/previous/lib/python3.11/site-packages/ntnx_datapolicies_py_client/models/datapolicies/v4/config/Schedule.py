# coding: utf-8


"""
IGNORE:
    Nutanix Data Policies APIs

    Manage Policies for Disaster Recovery and Storage.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_datapolicies_py_client.models
from ntnx_datapolicies_py_client.models.OneOfdatapolicies.v4.config.Scheduleretention import Scheduleretention  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.dataprotection.v4.common.RecoveryPointType import RecoveryPointType  # noqa: F401,E501

class Schedule(object):

    """Schedule for protection. The schedule specifies the recovery point objective and the retention policy for the participating locations.

    :param recovery_point_type: (:attr:`recovery_point_type`) 
    :type recovery_point_type: 
    
    
    :param recovery_point_objective_time_seconds: (:attr:`recovery_point_objective_time_seconds`) The Recovery point objective of the schedule in seconds and specified in multiple of 60 seconds. Only following RPO values can be provided for rollup retention type:<br> Minute(s): 1, 2, 3, 4, 5, 6, 10, 12, 15 <br> Hour(s): 1, 2, 3, 4, 6, 8, 12 <br> Day(s): 1 <br> Week(s): 1, 2
    :type recovery_point_objective_time_seconds: required
    
     min=0,
    :param retention: (:attr:`retention`) Specifies the retention policy for the recovery point schedule.
    :type retention: 
    
    
    :param start_time: (:attr:`start_time`) Represents the protection start time for the new entities added to the policy after the policy is created in h:m format. The values must be between 00h:00m and 23h:59m and in UTC timezone. It specifies the time when the first snapshot is taken and replicated for any entity added to the policy. If this is not specified, the snapshot is taken immediately and replicated for any new entity added to the policy.
    :type start_time: 
    
    
    :param sync_replication_auto_suspend_timeout_seconds: (:attr:`sync_replication_auto_suspend_timeout_seconds`) Auto suspend timeout if there is a connection failure between locations for synchronous replication. If this value is not set, then the policy will not be suspended.
    :type sync_replication_auto_suspend_timeout_seconds: 
    
     max=300

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'recovery_point_type': 'dataprotection.v4.common.RecoveryPointType',
        'recovery_point_objective_time_seconds': 'int',
        'retention': 'OneOfdatapolicies.v4.config.Scheduleretention',
        'start_time': 'str',
        'sync_replication_auto_suspend_timeout_seconds': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'recovery_point_type': 'recoveryPointType',
        'recovery_point_objective_time_seconds': 'recoveryPointObjectiveTimeSeconds',
        'retention': 'retention',
        'start_time': 'startTime',
        'sync_replication_auto_suspend_timeout_seconds': 'syncReplicationAutoSuspendTimeoutSeconds',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, recovery_point_type=None, recovery_point_objective_time_seconds=None, retention=None, start_time=None, sync_replication_auto_suspend_timeout_seconds=None, *args, **kwargs):  # noqa: E501
        self.__recovery_point_type = None
        self.__recovery_point_objective_time_seconds = None
        self.__retention = None
        self.__start_time = None
        self.__sync_replication_auto_suspend_timeout_seconds = None
        self.discriminator = None
        if recovery_point_type is not None:
            self.__recovery_point_type = recovery_point_type
        self.__recovery_point_objective_time_seconds = recovery_point_objective_time_seconds
        if retention is not None:
            self.__retention = retention
        if start_time is not None:
            self.__start_time = start_time
        if sync_replication_auto_suspend_timeout_seconds is not None:
            self.__sync_replication_auto_suspend_timeout_seconds = sync_replication_auto_suspend_timeout_seconds
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'datapolicies.v4.config.Schedule'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def recovery_point_type(self):
        """
        

        :type:
            :class:`~ntnx_datapolicies_py_client.models.dataprotection.v4.common.RecoveryPointType`
        """  # noqa: E501
        return self.__recovery_point_type

    @recovery_point_type.setter
    def recovery_point_type(self, recovery_point_type):

        self.__recovery_point_type = recovery_point_type

    @property
    def recovery_point_objective_time_seconds(self):
        """
        The Recovery point objective of the schedule in seconds and specified in multiple of 60 seconds. Only following RPO values can be provided for rollup retention type:<br> Minute(s): 1, 2, 3, 4, 5, 6, 10, 12, 15 <br> Hour(s): 1, 2, 3, 4, 6, 8, 12 <br> Day(s): 1 <br> Week(s): 1, 2

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__recovery_point_objective_time_seconds

    @recovery_point_objective_time_seconds.setter
    def recovery_point_objective_time_seconds(self, recovery_point_objective_time_seconds):
        if recovery_point_objective_time_seconds is None:
            raise ValueError("Invalid value for `recovery_point_objective_time_seconds`, must not be `None`")  # noqa: E501
        if recovery_point_objective_time_seconds is not None and recovery_point_objective_time_seconds < 0:  # noqa: E501
            raise ValueError("Invalid value for `recovery_point_objective_time_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__recovery_point_objective_time_seconds = recovery_point_objective_time_seconds

    @property
    def retention(self):
        """
        Specifies the retention policy for the recovery point schedule.

        :type:
                :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.LinearRetention` | 
                :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.AutoRollupRetention`
        """  # noqa: E501
        return self.__retention

    @retention.setter
    def retention(self, retention):

        self.__retention = retention

    @property
    def start_time(self):
        """
        Represents the protection start time for the new entities added to the policy after the policy is created in h:m format. The values must be between 00h:00m and 23h:59m and in UTC timezone. It specifies the time when the first snapshot is taken and replicated for any entity added to the policy. If this is not specified, the snapshot is taken immediately and replicated for any new entity added to the policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):
        if start_time is not None and not re.search('^(0[0-9]|1[0-9]|2[0-3])h:[0-5][0-9]m$', start_time):  # noqa: E501
            raise ValueError(r"Invalid value for `start_time`, must be a follow pattern or equal to `/^(0[0-9]|1[0-9]|2[0-3])h:[0-5][0-9]m$/`")  # noqa: E501

        self.__start_time = start_time

    @property
    def sync_replication_auto_suspend_timeout_seconds(self):
        """
        Auto suspend timeout if there is a connection failure between locations for synchronous replication. If this value is not set, then the policy will not be suspended.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__sync_replication_auto_suspend_timeout_seconds

    @sync_replication_auto_suspend_timeout_seconds.setter
    def sync_replication_auto_suspend_timeout_seconds(self, sync_replication_auto_suspend_timeout_seconds):
        if sync_replication_auto_suspend_timeout_seconds is not None and sync_replication_auto_suspend_timeout_seconds > 300:  # noqa: E501
            raise ValueError("Invalid value for `sync_replication_auto_suspend_timeout_seconds`, must be a value less than or equal to `300`")  # noqa: E501

        self.__sync_replication_auto_suspend_timeout_seconds = sync_replication_auto_suspend_timeout_seconds

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_datapolicies_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


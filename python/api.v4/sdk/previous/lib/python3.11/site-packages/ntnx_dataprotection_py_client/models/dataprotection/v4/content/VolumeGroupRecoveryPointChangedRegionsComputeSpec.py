# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.dataprotection.v4.content.VolumeGroupDiskRecoveryPointClusterDiscoverSpec import VolumeGroupDiskRecoveryPointClusterDiscoverSpec  # noqa: F401,E501

class VolumeGroupRecoveryPointChangedRegionsComputeSpec(VolumeGroupDiskRecoveryPointClusterDiscoverSpec):

    """Compute changed region parameters. These parameters allow you to specify a start offset, length, block size, and a reference disk recovery point. All parameters are optional. However, if you need to set a reference disk recovery point, you must specify all three parameters: recovery point ID, volume group recovery point ID, and disk recovery point ID.

    :param offset: (:attr:`offset`) The start offset value to compute the changed region. If the value is not provided, the difference is executed from the offset of 0. Note: the start offset might automatically align to a system-defined block boundary.
    :type offset: 
    
    
    :param length: (:attr:`length`) The length to compute the changed region. If the value is not provided, the difference is performed from the start offset to the end of the disk. Note: the end offset might automatically align to a system-defined block boundary.
    :type length: 
    
    
    :param block_size_byte: (:attr:`block_size_byte`) When blockSizeByte is set, all returned ranges will start and end at blockSize addresses, and the changed blocks will match the block size. Supported values of blockSizeByte are [32768, 65536, 131072, 262144]. Example: if blockSizeByte is set to 32768 (i.e 32KB), all ranges will start at multiple of 32KB and end at multiple of 32KB value. Default blockSizeByte is set to 32KB
    :type block_size_byte: 
    
     min=32768, max=262144

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'offset': 'int',
        'length': 'int',
        'block_size_byte': 'int',
        'reference_volume_group_recovery_point_ext_id': 'str',
        'reference_recovery_point_ext_id': 'str',
        'reference_disk_recovery_point_ext_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'offset': 'offset',
        'length': 'length',
        'block_size_byte': 'blockSizeByte',
        'reference_volume_group_recovery_point_ext_id': 'referenceVolumeGroupRecoveryPointExtId',
        'reference_recovery_point_ext_id': 'referenceRecoveryPointExtId',
        'reference_disk_recovery_point_ext_id': 'referenceDiskRecoveryPointExtId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, offset=None, length=None, block_size_byte=None, reference_volume_group_recovery_point_ext_id=None, reference_recovery_point_ext_id=None, reference_disk_recovery_point_ext_id=None, *args, **kwargs):  # noqa: E501
        VolumeGroupDiskRecoveryPointClusterDiscoverSpec.__init__(self, reference_volume_group_recovery_point_ext_id, reference_recovery_point_ext_id, reference_disk_recovery_point_ext_id, *args, **kwargs)
        self.__offset = None
        self.__length = None
        self.__block_size_byte = None
        self.discriminator = None
        if offset is not None:
            self.__offset = offset
        if length is not None:
            self.__length = length
        if block_size_byte is not None:
            self.__block_size_byte = block_size_byte

    def _initialize_object_type(self):
        return 'dataprotection.v4.content.VolumeGroupRecoveryPointChangedRegionsComputeSpec'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def offset(self):
        """
        The start offset value to compute the changed region. If the value is not provided, the difference is executed from the offset of 0. Note: the start offset might automatically align to a system-defined block boundary.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__offset

    @offset.setter
    def offset(self, offset):

        self.__offset = offset

    @property
    def length(self):
        """
        The length to compute the changed region. If the value is not provided, the difference is performed from the start offset to the end of the disk. Note: the end offset might automatically align to a system-defined block boundary.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__length

    @length.setter
    def length(self, length):

        self.__length = length

    @property
    def block_size_byte(self):
        """
        When blockSizeByte is set, all returned ranges will start and end at blockSize addresses, and the changed blocks will match the block size. Supported values of blockSizeByte are [32768, 65536, 131072, 262144]. Example: if blockSizeByte is set to 32768 (i.e 32KB), all ranges will start at multiple of 32KB and end at multiple of 32KB value. Default blockSizeByte is set to 32KB

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__block_size_byte

    @block_size_byte.setter
    def block_size_byte(self, block_size_byte):
        if block_size_byte is not None and block_size_byte > 262144:  # noqa: E501
            raise ValueError("Invalid value for `block_size_byte`, must be a value less than or equal to `262144`")  # noqa: E501
        if block_size_byte is not None and block_size_byte < 32768:  # noqa: E501
            raise ValueError("Invalid value for `block_size_byte`, must be a value greater than or equal to `32768`")  # noqa: E501

        self.__block_size_byte = block_size_byte

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VolumeGroupRecoveryPointChangedRegionsComputeSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupRecoveryPointChangedRegionsComputeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


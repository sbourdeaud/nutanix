# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_dataprotection_py_client.models
from ntnx_dataprotection_py_client.models.OneOfdataprotection.v4.config.RecoveryPointRepositoryobject_storage_reference import RecoveryPointRepositoryobject_storage_reference  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.ObjectStorageType import ObjectStorageType  # noqa: F401,E501

class RecoveryPointRepository(ExternalizableAbstractModel):

    """A recovery point repository is a reference to a data store which can be used to store recovery points using Multicloud snapshot technology (MST). It can be backed by any S3-compatible object storage solutions, which include options like Nutanix Objects, as well as hyperscaler offerings such as Amazon AWS S3 and Microsoft Azure Blobs.

    :param name: (:attr:`name`) Name of the recovery point repository.
    :type name: 
     max=256 chars
    
    :param object_storage_type: (:attr:`object_storage_type`) 
    :type object_storage_type: 
    
    
    :param object_storage_reference: (:attr:`object_storage_reference`) Object storage reference details.
    :type object_storage_reference: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'object_storage_type': 'dataprotection.v4.config.ObjectStorageType',
        'object_storage_reference': 'OneOfdataprotection.v4.config.RecoveryPointRepositoryobject_storage_reference',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'object_storage_type': 'objectStorageType',
        'object_storage_reference': 'objectStorageReference',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, object_storage_type=None, object_storage_reference=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__object_storage_type = None
        self.__object_storage_reference = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if object_storage_type is not None:
            self.__object_storage_type = object_storage_type
        if object_storage_reference is not None:
            self.__object_storage_reference = object_storage_reference

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.RecoveryPointRepository'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the recovery point repository.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self.__name = name

    @property
    def object_storage_type(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.ObjectStorageType`
        """  # noqa: E501
        return self.__object_storage_type

    @object_storage_type.setter
    def object_storage_type(self, object_storage_type):

        self.__object_storage_type = object_storage_type

    @property
    def object_storage_reference(self):
        """
        Object storage reference details.

        :type:
                :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.AzureBlobStorageContainer` | 
                :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.AmazonS3Bucket` | 
                :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.NutanixObjectsBucket`
        """  # noqa: E501
        return self.__object_storage_reference

    @object_storage_reference.setter
    def object_storage_reference(self, object_storage_reference):

        self.__object_storage_reference = object_storage_reference

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_dataprotection_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RecoveryPointRepository, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecoveryPointRepository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


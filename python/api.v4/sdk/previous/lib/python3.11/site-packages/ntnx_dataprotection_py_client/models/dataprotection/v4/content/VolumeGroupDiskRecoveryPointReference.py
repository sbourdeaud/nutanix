# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.dataprotection.v4.content.DiskRecoveryPointReference import DiskRecoveryPointReference  # noqa: F401,E501

class VolumeGroupDiskRecoveryPointReference(DiskRecoveryPointReference):

    """Specs containing vm disk recovery point information used to discover the cluster.

    :param volume_group_recovery_point_ext_id: (:attr:`volume_group_recovery_point_ext_id`) The external identifier that can be used to retrieve the volume group recovery point using its URL (Note: This attribute will be removed in future releases; therefore use the volume group recovery point external identifier instead).
    :type volume_group_recovery_point_ext_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'volume_group_recovery_point_ext_id': 'str',
        'recovery_point_ext_id': 'str',
        'disk_recovery_point_ext_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'volume_group_recovery_point_ext_id': 'volumeGroupRecoveryPointExtId',
        'recovery_point_ext_id': 'recoveryPointExtId',
        'disk_recovery_point_ext_id': 'diskRecoveryPointExtId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, volume_group_recovery_point_ext_id=None, recovery_point_ext_id=None, disk_recovery_point_ext_id=None, *args, **kwargs):  # noqa: E501
        DiskRecoveryPointReference.__init__(self, recovery_point_ext_id, disk_recovery_point_ext_id, *args, **kwargs)
        self.__volume_group_recovery_point_ext_id = None
        self.discriminator = None
        if volume_group_recovery_point_ext_id is not None:
            self.__volume_group_recovery_point_ext_id = volume_group_recovery_point_ext_id

    def _initialize_object_type(self):
        return 'dataprotection.v4.content.VolumeGroupDiskRecoveryPointReference'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def volume_group_recovery_point_ext_id(self):
        """
        The external identifier that can be used to retrieve the volume group recovery point using its URL (Note: This attribute will be removed in future releases; therefore use the volume group recovery point external identifier instead).

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__volume_group_recovery_point_ext_id

    @volume_group_recovery_point_ext_id.setter
    def volume_group_recovery_point_ext_id(self, volume_group_recovery_point_ext_id):
        if volume_group_recovery_point_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', volume_group_recovery_point_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `volume_group_recovery_point_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__volume_group_recovery_point_ext_id = volume_group_recovery_point_ext_id

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VolumeGroupDiskRecoveryPointReference, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupDiskRecoveryPointReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


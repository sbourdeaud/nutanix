# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.DataProtectionSiteReference import DataProtectionSiteReference  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.ProtectedResourceReplicationStatus import ProtectedResourceReplicationStatus  # noqa: F401,E501

class ReplicationState(object):

    """Replication related information about the protected resource.

    :param protection_policy_ext_id: (:attr:`protection_policy_ext_id`) The external identifier of the Protection policy associated with the protected resource.
    :type protection_policy_ext_id: 
    
    
    :param recovery_point_objective_seconds: (:attr:`recovery_point_objective_seconds`) The recovery point objective of the schedule in seconds.
    :type recovery_point_objective_seconds: 
    
     min=0, max=2419200
    :param replication_status: (:attr:`replication_status`) 
    :type replication_status: 
    
    
    :param target_site_reference: (:attr:`target_site_reference`) 
    :type target_site_reference: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'protection_policy_ext_id': 'str',
        'recovery_point_objective_seconds': 'int',
        'replication_status': 'dataprotection.v4.config.ProtectedResourceReplicationStatus',
        'target_site_reference': 'dataprotection.v4.config.DataProtectionSiteReference',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'protection_policy_ext_id': 'protectionPolicyExtId',
        'recovery_point_objective_seconds': 'recoveryPointObjectiveSeconds',
        'replication_status': 'replicationStatus',
        'target_site_reference': 'targetSiteReference',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, protection_policy_ext_id=None, recovery_point_objective_seconds=None, replication_status=None, target_site_reference=None, *args, **kwargs):  # noqa: E501
        self.__protection_policy_ext_id = None
        self.__recovery_point_objective_seconds = None
        self.__replication_status = None
        self.__target_site_reference = None
        self.discriminator = None
        if protection_policy_ext_id is not None:
            self.__protection_policy_ext_id = protection_policy_ext_id
        if recovery_point_objective_seconds is not None:
            self.__recovery_point_objective_seconds = recovery_point_objective_seconds
        if replication_status is not None:
            self.__replication_status = replication_status
        if target_site_reference is not None:
            self.__target_site_reference = target_site_reference
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.ReplicationState'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def protection_policy_ext_id(self):
        """
        The external identifier of the Protection policy associated with the protected resource.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__protection_policy_ext_id

    @protection_policy_ext_id.setter
    def protection_policy_ext_id(self, protection_policy_ext_id):
        if protection_policy_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', protection_policy_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `protection_policy_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__protection_policy_ext_id = protection_policy_ext_id

    @property
    def recovery_point_objective_seconds(self):
        """
        The recovery point objective of the schedule in seconds.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__recovery_point_objective_seconds

    @recovery_point_objective_seconds.setter
    def recovery_point_objective_seconds(self, recovery_point_objective_seconds):
        if recovery_point_objective_seconds is not None and recovery_point_objective_seconds > 2419200:  # noqa: E501
            raise ValueError("Invalid value for `recovery_point_objective_seconds`, must be a value less than or equal to `2419200`")  # noqa: E501
        if recovery_point_objective_seconds is not None and recovery_point_objective_seconds < 0:  # noqa: E501
            raise ValueError("Invalid value for `recovery_point_objective_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__recovery_point_objective_seconds = recovery_point_objective_seconds

    @property
    def replication_status(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.ProtectedResourceReplicationStatus`
        """  # noqa: E501
        return self.__replication_status

    @replication_status.setter
    def replication_status(self, replication_status):

        self.__replication_status = replication_status

    @property
    def target_site_reference(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.DataProtectionSiteReference`
        """  # noqa: E501
        return self.__target_site_reference

    @target_site_reference.setter
    def target_site_reference(self, target_site_reference):

        self.__target_site_reference = target_site_reference

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReplicationState, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


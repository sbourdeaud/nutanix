# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.DataProtectionSiteReference import DataProtectionSiteReference  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.ProtectedEntityType import ProtectedEntityType  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.ReplicationState import ReplicationState  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.SiteProtectionInfo import SiteProtectionInfo  # noqa: F401,E501

class ProtectedResource(ExternalizableAbstractModel):

    """Once a VM or volume group is associated with some protection policy, the schedule(s) in the protection policy kick in to achieve the specified recovery point objective. A protected resource represents the data protection view of such a VM or volume group. It contains information such as the restorable time ranges on the local Prism Central and the state of replication to the targets specified in all the applied protection policies.

    :param entity_ext_id: (:attr:`entity_ext_id`) The external identifier of the VM or the volume group associated with the protected resource.
    :type entity_ext_id: 
    
    
    :param entity_type: (:attr:`entity_type`) 
    :type entity_type: 
    
    
    :param source_site_reference: (:attr:`source_site_reference`) 
    :type source_site_reference: 
    
    
    :param site_protection_info: (:attr:`site_protection_info`) The data protection details for the protected resource that are relevant to any of the sites in the local Prism Central, like the time ranges available for recovery.
    :type site_protection_info: 
    
    
    :param replication_states: (:attr:`replication_states`) 
    :type replication_states: 
    
    
    :param consistency_group_ext_id: (:attr:`consistency_group_ext_id`) External identifier of the Consistency group which the protected resource is part of.
    :type consistency_group_ext_id: 
    
    
    :param category_fq_names: (:attr:`category_fq_names`) Category key-value pairs associated with the protected resource at the time of protection. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' will be represented as 'dept/hr'.
    :type category_fq_names: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'entity_ext_id': 'str',
        'entity_type': 'dataprotection.v4.config.ProtectedEntityType',
        'source_site_reference': 'dataprotection.v4.config.DataProtectionSiteReference',
        'site_protection_info': 'list[dataprotection.v4.config.SiteProtectionInfo]',
        'replication_states': 'list[dataprotection.v4.config.ReplicationState]',
        'consistency_group_ext_id': 'str',
        'category_fq_names': 'list[str]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_ext_id': 'entityExtId',
        'entity_type': 'entityType',
        'source_site_reference': 'sourceSiteReference',
        'site_protection_info': 'siteProtectionInfo',
        'replication_states': 'replicationStates',
        'consistency_group_ext_id': 'consistencyGroupExtId',
        'category_fq_names': 'categoryFqNames',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_ext_id=None, entity_type=None, source_site_reference=None, site_protection_info=None, replication_states=None, consistency_group_ext_id=None, category_fq_names=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__entity_ext_id = None
        self.__entity_type = None
        self.__source_site_reference = None
        self.__site_protection_info = None
        self.__replication_states = None
        self.__consistency_group_ext_id = None
        self.__category_fq_names = None
        self.discriminator = None
        if entity_ext_id is not None:
            self.__entity_ext_id = entity_ext_id
        if entity_type is not None:
            self.__entity_type = entity_type
        if source_site_reference is not None:
            self.__source_site_reference = source_site_reference
        if site_protection_info is not None:
            self.__site_protection_info = site_protection_info
        if replication_states is not None:
            self.__replication_states = replication_states
        if consistency_group_ext_id is not None:
            self.__consistency_group_ext_id = consistency_group_ext_id
        if category_fq_names is not None:
            self.__category_fq_names = category_fq_names

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.ProtectedResource'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def entity_ext_id(self):
        """
        The external identifier of the VM or the volume group associated with the protected resource.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_ext_id

    @entity_ext_id.setter
    def entity_ext_id(self, entity_ext_id):
        if entity_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', entity_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__entity_ext_id = entity_ext_id

    @property
    def entity_type(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.ProtectedEntityType`
        """  # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def source_site_reference(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.DataProtectionSiteReference`
        """  # noqa: E501
        return self.__source_site_reference

    @source_site_reference.setter
    def source_site_reference(self, source_site_reference):

        self.__source_site_reference = source_site_reference

    @property
    def site_protection_info(self):
        """
        The data protection details for the protected resource that are relevant to any of the sites in the local Prism Central, like the time ranges available for recovery.

        :type:
             list[ :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.SiteProtectionInfo` ]
        """  # noqa: E501
        return self.__site_protection_info

    @site_protection_info.setter
    def site_protection_info(self, site_protection_info):

        self.__site_protection_info = site_protection_info

    @property
    def replication_states(self):
        """
        

        :type:
             list[ :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.ReplicationState` ]
        """  # noqa: E501
        return self.__replication_states

    @replication_states.setter
    def replication_states(self, replication_states):

        self.__replication_states = replication_states

    @property
    def consistency_group_ext_id(self):
        """
        External identifier of the Consistency group which the protected resource is part of.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__consistency_group_ext_id

    @consistency_group_ext_id.setter
    def consistency_group_ext_id(self, consistency_group_ext_id):
        if consistency_group_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', consistency_group_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `consistency_group_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__consistency_group_ext_id = consistency_group_ext_id

    @property
    def category_fq_names(self):
        """
        Category key-value pairs associated with the protected resource at the time of protection. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' will be represented as 'dept/hr'.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__category_fq_names

    @category_fq_names.setter
    def category_fq_names(self, category_fq_names):

        self.__category_fq_names = category_fq_names

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ProtectedResource, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectedResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


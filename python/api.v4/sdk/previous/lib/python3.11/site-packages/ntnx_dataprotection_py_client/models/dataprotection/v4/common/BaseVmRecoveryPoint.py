# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_dataprotection_py_client.models
from ntnx_dataprotection_py_client.models.OneOfdataprotection.v4.common.BaseVmRecoveryPointapplication_consistent_properties import BaseVmRecoveryPointapplication_consistent_properties  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.common.BaseRecoveryPoint import BaseRecoveryPoint  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.common.DiskRecoveryPoint import DiskRecoveryPoint  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.common.RecoveryPointStatus import RecoveryPointStatus  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.common.RecoveryPointType import RecoveryPointType  # noqa: F401,E501

class BaseVmRecoveryPoint(BaseRecoveryPoint):

    """A model that represents common properties of a VM Recovery point resources

    :param consistency_group_ext_id: (:attr:`consistency_group_ext_id`) External identifier of the Consistency group which the VM was part of at the time of recovery point creation.
    :type consistency_group_ext_id: 
    
    
    :param disk_recovery_points: (:attr:`disk_recovery_points`) 
    :type disk_recovery_points: 
    
    
    :param vm_ext_id: (:attr:`vm_ext_id`) VM external identifier which is captured as a part of this recovery point.
    :type vm_ext_id: 
    
    
    :param vm_categories: (:attr:`vm_categories`) Category key-value pairs associated with the VM at the time of recovery point creation. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' is displayed as 'dept/hr'.
    :type vm_categories: 
    
    
    :param application_consistent_properties: (:attr:`application_consistent_properties`) User-defined application-consistent properties for the recovery point.
    :type application_consistent_properties: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'consistency_group_ext_id': 'str',
        'disk_recovery_points': 'list[dataprotection.v4.common.DiskRecoveryPoint]',
        'vm_ext_id': 'str',
        'vm_categories': 'list[str]',
        'application_consistent_properties': 'OneOfdataprotection.v4.common.BaseVmRecoveryPointapplication_consistent_properties',
        'location_agnostic_id': 'str',
        'name': 'str',
        'creation_time': 'datetime',
        'expiration_time': 'datetime',
        'status': 'dataprotection.v4.common.RecoveryPointStatus',
        'recovery_point_type': 'dataprotection.v4.common.RecoveryPointType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'consistency_group_ext_id': 'consistencyGroupExtId',
        'disk_recovery_points': 'diskRecoveryPoints',
        'vm_ext_id': 'vmExtId',
        'vm_categories': 'vmCategories',
        'application_consistent_properties': 'applicationConsistentProperties',
        'location_agnostic_id': 'locationAgnosticId',
        'name': 'name',
        'creation_time': 'creationTime',
        'expiration_time': 'expirationTime',
        'status': 'status',
        'recovery_point_type': 'recoveryPointType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, consistency_group_ext_id=None, disk_recovery_points=None, vm_ext_id=None, vm_categories=None, application_consistent_properties=None, location_agnostic_id=None, name=None, creation_time=None, expiration_time=None, status=None, recovery_point_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        BaseRecoveryPoint.__init__(self, location_agnostic_id, name, creation_time, expiration_time, status, recovery_point_type, ext_id, links, tenant_id, *args, **kwargs)
        self.__consistency_group_ext_id = None
        self.__disk_recovery_points = None
        self.__vm_ext_id = None
        self.__vm_categories = None
        self.__application_consistent_properties = None
        self.discriminator = None
        if consistency_group_ext_id is not None:
            self.__consistency_group_ext_id = consistency_group_ext_id
        if disk_recovery_points is not None:
            self.__disk_recovery_points = disk_recovery_points
        if vm_ext_id is not None:
            self.__vm_ext_id = vm_ext_id
        if vm_categories is not None:
            self.__vm_categories = vm_categories
        if application_consistent_properties is not None:
            self.__application_consistent_properties = application_consistent_properties

    def _initialize_object_type(self):
        return 'dataprotection.v4.common.BaseVmRecoveryPoint'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def consistency_group_ext_id(self):
        """
        External identifier of the Consistency group which the VM was part of at the time of recovery point creation.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__consistency_group_ext_id

    @consistency_group_ext_id.setter
    def consistency_group_ext_id(self, consistency_group_ext_id):
        if consistency_group_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', consistency_group_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `consistency_group_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__consistency_group_ext_id = consistency_group_ext_id

    @property
    def disk_recovery_points(self):
        """
        

        :type:
             list[ :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.common.DiskRecoveryPoint` ]
        """  # noqa: E501
        return self.__disk_recovery_points

    @disk_recovery_points.setter
    def disk_recovery_points(self, disk_recovery_points):

        self.__disk_recovery_points = disk_recovery_points

    @property
    def vm_ext_id(self):
        """
        VM external identifier which is captured as a part of this recovery point.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vm_ext_id

    @vm_ext_id.setter
    def vm_ext_id(self, vm_ext_id):
        if vm_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', vm_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `vm_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__vm_ext_id = vm_ext_id

    @property
    def vm_categories(self):
        """
        Category key-value pairs associated with the VM at the time of recovery point creation. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' is displayed as 'dept/hr'.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__vm_categories

    @vm_categories.setter
    def vm_categories(self, vm_categories):

        self.__vm_categories = vm_categories

    @property
    def application_consistent_properties(self):
        """
        User-defined application-consistent properties for the recovery point.

        :type:
                :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.common.VssProperties`
        """  # noqa: E501
        return self.__application_consistent_properties

    @application_consistent_properties.setter
    def application_consistent_properties(self, application_consistent_properties):

        self.__application_consistent_properties = application_consistent_properties

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_dataprotection_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(BaseVmRecoveryPoint, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseVmRecoveryPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.ConsistencyGroupMember import ConsistencyGroupMember  # noqa: F401,E501

class ConsistencyGroup(ExternalizableAbstractModel):

    """In many scenarios, it is necessary to capture the state of an application as a combined snapshot of the internal states of a related set of entities at a specific point in time. A consistency group is a collection of these entities, where their combined snapshot reflects the state of an application at that particular point in time.

    :param name: (:attr:`name`) Name of the consistency group.
    :type name: required
     max=256 chars
    
    :param owner_ext_id: (:attr:`owner_ext_id`) The external identifier of the user who created this consistency group. This is a read-only field that is inserted into the consistency group entity at the time of the consistency group creation.
    :type owner_ext_id: 
    
    
    :param members: (:attr:`members`) 
    :type members: required
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) The external identifier of the cluster to which the entities in the consistency group are associated.
    :type cluster_ext_id: 
    
    
    :param protection_policy_ext_id: (:attr:`protection_policy_ext_id`) The external identifier of the protection policy that protects the consistency group.
    :type protection_policy_ext_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'owner_ext_id': 'str',
        'members': 'list[dataprotection.v4.config.ConsistencyGroupMember]',
        'cluster_ext_id': 'str',
        'protection_policy_ext_id': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'owner_ext_id': 'ownerExtId',
        'members': 'members',
        'cluster_ext_id': 'clusterExtId',
        'protection_policy_ext_id': 'protectionPolicyExtId',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, owner_ext_id=None, members=None, cluster_ext_id=None, protection_policy_ext_id=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__owner_ext_id = None
        self.__members = None
        self.__cluster_ext_id = None
        self.__protection_policy_ext_id = None
        self.discriminator = None
        self.__name = name
        if owner_ext_id is not None:
            self.__owner_ext_id = owner_ext_id
        self.__members = members
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if protection_policy_ext_id is not None:
            self.__protection_policy_ext_id = protection_policy_ext_id

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.ConsistencyGroup'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the consistency group.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self.__name = name

    @property
    def owner_ext_id(self):
        """
        The external identifier of the user who created this consistency group. This is a read-only field that is inserted into the consistency group entity at the time of the consistency group creation.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__owner_ext_id

    @owner_ext_id.setter
    def owner_ext_id(self, owner_ext_id):
        if owner_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owner_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `owner_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owner_ext_id = owner_ext_id

    @property
    def members(self):
        """
        

        :type:
             list[ :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.ConsistencyGroupMember` ]
        """  # noqa: E501
        return self.__members

    @members.setter
    def members(self, members):
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self.__members = members

    @property
    def cluster_ext_id(self):
        """
        The external identifier of the cluster to which the entities in the consistency group are associated.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def protection_policy_ext_id(self):
        """
        The external identifier of the protection policy that protects the consistency group.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__protection_policy_ext_id

    @protection_policy_ext_id.setter
    def protection_policy_ext_id(self, protection_policy_ext_id):
        if protection_policy_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', protection_policy_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `protection_policy_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__protection_policy_ext_id = protection_policy_ext_id

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ConsistencyGroup, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsistencyGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


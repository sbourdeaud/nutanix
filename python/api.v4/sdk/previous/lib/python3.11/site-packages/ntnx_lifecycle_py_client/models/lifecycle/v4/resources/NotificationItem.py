# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityBaseModel import EntityBaseModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityType import EntityType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.HypervisorType import HypervisorType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.LocationInfo import LocationInfo  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.NotificationType import NotificationType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.NotificationDetail import NotificationDetail  # noqa: F401,E501

class NotificationItem(EntityBaseModel):

    """LCM upgrade notification generated for a node or cluster based on specified entity/entities and target version(s).

    :param notification_type: (:attr:`notification_type`) 
    :type notification_type: 
    
    
    :param details: (:attr:`details`) List of upgrade notifications for this entity.
    :type details: 
    
    
    :param to_version: (:attr:`to_version`) Version to upgrade to.
    :type to_version: 
     min=1 chars, max=128 chars
    
    :param location_info: (:attr:`location_info`) 
    :type location_info: 
    
    
    :param hypervisor_type: (:attr:`hypervisor_type`) 
    :type hypervisor_type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'notification_type': 'lifecycle.v4.common.NotificationType',
        'details': 'list[lifecycle.v4.resources.NotificationDetail]',
        'to_version': 'str',
        'location_info': 'lifecycle.v4.common.LocationInfo',
        'hypervisor_type': 'lifecycle.v4.common.HypervisorType',
        'entity_class': 'str',
        'entity_model': 'str',
        'entity_type': 'lifecycle.v4.common.EntityType',
        'entity_version': 'str',
        'hardware_family': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'notification_type': 'notificationType',
        'details': 'details',
        'to_version': 'toVersion',
        'location_info': 'locationInfo',
        'hypervisor_type': 'hypervisorType',
        'entity_class': 'entityClass',
        'entity_model': 'entityModel',
        'entity_type': 'entityType',
        'entity_version': 'entityVersion',
        'hardware_family': 'hardwareFamily',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, notification_type=None, details=None, to_version=None, location_info=None, hypervisor_type=None, entity_class=None, entity_model=None, entity_type=None, entity_version=None, hardware_family=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        EntityBaseModel.__init__(self, entity_class, entity_model, entity_type, entity_version, hardware_family, ext_id, links, tenant_id, *args, **kwargs)
        self.__notification_type = None
        self.__details = None
        self.__to_version = None
        self.__location_info = None
        self.__hypervisor_type = None
        self.discriminator = None
        if notification_type is not None:
            self.__notification_type = notification_type
        if details is not None:
            self.__details = details
        if to_version is not None:
            self.__to_version = to_version
        if location_info is not None:
            self.__location_info = location_info
        if hypervisor_type is not None:
            self.__hypervisor_type = hypervisor_type

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.NotificationItem'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def notification_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.NotificationType`
        """  # noqa: E501
        return self.__notification_type

    @notification_type.setter
    def notification_type(self, notification_type):

        self.__notification_type = notification_type

    @property
    def details(self):
        """
        List of upgrade notifications for this entity.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.NotificationDetail` ]
        """  # noqa: E501
        return self.__details

    @details.setter
    def details(self, details):

        self.__details = details

    @property
    def to_version(self):
        """
        Version to upgrade to.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__to_version

    @to_version.setter
    def to_version(self, to_version):
        if to_version is not None and len(to_version) > 128:
            raise ValueError("Invalid value for `to_version`, length must be less than or equal to `128`")  # noqa: E501
        if to_version is not None and len(to_version) < 1:
            raise ValueError("Invalid value for `to_version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__to_version = to_version

    @property
    def location_info(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.LocationInfo`
        """  # noqa: E501
        return self.__location_info

    @location_info.setter
    def location_info(self, location_info):

        self.__location_info = location_info

    @property
    def hypervisor_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.HypervisorType`
        """  # noqa: E501
        return self.__hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):

        self.__hypervisor_type = hypervisor_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NotificationItem, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


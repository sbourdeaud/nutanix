# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityUpdateSpec import EntityUpdateSpec  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.ManagementServer import ManagementServer  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.PrechecksSpec import PrechecksSpec  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.SystemAutoMgmtFlag import SystemAutoMgmtFlag  # noqa: F401,E501

class UpgradeSpec(PrechecksSpec):

    """Specification for an upgrade operation of an entity to a particular target version.

    :param auto_handle_flags: (:attr:`auto_handle_flags`) List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through.
    :type auto_handle_flags: 
    
    
    :param max_wait_time_in_secs: (:attr:`max_wait_time_in_secs`) Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode.
    :type max_wait_time_in_secs: 
    
     min=60, max=86400

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'auto_handle_flags': 'list[lifecycle.v4.common.SystemAutoMgmtFlag]',
        'max_wait_time_in_secs': 'int',
        'management_server': 'lifecycle.v4.common.ManagementServer',
        'entity_update_specs': 'list[lifecycle.v4.common.EntityUpdateSpec]',
        'skipped_precheck_flags': 'list[lifecycle.v4.common.SystemAutoMgmtFlag]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'auto_handle_flags': 'autoHandleFlags',
        'max_wait_time_in_secs': 'maxWaitTimeInSecs',
        'management_server': 'managementServer',
        'entity_update_specs': 'entityUpdateSpecs',
        'skipped_precheck_flags': 'skippedPrecheckFlags',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, auto_handle_flags=None, max_wait_time_in_secs=None, management_server=None, entity_update_specs=None, skipped_precheck_flags=None, *args, **kwargs):  # noqa: E501
        PrechecksSpec.__init__(self, management_server, entity_update_specs, skipped_precheck_flags, *args, **kwargs)
        self.__auto_handle_flags = None
        self.__max_wait_time_in_secs = None
        self.discriminator = None
        if auto_handle_flags is not None:
            self.__auto_handle_flags = auto_handle_flags
        if max_wait_time_in_secs is not None:
            self.__max_wait_time_in_secs = max_wait_time_in_secs

    def _initialize_object_type(self):
        return 'lifecycle.v4.common.UpgradeSpec'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def auto_handle_flags(self):
        """
        List of automated system operations to perform, to avoid precheck failure and let the system restore state after an update is complete. The allowed flag is: - 'powerOffUvms': This allows the system to automatically power off user VMs which cannot be migrated to other hosts and power them on when the update is done. This option can avoid pinned VM precheck failure on the host which needs to enter maintenance mode during the update and allow the update to go through.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.SystemAutoMgmtFlag` ]
        """  # noqa: E501
        return self.__auto_handle_flags

    @auto_handle_flags.setter
    def auto_handle_flags(self, auto_handle_flags):

        self.__auto_handle_flags = auto_handle_flags

    @property
    def max_wait_time_in_secs(self):
        """
        Number of seconds LCM waits for the VMs to come up after exiting host maintenance mode.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__max_wait_time_in_secs

    @max_wait_time_in_secs.setter
    def max_wait_time_in_secs(self, max_wait_time_in_secs):
        if max_wait_time_in_secs is not None and max_wait_time_in_secs > 86400:  # noqa: E501
            raise ValueError("Invalid value for `max_wait_time_in_secs`, must be a value less than or equal to `86400`")  # noqa: E501
        if max_wait_time_in_secs is not None and max_wait_time_in_secs < 60:  # noqa: E501
            raise ValueError("Invalid value for `max_wait_time_in_secs`, must be a value greater than or equal to `60`")  # noqa: E501

        self.__max_wait_time_in_secs = max_wait_time_in_secs

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(UpgradeSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


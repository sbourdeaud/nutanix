# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityType import EntityType  # noqa: F401,E501

class EntityBaseModel(ExternalizableAbstractModel):

    """The list of properties that can be expanded on the LCM entity.

    :param entity_class: (:attr:`entity_class`) LCM entity class.
    :type entity_class: 
     min=1 chars, max=256 chars
    
    :param entity_model: (:attr:`entity_model`) LCM entity model.
    :type entity_model: 
     min=1 chars, max=256 chars
    
    :param entity_type: (:attr:`entity_type`) 
    :type entity_type: 
    
    
    :param entity_version: (:attr:`entity_version`) Current version of an LCM entity.
    :type entity_version: 
     min=1 chars, max=128 chars
    
    :param hardware_family: (:attr:`hardware_family`) A hardware family for a LCM entity.
    :type hardware_family: 
     min=1 chars, max=256 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'entity_class': 'str',
        'entity_model': 'str',
        'entity_type': 'lifecycle.v4.common.EntityType',
        'entity_version': 'str',
        'hardware_family': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_class': 'entityClass',
        'entity_model': 'entityModel',
        'entity_type': 'entityType',
        'entity_version': 'entityVersion',
        'hardware_family': 'hardwareFamily',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_class=None, entity_model=None, entity_type=None, entity_version=None, hardware_family=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__entity_class = None
        self.__entity_model = None
        self.__entity_type = None
        self.__entity_version = None
        self.__hardware_family = None
        self.discriminator = None
        if entity_class is not None:
            self.__entity_class = entity_class
        if entity_model is not None:
            self.__entity_model = entity_model
        if entity_type is not None:
            self.__entity_type = entity_type
        if entity_version is not None:
            self.__entity_version = entity_version
        if hardware_family is not None:
            self.__hardware_family = hardware_family

    def _initialize_object_type(self):
        return 'lifecycle.v4.common.EntityBaseModel'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def entity_class(self):
        """
        LCM entity class.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_class

    @entity_class.setter
    def entity_class(self, entity_class):
        if entity_class is not None and len(entity_class) > 256:
            raise ValueError("Invalid value for `entity_class`, length must be less than or equal to `256`")  # noqa: E501
        if entity_class is not None and len(entity_class) < 1:
            raise ValueError("Invalid value for `entity_class`, length must be greater than or equal to `1`")  # noqa: E501

        self.__entity_class = entity_class

    @property
    def entity_model(self):
        """
        LCM entity model.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_model

    @entity_model.setter
    def entity_model(self, entity_model):
        if entity_model is not None and len(entity_model) > 256:
            raise ValueError("Invalid value for `entity_model`, length must be less than or equal to `256`")  # noqa: E501
        if entity_model is not None and len(entity_model) < 1:
            raise ValueError("Invalid value for `entity_model`, length must be greater than or equal to `1`")  # noqa: E501

        self.__entity_model = entity_model

    @property
    def entity_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityType`
        """  # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def entity_version(self):
        """
        Current version of an LCM entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_version

    @entity_version.setter
    def entity_version(self, entity_version):
        if entity_version is not None and len(entity_version) > 128:
            raise ValueError("Invalid value for `entity_version`, length must be less than or equal to `128`")  # noqa: E501
        if entity_version is not None and len(entity_version) < 1:
            raise ValueError("Invalid value for `entity_version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__entity_version = entity_version

    @property
    def hardware_family(self):
        """
        A hardware family for a LCM entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hardware_family

    @hardware_family.setter
    def hardware_family(self, hardware_family):
        if hardware_family is not None and len(hardware_family) > 256:
            raise ValueError("Invalid value for `hardware_family`, length must be less than or equal to `256`")  # noqa: E501
        if hardware_family is not None and len(hardware_family) < 1:
            raise ValueError("Invalid value for `hardware_family`, length must be greater than or equal to `1`")  # noqa: E501

        self.__hardware_family = hardware_family

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(EntityBaseModel, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityBaseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


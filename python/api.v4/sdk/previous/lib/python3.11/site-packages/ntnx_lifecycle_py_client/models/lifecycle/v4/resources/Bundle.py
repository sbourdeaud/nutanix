# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_lifecycle_py_client.models
from ntnx_lifecycle_py_client.models.OneOflifecycle.v4.resources.Bundlechecksum import Bundlechecksum  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.BundleType import BundleType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.BundleVendor import BundleVendor  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.Image import Image  # noqa: F401,E501

class Bundle(ExternalizableAbstractModel):

    """Details of the LCM bundle

    :param name: (:attr:`name`) Name of the LCM bundle
    :type name: required
     min=1 chars, max=128 chars
    
    :param size_bytes: (:attr:`size_bytes`) Size of the LCM bundle
    :type size_bytes: 
    
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param vendor: (:attr:`vendor`) 
    :type vendor: required
    
    
    :param images: (:attr:`images`) List of LCM images
    :type images: 
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) Cluster uuid on which the resource is present or operation is being performed.
    :type cluster_ext_id: 
    
    
    :param checksum: (:attr:`checksum`) SHA256 sum.
    :type checksum: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'size_bytes': 'int',
        'type': 'lifecycle.v4.resources.BundleType',
        'vendor': 'lifecycle.v4.resources.BundleVendor',
        'images': 'list[lifecycle.v4.resources.Image]',
        'cluster_ext_id': 'str',
        'checksum': 'OneOflifecycle.v4.resources.Bundlechecksum',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'size_bytes': 'sizeBytes',
        'type': 'type',
        'vendor': 'vendor',
        'images': 'images',
        'cluster_ext_id': 'clusterExtId',
        'checksum': 'checksum',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, size_bytes=None, type=None, vendor=None, images=None, cluster_ext_id=None, checksum=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__size_bytes = None
        self.__type = None
        self.__vendor = None
        self.__images = None
        self.__cluster_ext_id = None
        self.__checksum = None
        self.discriminator = None
        self.__name = name
        if size_bytes is not None:
            self.__size_bytes = size_bytes
        if type is not None:
            self.__type = type
        self.__vendor = vendor
        if images is not None:
            self.__images = images
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if checksum is not None:
            self.__checksum = checksum

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.Bundle'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the LCM bundle

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def size_bytes(self):
        """
        Size of the LCM bundle

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):

        self.__size_bytes = size_bytes

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.BundleType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def vendor(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.BundleVendor`
        """  # noqa: E501
        return self.__vendor

    @vendor.setter
    def vendor(self, vendor):
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self.__vendor = vendor

    @property
    def images(self):
        """
        List of LCM images

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.Image` ]
        """  # noqa: E501
        return self.__images

    @images.setter
    def images(self, images):

        self.__images = images

    @property
    def cluster_ext_id(self):
        """
        Cluster uuid on which the resource is present or operation is being performed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def checksum(self):
        """
        SHA256 sum.

        :type:
                :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.LcmSha256Sum` | 
                :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.LcmMd5Sum`
        """  # noqa: E501
        return self.__checksum

    @checksum.setter
    def checksum(self, checksum):

        self.__checksum = checksum

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_lifecycle_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Bundle, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bundle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityUpdateSpec import EntityUpdateSpec  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.DeployableVersion import DeployableVersion  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.UpdatedTargetEntityResult import UpdatedTargetEntityResult  # noqa: F401,E501

class RecommendationResult(ExternalizableAbstractModel):

    """Upgrade recommendations for LCM entity/entities.

    :param entity_update_specs: (:attr:`entity_update_specs`) List of entity update objects for getting recommendations.
    :type entity_update_specs: 
    
    
    :param skipped_entities: (:attr:`skipped_entities`) List of skipped LCM entities from the input recommendations specification.
    :type skipped_entities: 
    
    
    :param modifiable_entities: (:attr:`modifiable_entities`) List of modified LCM entities from the input recommendations specification.
    :type modifiable_entities: 
    
    
    :param addable_entities: (:attr:`addable_entities`) List of added LCM entities to the input recommendations specification.
    :type addable_entities: 
    
    
    :param deployable_versions: (:attr:`deployable_versions`) List of deployable entities and their dependencies.
    :type deployable_versions: 
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) Cluster uuid on which the resource is present or operation is being performed.
    :type cluster_ext_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'entity_update_specs': 'list[lifecycle.v4.common.EntityUpdateSpec]',
        'skipped_entities': 'list[lifecycle.v4.resources.UpdatedTargetEntityResult]',
        'modifiable_entities': 'list[lifecycle.v4.resources.UpdatedTargetEntityResult]',
        'addable_entities': 'list[lifecycle.v4.resources.UpdatedTargetEntityResult]',
        'deployable_versions': 'list[lifecycle.v4.resources.DeployableVersion]',
        'cluster_ext_id': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_update_specs': 'entityUpdateSpecs',
        'skipped_entities': 'skippedEntities',
        'modifiable_entities': 'modifiableEntities',
        'addable_entities': 'addableEntities',
        'deployable_versions': 'deployableVersions',
        'cluster_ext_id': 'clusterExtId',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_update_specs=None, skipped_entities=None, modifiable_entities=None, addable_entities=None, deployable_versions=None, cluster_ext_id=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__entity_update_specs = None
        self.__skipped_entities = None
        self.__modifiable_entities = None
        self.__addable_entities = None
        self.__deployable_versions = None
        self.__cluster_ext_id = None
        self.discriminator = None
        if entity_update_specs is not None:
            self.__entity_update_specs = entity_update_specs
        if skipped_entities is not None:
            self.__skipped_entities = skipped_entities
        if modifiable_entities is not None:
            self.__modifiable_entities = modifiable_entities
        if addable_entities is not None:
            self.__addable_entities = addable_entities
        if deployable_versions is not None:
            self.__deployable_versions = deployable_versions
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.RecommendationResult'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def entity_update_specs(self):
        """
        List of entity update objects for getting recommendations.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityUpdateSpec` ]
        """  # noqa: E501
        return self.__entity_update_specs

    @entity_update_specs.setter
    def entity_update_specs(self, entity_update_specs):

        self.__entity_update_specs = entity_update_specs

    @property
    def skipped_entities(self):
        """
        List of skipped LCM entities from the input recommendations specification.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.UpdatedTargetEntityResult` ]
        """  # noqa: E501
        return self.__skipped_entities

    @skipped_entities.setter
    def skipped_entities(self, skipped_entities):

        self.__skipped_entities = skipped_entities

    @property
    def modifiable_entities(self):
        """
        List of modified LCM entities from the input recommendations specification.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.UpdatedTargetEntityResult` ]
        """  # noqa: E501
        return self.__modifiable_entities

    @modifiable_entities.setter
    def modifiable_entities(self, modifiable_entities):

        self.__modifiable_entities = modifiable_entities

    @property
    def addable_entities(self):
        """
        List of added LCM entities to the input recommendations specification.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.UpdatedTargetEntityResult` ]
        """  # noqa: E501
        return self.__addable_entities

    @addable_entities.setter
    def addable_entities(self, addable_entities):

        self.__addable_entities = addable_entities

    @property
    def deployable_versions(self):
        """
        List of deployable entities and their dependencies.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.DeployableVersion` ]
        """  # noqa: E501
        return self.__deployable_versions

    @deployable_versions.setter
    def deployable_versions(self, deployable_versions):

        self.__deployable_versions = deployable_versions

    @property
    def cluster_ext_id(self):
        """
        Cluster uuid on which the resource is present or operation is being performed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RecommendationResult, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


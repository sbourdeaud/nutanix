# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.AvailableVersionStatus import AvailableVersionStatus  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityBaseModel import EntityBaseModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityType import EntityType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.ImageFile import ImageFile  # noqa: F401,E501

class Image(EntityBaseModel):

    """LCM image (List of LCM image files).

    :param release_notes: (:attr:`release_notes`) Release notes for the LCM image.
    :type release_notes: 
     max=1024 chars
    
    :param spec_version: (:attr:`spec_version`) Version specification for image metadata JSON.
    :type spec_version: required
     min=1 chars, max=128 chars
    
    :param is_qualified: (:attr:`is_qualified`) Denotes if the thirdparty version is qualified. (**Default** False)
    :type is_qualified: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param files: (:attr:`files`) List of files in the image.
    :type files: 
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) Cluster uuid on which the resource is present or operation is being performed.
    :type cluster_ext_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'release_notes': 'str',
        'spec_version': 'str',
        'is_qualified': 'bool',
        'status': 'lifecycle.v4.common.AvailableVersionStatus',
        'files': 'list[lifecycle.v4.resources.ImageFile]',
        'cluster_ext_id': 'str',
        'entity_class': 'str',
        'entity_model': 'str',
        'entity_type': 'lifecycle.v4.common.EntityType',
        'entity_version': 'str',
        'hardware_family': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'release_notes': 'releaseNotes',
        'spec_version': 'specVersion',
        'is_qualified': 'isQualified',
        'status': 'status',
        'files': 'files',
        'cluster_ext_id': 'clusterExtId',
        'entity_class': 'entityClass',
        'entity_model': 'entityModel',
        'entity_type': 'entityType',
        'entity_version': 'entityVersion',
        'hardware_family': 'hardwareFamily',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, release_notes=None, spec_version=None, is_qualified=False, status=None, files=None, cluster_ext_id=None, entity_class=None, entity_model=None, entity_type=None, entity_version=None, hardware_family=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        EntityBaseModel.__init__(self, entity_class, entity_model, entity_type, entity_version, hardware_family, ext_id, links, tenant_id, *args, **kwargs)
        self.__release_notes = None
        self.__spec_version = None
        self.__is_qualified = None
        self.__status = None
        self.__files = None
        self.__cluster_ext_id = None
        self.discriminator = None
        if release_notes is not None:
            self.__release_notes = release_notes
        self.__spec_version = spec_version
        if is_qualified is not None:
            self.__is_qualified = is_qualified
        if status is not None:
            self.__status = status
        if files is not None:
            self.__files = files
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.Image'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def release_notes(self):
        """
        Release notes for the LCM image.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        if release_notes is not None and len(release_notes) > 1024:
            raise ValueError("Invalid value for `release_notes`, length must be less than or equal to `1024`")  # noqa: E501

        self.__release_notes = release_notes

    @property
    def spec_version(self):
        """
        Version specification for image metadata JSON.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__spec_version

    @spec_version.setter
    def spec_version(self, spec_version):
        if spec_version is None:
            raise ValueError("Invalid value for `spec_version`, must not be `None`")  # noqa: E501
        if spec_version is not None and len(spec_version) > 128:
            raise ValueError("Invalid value for `spec_version`, length must be less than or equal to `128`")  # noqa: E501
        if spec_version is not None and len(spec_version) < 1:
            raise ValueError("Invalid value for `spec_version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__spec_version = spec_version

    @property
    def is_qualified(self):
        """
        Denotes if the thirdparty version is qualified.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_qualified

    @is_qualified.setter
    def is_qualified(self, is_qualified):

        self.__is_qualified = is_qualified

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.AvailableVersionStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def files(self):
        """
        List of files in the image.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.ImageFile` ]
        """  # noqa: E501
        return self.__files

    @files.setter
    def files(self, files):

        self.__files = files

    @property
    def cluster_ext_id(self):
        """
        Cluster uuid on which the resource is present or operation is being performed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Image, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


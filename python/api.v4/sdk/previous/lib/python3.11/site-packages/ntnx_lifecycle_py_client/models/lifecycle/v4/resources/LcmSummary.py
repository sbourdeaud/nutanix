# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.InProgressOpDetails import InProgressOpDetails  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.Capability import Capability  # noqa: F401,E501

class LcmSummary(ExternalizableAbstractModel):

    """Summary of LCM state on a cluster.

    :param current_version: (:attr:`current_version`) Current LCM Version.
    :type current_version: 
     min=1 chars, max=128 chars
    
    :param available_version: (:attr:`available_version`) LCM framework version present in the LCM URL.
    :type available_version: 
     min=1 chars, max=128 chars
    
    :param hardware_vendor: (:attr:`hardware_vendor`) Hardware vendor information.
    :type hardware_vendor: 
     min=1 chars, max=256 chars
    
    :param capabilities: (:attr:`capabilities`) List of capabilities of cluster. These capabilities are used to determine the features supported by LCM in the cluster.
    :type capabilities: 
    
    
    :param in_progress_operation: (:attr:`in_progress_operation`) 
    :type in_progress_operation: 
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) Cluster uuid on which the resource is present or operation is being performed.
    :type cluster_ext_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'current_version': 'str',
        'available_version': 'str',
        'hardware_vendor': 'str',
        'capabilities': 'list[lifecycle.v4.resources.Capability]',
        'in_progress_operation': 'lifecycle.v4.common.InProgressOpDetails',
        'cluster_ext_id': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'current_version': 'currentVersion',
        'available_version': 'availableVersion',
        'hardware_vendor': 'hardwareVendor',
        'capabilities': 'capabilities',
        'in_progress_operation': 'inProgressOperation',
        'cluster_ext_id': 'clusterExtId',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, current_version=None, available_version=None, hardware_vendor=None, capabilities=None, in_progress_operation=None, cluster_ext_id=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__current_version = None
        self.__available_version = None
        self.__hardware_vendor = None
        self.__capabilities = None
        self.__in_progress_operation = None
        self.__cluster_ext_id = None
        self.discriminator = None
        if current_version is not None:
            self.__current_version = current_version
        if available_version is not None:
            self.__available_version = available_version
        if hardware_vendor is not None:
            self.__hardware_vendor = hardware_vendor
        if capabilities is not None:
            self.__capabilities = capabilities
        if in_progress_operation is not None:
            self.__in_progress_operation = in_progress_operation
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.LcmSummary'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def current_version(self):
        """
        Current LCM Version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__current_version

    @current_version.setter
    def current_version(self, current_version):
        if current_version is not None and len(current_version) > 128:
            raise ValueError("Invalid value for `current_version`, length must be less than or equal to `128`")  # noqa: E501
        if current_version is not None and len(current_version) < 1:
            raise ValueError("Invalid value for `current_version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__current_version = current_version

    @property
    def available_version(self):
        """
        LCM framework version present in the LCM URL.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__available_version

    @available_version.setter
    def available_version(self, available_version):
        if available_version is not None and len(available_version) > 128:
            raise ValueError("Invalid value for `available_version`, length must be less than or equal to `128`")  # noqa: E501
        if available_version is not None and len(available_version) < 1:
            raise ValueError("Invalid value for `available_version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__available_version = available_version

    @property
    def hardware_vendor(self):
        """
        Hardware vendor information.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hardware_vendor

    @hardware_vendor.setter
    def hardware_vendor(self, hardware_vendor):
        if hardware_vendor is not None and len(hardware_vendor) > 256:
            raise ValueError("Invalid value for `hardware_vendor`, length must be less than or equal to `256`")  # noqa: E501
        if hardware_vendor is not None and len(hardware_vendor) < 1:
            raise ValueError("Invalid value for `hardware_vendor`, length must be greater than or equal to `1`")  # noqa: E501

        self.__hardware_vendor = hardware_vendor

    @property
    def capabilities(self):
        """
        List of capabilities of cluster. These capabilities are used to determine the features supported by LCM in the cluster.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.Capability` ]
        """  # noqa: E501
        return self.__capabilities

    @capabilities.setter
    def capabilities(self, capabilities):

        self.__capabilities = capabilities

    @property
    def in_progress_operation(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.InProgressOpDetails`
        """  # noqa: E501
        return self.__in_progress_operation

    @in_progress_operation.setter
    def in_progress_operation(self, in_progress_operation):

        self.__in_progress_operation = in_progress_operation

    @property
    def cluster_ext_id(self):
        """
        Cluster uuid on which the resource is present or operation is being performed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LcmSummary, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LcmSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


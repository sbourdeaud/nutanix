# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityBaseModel import EntityBaseModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityType import EntityType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.LocationInfo import LocationInfo  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.AvailableVersion import AvailableVersion  # noqa: F401,E501

class Entity(EntityBaseModel):

    """Details of an LCM entity.

    :param entity_description: (:attr:`entity_description`) Description of an LCM entity.
    :type entity_description: 
     min=1 chars, max=256 chars
    
    :param location_info: (:attr:`location_info`) 
    :type location_info: 
    
    
    :param target_version: (:attr:`target_version`) The requested update version of an LCM entity.
    :type target_version: 
     min=1 chars, max=128 chars
    
    :param last_updated_time: (:attr:`last_updated_time`) UTC date and time in RFC-3339 format when the task was last updated.
    :type last_updated_time: 
    
    
    :param device_id: (:attr:`device_id`) Unique identifier of an LCM entity e.g. \"HDD serial number\".
    :type device_id: 
     min=1 chars, max=128 chars
    
    :param group_uuid: (:attr:`group_uuid`) UUID of the group that this LCM entity is part of.
    :type group_uuid: 
    
    
    :param entity_details: (:attr:`entity_details`) Detailed information for the LCM entity. For example, firmware entities contain additional information about NIC and so on.
    :type entity_details: 
    
    
    :param child_entities: (:attr:`child_entities`) Component information for the payload based entity.
    :type child_entities: 
    
    
    :param available_versions: (:attr:`available_versions`) List of available versions for an LCM entity to update.
    :type available_versions: 
    
    
    :param sub_entities: (:attr:`sub_entities`) A list of sub-entities applicable to the entity.
    :type sub_entities: 
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) Cluster uuid on which the resource is present or operation is being performed.
    :type cluster_ext_id: 
    
    
    :param hardware_vendor: (:attr:`hardware_vendor`) Hardware vendor information.
    :type hardware_vendor: 
     min=1 chars, max=256 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'entity_description': 'str',
        'location_info': 'lifecycle.v4.common.LocationInfo',
        'target_version': 'str',
        'last_updated_time': 'datetime',
        'device_id': 'str',
        'group_uuid': 'str',
        'entity_details': 'list[common.v1.config.KVPair]',
        'child_entities': 'list[str]',
        'available_versions': 'list[lifecycle.v4.resources.AvailableVersion]',
        'sub_entities': 'list[lifecycle.v4.common.EntityBaseModel]',
        'cluster_ext_id': 'str',
        'hardware_vendor': 'str',
        'entity_class': 'str',
        'entity_model': 'str',
        'entity_type': 'lifecycle.v4.common.EntityType',
        'entity_version': 'str',
        'hardware_family': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_description': 'entityDescription',
        'location_info': 'locationInfo',
        'target_version': 'targetVersion',
        'last_updated_time': 'lastUpdatedTime',
        'device_id': 'deviceId',
        'group_uuid': 'groupUuid',
        'entity_details': 'entityDetails',
        'child_entities': 'childEntities',
        'available_versions': 'availableVersions',
        'sub_entities': 'subEntities',
        'cluster_ext_id': 'clusterExtId',
        'hardware_vendor': 'hardwareVendor',
        'entity_class': 'entityClass',
        'entity_model': 'entityModel',
        'entity_type': 'entityType',
        'entity_version': 'entityVersion',
        'hardware_family': 'hardwareFamily',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_description=None, location_info=None, target_version=None, last_updated_time=None, device_id=None, group_uuid=None, entity_details=None, child_entities=None, available_versions=None, sub_entities=None, cluster_ext_id=None, hardware_vendor=None, entity_class=None, entity_model=None, entity_type=None, entity_version=None, hardware_family=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        EntityBaseModel.__init__(self, entity_class, entity_model, entity_type, entity_version, hardware_family, ext_id, links, tenant_id, *args, **kwargs)
        self.__entity_description = None
        self.__location_info = None
        self.__target_version = None
        self.__last_updated_time = None
        self.__device_id = None
        self.__group_uuid = None
        self.__entity_details = None
        self.__child_entities = None
        self.__available_versions = None
        self.__sub_entities = None
        self.__cluster_ext_id = None
        self.__hardware_vendor = None
        self.discriminator = None
        if entity_description is not None:
            self.__entity_description = entity_description
        if location_info is not None:
            self.__location_info = location_info
        if target_version is not None:
            self.__target_version = target_version
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if device_id is not None:
            self.__device_id = device_id
        if group_uuid is not None:
            self.__group_uuid = group_uuid
        if entity_details is not None:
            self.__entity_details = entity_details
        if child_entities is not None:
            self.__child_entities = child_entities
        if available_versions is not None:
            self.__available_versions = available_versions
        if sub_entities is not None:
            self.__sub_entities = sub_entities
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if hardware_vendor is not None:
            self.__hardware_vendor = hardware_vendor

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.Entity'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def entity_description(self):
        """
        Description of an LCM entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__entity_description

    @entity_description.setter
    def entity_description(self, entity_description):
        if entity_description is not None and len(entity_description) > 256:
            raise ValueError("Invalid value for `entity_description`, length must be less than or equal to `256`")  # noqa: E501
        if entity_description is not None and len(entity_description) < 1:
            raise ValueError("Invalid value for `entity_description`, length must be greater than or equal to `1`")  # noqa: E501

        self.__entity_description = entity_description

    @property
    def location_info(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.LocationInfo`
        """  # noqa: E501
        return self.__location_info

    @location_info.setter
    def location_info(self, location_info):

        self.__location_info = location_info

    @property
    def target_version(self):
        """
        The requested update version of an LCM entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__target_version

    @target_version.setter
    def target_version(self, target_version):
        if target_version is not None and len(target_version) > 128:
            raise ValueError("Invalid value for `target_version`, length must be less than or equal to `128`")  # noqa: E501
        if target_version is not None and len(target_version) < 1:
            raise ValueError("Invalid value for `target_version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__target_version = target_version

    @property
    def last_updated_time(self):
        """
        UTC date and time in RFC-3339 format when the task was last updated.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def device_id(self):
        """
        Unique identifier of an LCM entity e.g. \"HDD serial number\".

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__device_id

    @device_id.setter
    def device_id(self, device_id):
        if device_id is not None and len(device_id) > 128:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `128`")  # noqa: E501
        if device_id is not None and len(device_id) < 1:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `1`")  # noqa: E501

        self.__device_id = device_id

    @property
    def group_uuid(self):
        """
        UUID of the group that this LCM entity is part of.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__group_uuid

    @group_uuid.setter
    def group_uuid(self, group_uuid):
        if group_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', group_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `group_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__group_uuid = group_uuid

    @property
    def entity_details(self):
        """
        Detailed information for the LCM entity. For example, firmware entities contain additional information about NIC and so on.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.common.v1.config.KVPair` ]
        """  # noqa: E501
        return self.__entity_details

    @entity_details.setter
    def entity_details(self, entity_details):

        self.__entity_details = entity_details

    @property
    def child_entities(self):
        """
        Component information for the payload based entity.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__child_entities

    @child_entities.setter
    def child_entities(self, child_entities):

        self.__child_entities = child_entities

    @property
    def available_versions(self):
        """
        List of available versions for an LCM entity to update.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.AvailableVersion` ]
        """  # noqa: E501
        return self.__available_versions

    @available_versions.setter
    def available_versions(self, available_versions):

        self.__available_versions = available_versions

    @property
    def sub_entities(self):
        """
        A list of sub-entities applicable to the entity.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.EntityBaseModel` ]
        """  # noqa: E501
        return self.__sub_entities

    @sub_entities.setter
    def sub_entities(self, sub_entities):

        self.__sub_entities = sub_entities

    @property
    def cluster_ext_id(self):
        """
        Cluster uuid on which the resource is present or operation is being performed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def hardware_vendor(self):
        """
        Hardware vendor information.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__hardware_vendor

    @hardware_vendor.setter
    def hardware_vendor(self, hardware_vendor):
        if hardware_vendor is not None and len(hardware_vendor) > 256:
            raise ValueError("Invalid value for `hardware_vendor`, length must be less than or equal to `256`")  # noqa: E501
        if hardware_vendor is not None and len(hardware_vendor) < 1:
            raise ValueError("Invalid value for `hardware_vendor`, length must be greater than or equal to `1`")  # noqa: E501

        self.__hardware_vendor = hardware_vendor

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Entity, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


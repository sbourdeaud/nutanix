# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.common.AvailableVersionStatus import AvailableVersionStatus  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.DependentEntity import DependentEntity  # noqa: F401,E501

class AvailableVersion(object):

    """LCM framework version present in the LCM URL.

    :param version: (:attr:`version`) LCM framework version present in the LCM URL.
    :type version: 
     min=1 chars, max=128 chars
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param is_enabled: (:attr:`is_enabled`) Indicates if the available update is enabled. (**Default** True)
    :type is_enabled: 
    
    
    :param available_version_uuid: (:attr:`available_version_uuid`) Available version UUID.
    :type available_version_uuid: 
    
    
    :param order: (:attr:`order`) Order of this available version (1 being the lowest and 6 being the highest) when multiple versions are present with different status.
    :type order: 
    
     min=1, max=10000
    :param disablement_reason: (:attr:`disablement_reason`) Reason for disabling the available version.
    :type disablement_reason: 
     min=1 chars, max=512 chars
    
    :param release_notes: (:attr:`release_notes`) Release notes corresponding to the update.
    :type release_notes: 
     min=1 chars, max=1024 chars
    
    :param release_date: (:attr:`release_date`) Release date for the entities that need this information.
    :type release_date: 
    
    
    :param custom_message: (:attr:`custom_message`) Update custom messages other than release notes to the user about this available version.
    :type custom_message: 
     min=1 chars, max=512 chars
    
    :param child_entities: (:attr:`child_entities`) Component information for the payload based entity.
    :type child_entities: 
    
    
    :param group_uuid: (:attr:`group_uuid`) UUID of the group that this LCM entity is part of.
    :type group_uuid: 
    
    
    :param dependencies: (:attr:`dependencies`) List of dependencies for the available version.
    :type dependencies: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'version': 'str',
        'status': 'lifecycle.v4.common.AvailableVersionStatus',
        'is_enabled': 'bool',
        'available_version_uuid': 'str',
        'order': 'int',
        'disablement_reason': 'str',
        'release_notes': 'str',
        'release_date': 'date',
        'custom_message': 'str',
        'child_entities': 'list[str]',
        'group_uuid': 'str',
        'dependencies': 'list[lifecycle.v4.resources.DependentEntity]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'version': 'version',
        'status': 'status',
        'is_enabled': 'isEnabled',
        'available_version_uuid': 'availableVersionUuid',
        'order': 'order',
        'disablement_reason': 'disablementReason',
        'release_notes': 'releaseNotes',
        'release_date': 'releaseDate',
        'custom_message': 'customMessage',
        'child_entities': 'childEntities',
        'group_uuid': 'groupUuid',
        'dependencies': 'dependencies',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, version=None, status=None, is_enabled=True, available_version_uuid=None, order=None, disablement_reason=None, release_notes=None, release_date=None, custom_message=None, child_entities=None, group_uuid=None, dependencies=None, *args, **kwargs):  # noqa: E501
        self.__version = None
        self.__status = None
        self.__is_enabled = None
        self.__available_version_uuid = None
        self.__order = None
        self.__disablement_reason = None
        self.__release_notes = None
        self.__release_date = None
        self.__custom_message = None
        self.__child_entities = None
        self.__group_uuid = None
        self.__dependencies = None
        self.discriminator = None
        if version is not None:
            self.__version = version
        if status is not None:
            self.__status = status
        if is_enabled is not None:
            self.__is_enabled = is_enabled
        if available_version_uuid is not None:
            self.__available_version_uuid = available_version_uuid
        if order is not None:
            self.__order = order
        if disablement_reason is not None:
            self.__disablement_reason = disablement_reason
        if release_notes is not None:
            self.__release_notes = release_notes
        if release_date is not None:
            self.__release_date = release_date
        if custom_message is not None:
            self.__custom_message = custom_message
        if child_entities is not None:
            self.__child_entities = child_entities
        if group_uuid is not None:
            self.__group_uuid = group_uuid
        if dependencies is not None:
            self.__dependencies = dependencies
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.AvailableVersion'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def version(self):
        """
        LCM framework version present in the LCM URL.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):
        if version is not None and len(version) > 128:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `128`")  # noqa: E501
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self.__version = version

    @property
    def status(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.common.AvailableVersionStatus`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def is_enabled(self):
        """
        Indicates if the available update is enabled.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):

        self.__is_enabled = is_enabled

    @property
    def available_version_uuid(self):
        """
        Available version UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__available_version_uuid

    @available_version_uuid.setter
    def available_version_uuid(self, available_version_uuid):
        if available_version_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', available_version_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `available_version_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__available_version_uuid = available_version_uuid

    @property
    def order(self):
        """
        Order of this available version (1 being the lowest and 6 being the highest) when multiple versions are present with different status.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__order

    @order.setter
    def order(self, order):
        if order is not None and order > 10000:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `10000`")  # noqa: E501
        if order is not None and order < 1:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__order = order

    @property
    def disablement_reason(self):
        """
        Reason for disabling the available version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__disablement_reason

    @disablement_reason.setter
    def disablement_reason(self, disablement_reason):
        if disablement_reason is not None and len(disablement_reason) > 512:
            raise ValueError("Invalid value for `disablement_reason`, length must be less than or equal to `512`")  # noqa: E501
        if disablement_reason is not None and len(disablement_reason) < 1:
            raise ValueError("Invalid value for `disablement_reason`, length must be greater than or equal to `1`")  # noqa: E501

        self.__disablement_reason = disablement_reason

    @property
    def release_notes(self):
        """
        Release notes corresponding to the update.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        if release_notes is not None and len(release_notes) > 1024:
            raise ValueError("Invalid value for `release_notes`, length must be less than or equal to `1024`")  # noqa: E501
        if release_notes is not None and len(release_notes) < 1:
            raise ValueError("Invalid value for `release_notes`, length must be greater than or equal to `1`")  # noqa: E501

        self.__release_notes = release_notes

    @property
    def release_date(self):
        """
        Release date for the entities that need this information.

        :type:
                :class:`~date`
        """  # noqa: E501
        return self.__release_date

    @release_date.setter
    def release_date(self, release_date):

        self.__release_date = release_date

    @property
    def custom_message(self):
        """
        Update custom messages other than release notes to the user about this available version.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__custom_message

    @custom_message.setter
    def custom_message(self, custom_message):
        if custom_message is not None and len(custom_message) > 512:
            raise ValueError("Invalid value for `custom_message`, length must be less than or equal to `512`")  # noqa: E501
        if custom_message is not None and len(custom_message) < 1:
            raise ValueError("Invalid value for `custom_message`, length must be greater than or equal to `1`")  # noqa: E501

        self.__custom_message = custom_message

    @property
    def child_entities(self):
        """
        Component information for the payload based entity.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__child_entities

    @child_entities.setter
    def child_entities(self, child_entities):

        self.__child_entities = child_entities

    @property
    def group_uuid(self):
        """
        UUID of the group that this LCM entity is part of.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__group_uuid

    @group_uuid.setter
    def group_uuid(self, group_uuid):
        if group_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', group_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `group_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__group_uuid = group_uuid

    @property
    def dependencies(self):
        """
        List of dependencies for the available version.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.DependentEntity` ]
        """  # noqa: E501
        return self.__dependencies

    @dependencies.setter
    def dependencies(self, dependencies):

        self.__dependencies = dependencies

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AvailableVersion, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other


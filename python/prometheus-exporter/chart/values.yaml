#* use this section to detail your specific instances
instances:
  instance1:
    # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1
    # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
      # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
      type: ClusterIP
      # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
      port: 8000
    # Note that the secret referenced here must pre-exist on the k8s cluster
    environment: 
      - name: PRISM
        value: "<your_prism_ip>"
      - name: PRISM_USERNAME
        valueFrom:
          secretKeyRef:
            name: prism
            key: username
      - name: PRISM_SECRET
        valueFrom:
          secretKeyRef:
            name: prism
            key: secret
      - name: APP_PORT
        value: "9440"
      - name: POLLING_INTERVAL_SECONDS
        value: "30"
      - name: API_REQUESTS_TIMEOUT_SECONDS
        value: "30"
      - name: API_REQUESTS_RETRIES
        value: "5"
      - name: API_SLEEP_SECONDS_BETWEEN_RETRIES
        value: "15"
      - name: EXPORTER_PORT
        value: "8000"
      - name: VM_LIST
        value: ""
      - name: CLUSTER_METRICS
        value: "True"
      - name: STORAGE_CONTAINERS_METRICS
        value: "True"
      - name: IPMI_METRICS
        value: "False"
      - name: PRISM_CENTRAL_METRICS
        value: "False"
      - name: NCM_SSP_METRICS
        value: "False"
      - name: OPERATIONS_MODE
        value: "legacy"
      - name: PYTHONUNBUFFERED
        value: "1"
  

#* values below are commong for all instances
# If this is set to true, a serviceMonitor will be created for automating prometheus scraping
serviceMonitorCreate: true

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: harbor.eng.nutanix.com/solutions-eng/nutanix-prometheus-exporter
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 8000
readinessProbe:
  httpGet:
    path: /
    port: 8000

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
